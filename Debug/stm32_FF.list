
stm32_FF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e38  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fec  08004fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fec  08004fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ff4  08004ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  2000000c  08005008  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08005008  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcfb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c51  00000000  00000000  0002dd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0002f988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00030610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155ab  00000000  00000000  00031200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d89d  00000000  00000000  000467ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008961f  00000000  00000000  00054048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  000dd6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004fb4 	.word	0x08004fb4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004fb4 	.word	0x08004fb4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	80fb      	strh	r3, [r7, #6]
	DelayUs(5000);
 80004e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80004e6:	f000 f815 	bl	8000514 <DelayUs>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80004ea:	2101      	movs	r1, #1
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <HAL_GPIO_EXTI_Callback+0x34>)
 80004ee:	f001 fe73 	bl	80021d8 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d005      	beq.n	8000504 <HAL_GPIO_EXTI_Callback+0x2c>
		key_pressed ++;
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_GPIO_EXTI_Callback+0x38>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <HAL_GPIO_EXTI_Callback+0x38>)
 8000502:	701a      	strb	r2, [r3, #0]
	}
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40020000 	.word	0x40020000
 8000510:	2000042d 	.word	0x2000042d

08000514 <DelayUs>:

void DelayUs(uint32_t us) {
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	for (;us > 0; --us) {
 800051c:	e00b      	b.n	8000536 <DelayUs+0x22>
		for (uint16_t j = 3; j > 0; j--);
 800051e:	2303      	movs	r3, #3
 8000520:	81fb      	strh	r3, [r7, #14]
 8000522:	e002      	b.n	800052a <DelayUs+0x16>
 8000524:	89fb      	ldrh	r3, [r7, #14]
 8000526:	3b01      	subs	r3, #1
 8000528:	81fb      	strh	r3, [r7, #14]
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1f9      	bne.n	8000524 <DelayUs+0x10>
	for (;us > 0; --us) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3b01      	subs	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d1f0      	bne.n	800051e <DelayUs+0xa>
	}
}
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <prepareDshotPacket>:

static void prepareDshotPacket(const uint16_t elememt, uint16_t *esc_cmd)
{
 800054a:	b480      	push	{r7}
 800054c:	b089      	sub	sp, #36	; 0x24
 800054e:	af00      	add	r7, sp, #0
 8000550:	4603      	mov	r3, r0
 8000552:	6039      	str	r1, [r7, #0]
 8000554:	80fb      	strh	r3, [r7, #6]
    uint8_t requestTelemetry = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	74fb      	strb	r3, [r7, #19]
    uint16_t value = elememt;
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	823b      	strh	r3, [r7, #16]
    value = ( (value > 2047) ? 2047 : value );
 800055e:	8a3b      	ldrh	r3, [r7, #16]
 8000560:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000564:	4293      	cmp	r3, r2
 8000566:	bf28      	it	cs
 8000568:	4613      	movcs	r3, r2
 800056a:	823b      	strh	r3, [r7, #16]
    // 油门大小为11位  所以这里先左移一位 添加上请求回传标志共12位
    uint16_t packet = (value << 1) | requestTelemetry;
 800056c:	8a3b      	ldrh	r3, [r7, #16]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	b21a      	sxth	r2, r3
 8000572:	7cfb      	ldrb	r3, [r7, #19]
 8000574:	b21b      	sxth	r3, r3
 8000576:	4313      	orrs	r3, r2
 8000578:	b21b      	sxth	r3, r3
 800057a:	81fb      	strh	r3, [r7, #14]

    // 将12位数据分为3组 每组4位, 进行异或
    // compute checksum
    int csum = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
    int csum_data = packet;
 8000580:	89fb      	ldrh	r3, [r7, #14]
 8000582:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 3; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e009      	b.n	800059e <prepareDshotPacket+0x54>
        csum ^=  csum_data;   // xor data by nibbles
 800058a:	69fa      	ldr	r2, [r7, #28]
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	4053      	eors	r3, r2
 8000590:	61fb      	str	r3, [r7, #28]
        csum_data >>= 4;
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	111b      	asrs	r3, r3, #4
 8000596:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 3; i++) {
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	ddf2      	ble.n	800058a <prepareDshotPacket+0x40>
    }
    //取最后四位 其他的不要
    csum &= 0xf;
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	61fb      	str	r3, [r7, #28]
    // append checksum 将CRC添加到后四位
    packet = (packet << 4) | csum;
 80005ac:	89fb      	ldrh	r3, [r7, #14]
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	b21a      	sxth	r2, r3
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	81fb      	strh	r3, [r7, #14]

    esc_cmd[0]  = (packet & 0x8000) ? ESC_BIT_1 : ESC_BIT_0;
 80005bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	da01      	bge.n	80005c8 <prepareDshotPacket+0x7e>
 80005c4:	2264      	movs	r2, #100	; 0x64
 80005c6:	e000      	b.n	80005ca <prepareDshotPacket+0x80>
 80005c8:	2232      	movs	r2, #50	; 0x32
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	801a      	strh	r2, [r3, #0]
    esc_cmd[1]  = (packet & 0x4000) ? ESC_BIT_1 : ESC_BIT_0;
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <prepareDshotPacket+0x92>
 80005d8:	2264      	movs	r2, #100	; 0x64
 80005da:	e000      	b.n	80005de <prepareDshotPacket+0x94>
 80005dc:	2232      	movs	r2, #50	; 0x32
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	3302      	adds	r3, #2
 80005e2:	801a      	strh	r2, [r3, #0]
    esc_cmd[2]  = (packet & 0x2000) ? ESC_BIT_1 : ESC_BIT_0;
 80005e4:	89fb      	ldrh	r3, [r7, #14]
 80005e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <prepareDshotPacket+0xa8>
 80005ee:	2264      	movs	r2, #100	; 0x64
 80005f0:	e000      	b.n	80005f4 <prepareDshotPacket+0xaa>
 80005f2:	2232      	movs	r2, #50	; 0x32
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	3304      	adds	r3, #4
 80005f8:	801a      	strh	r2, [r3, #0]
    esc_cmd[3]  = (packet & 0x1000) ? ESC_BIT_1 : ESC_BIT_0;
 80005fa:	89fb      	ldrh	r3, [r7, #14]
 80005fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <prepareDshotPacket+0xbe>
 8000604:	2264      	movs	r2, #100	; 0x64
 8000606:	e000      	b.n	800060a <prepareDshotPacket+0xc0>
 8000608:	2232      	movs	r2, #50	; 0x32
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	3306      	adds	r3, #6
 800060e:	801a      	strh	r2, [r3, #0]
    esc_cmd[4]  = (packet & 0x0800) ? ESC_BIT_1 : ESC_BIT_0;
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <prepareDshotPacket+0xd4>
 800061a:	2264      	movs	r2, #100	; 0x64
 800061c:	e000      	b.n	8000620 <prepareDshotPacket+0xd6>
 800061e:	2232      	movs	r2, #50	; 0x32
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	3308      	adds	r3, #8
 8000624:	801a      	strh	r2, [r3, #0]
    esc_cmd[5]  = (packet & 0x0400) ? ESC_BIT_1 : ESC_BIT_0;
 8000626:	89fb      	ldrh	r3, [r7, #14]
 8000628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <prepareDshotPacket+0xea>
 8000630:	2264      	movs	r2, #100	; 0x64
 8000632:	e000      	b.n	8000636 <prepareDshotPacket+0xec>
 8000634:	2232      	movs	r2, #50	; 0x32
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	330a      	adds	r3, #10
 800063a:	801a      	strh	r2, [r3, #0]
    esc_cmd[6]  = (packet & 0x0200) ? ESC_BIT_1 : ESC_BIT_0;
 800063c:	89fb      	ldrh	r3, [r7, #14]
 800063e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <prepareDshotPacket+0x100>
 8000646:	2264      	movs	r2, #100	; 0x64
 8000648:	e000      	b.n	800064c <prepareDshotPacket+0x102>
 800064a:	2232      	movs	r2, #50	; 0x32
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	330c      	adds	r3, #12
 8000650:	801a      	strh	r2, [r3, #0]
    esc_cmd[7]  = (packet & 0x0100) ? ESC_BIT_1 : ESC_BIT_0;
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <prepareDshotPacket+0x116>
 800065c:	2264      	movs	r2, #100	; 0x64
 800065e:	e000      	b.n	8000662 <prepareDshotPacket+0x118>
 8000660:	2232      	movs	r2, #50	; 0x32
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	330e      	adds	r3, #14
 8000666:	801a      	strh	r2, [r3, #0]
    esc_cmd[8]  = (packet & 0x0080) ? ESC_BIT_1 : ESC_BIT_0;
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <prepareDshotPacket+0x12c>
 8000672:	2264      	movs	r2, #100	; 0x64
 8000674:	e000      	b.n	8000678 <prepareDshotPacket+0x12e>
 8000676:	2232      	movs	r2, #50	; 0x32
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	3310      	adds	r3, #16
 800067c:	801a      	strh	r2, [r3, #0]
    esc_cmd[9]  = (packet & 0x0040) ? ESC_BIT_1 : ESC_BIT_0;
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <prepareDshotPacket+0x142>
 8000688:	2264      	movs	r2, #100	; 0x64
 800068a:	e000      	b.n	800068e <prepareDshotPacket+0x144>
 800068c:	2232      	movs	r2, #50	; 0x32
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	3312      	adds	r3, #18
 8000692:	801a      	strh	r2, [r3, #0]
    esc_cmd[10] = (packet & 0x0020) ? ESC_BIT_1 : ESC_BIT_0;
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	f003 0320 	and.w	r3, r3, #32
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <prepareDshotPacket+0x158>
 800069e:	2264      	movs	r2, #100	; 0x64
 80006a0:	e000      	b.n	80006a4 <prepareDshotPacket+0x15a>
 80006a2:	2232      	movs	r2, #50	; 0x32
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	3314      	adds	r3, #20
 80006a8:	801a      	strh	r2, [r3, #0]
    esc_cmd[11] = (packet & 0x0010) ? ESC_BIT_1 : ESC_BIT_0;
 80006aa:	89fb      	ldrh	r3, [r7, #14]
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <prepareDshotPacket+0x16e>
 80006b4:	2264      	movs	r2, #100	; 0x64
 80006b6:	e000      	b.n	80006ba <prepareDshotPacket+0x170>
 80006b8:	2232      	movs	r2, #50	; 0x32
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	3316      	adds	r3, #22
 80006be:	801a      	strh	r2, [r3, #0]
    esc_cmd[12] = (packet & 0x8) ? ESC_BIT_1 : ESC_BIT_0;
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <prepareDshotPacket+0x184>
 80006ca:	2264      	movs	r2, #100	; 0x64
 80006cc:	e000      	b.n	80006d0 <prepareDshotPacket+0x186>
 80006ce:	2232      	movs	r2, #50	; 0x32
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	3318      	adds	r3, #24
 80006d4:	801a      	strh	r2, [r3, #0]
    esc_cmd[13] = (packet & 0x4) ? ESC_BIT_1 : ESC_BIT_0;
 80006d6:	89fb      	ldrh	r3, [r7, #14]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <prepareDshotPacket+0x19a>
 80006e0:	2264      	movs	r2, #100	; 0x64
 80006e2:	e000      	b.n	80006e6 <prepareDshotPacket+0x19c>
 80006e4:	2232      	movs	r2, #50	; 0x32
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	331a      	adds	r3, #26
 80006ea:	801a      	strh	r2, [r3, #0]
    esc_cmd[14] = (packet & 0x2) ? ESC_BIT_1 : ESC_BIT_0;
 80006ec:	89fb      	ldrh	r3, [r7, #14]
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <prepareDshotPacket+0x1b0>
 80006f6:	2264      	movs	r2, #100	; 0x64
 80006f8:	e000      	b.n	80006fc <prepareDshotPacket+0x1b2>
 80006fa:	2232      	movs	r2, #50	; 0x32
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	331c      	adds	r3, #28
 8000700:	801a      	strh	r2, [r3, #0]
    esc_cmd[15] = (packet & 0x1) ? ESC_BIT_1 : ESC_BIT_0;
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <prepareDshotPacket+0x1c6>
 800070c:	2264      	movs	r2, #100	; 0x64
 800070e:	e000      	b.n	8000712 <prepareDshotPacket+0x1c8>
 8000710:	2232      	movs	r2, #50	; 0x32
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	331e      	adds	r3, #30
 8000716:	801a      	strh	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	3724      	adds	r7, #36	; 0x24
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <SendDshotPacket>:

static void SendDshotPacket()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop_IT(&htim2);
 8000728:	480e      	ldr	r0, [pc, #56]	; (8000764 <SendDshotPacket+0x40>)
 800072a:	f002 facf 	bl	8002ccc <HAL_TIM_Base_Stop_IT>
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_1,(uint32_t *)ESC_CMD_MOTOR1,ESC_CMD_BUF_LEN);
 800072e:	2312      	movs	r3, #18
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <SendDshotPacket+0x44>)
 8000732:	2100      	movs	r1, #0
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <SendDshotPacket+0x48>)
 8000736:	f002 fb47 	bl	8002dc8 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_2,(uint32_t *)ESC_CMD_MOTOR2,ESC_CMD_BUF_LEN);
 800073a:	2312      	movs	r3, #18
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <SendDshotPacket+0x4c>)
 800073e:	2104      	movs	r1, #4
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <SendDshotPacket+0x48>)
 8000742:	f002 fb41 	bl	8002dc8 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_3,(uint32_t *)ESC_CMD_MOTOR3,ESC_CMD_BUF_LEN);
 8000746:	2312      	movs	r3, #18
 8000748:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <SendDshotPacket+0x50>)
 800074a:	2108      	movs	r1, #8
 800074c:	4807      	ldr	r0, [pc, #28]	; (800076c <SendDshotPacket+0x48>)
 800074e:	f002 fb3b 	bl	8002dc8 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_4,(uint32_t *)ESC_CMD_MOTOR4,ESC_CMD_BUF_LEN);
 8000752:	2312      	movs	r3, #18
 8000754:	4a08      	ldr	r2, [pc, #32]	; (8000778 <SendDshotPacket+0x54>)
 8000756:	210c      	movs	r1, #12
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <SendDshotPacket+0x48>)
 800075a:	f002 fb35 	bl	8002dc8 <HAL_TIM_PWM_Start_DMA>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000070 	.word	0x20000070
 8000768:	2000039c 	.word	0x2000039c
 800076c:	20000028 	.word	0x20000028
 8000770:	200003c0 	.word	0x200003c0
 8000774:	200003e4 	.word	0x200003e4
 8000778:	20000408 	.word	0x20000408

0800077c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim2);
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8000786:	f002 fa3f 	bl	8002c08 <HAL_TIM_Base_Start_IT>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000070 	.word	0x20000070

08000798 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d102      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    send_dshot_to_esc = 1;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
  }
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000070 	.word	0x20000070
 80007c0:	2000042c 	.word	0x2000042c

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fdfc 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f83a 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 fa54 	bl	8000c7c <MX_GPIO_Init>
  MX_DMA_Init();
 80007d4:	f000 f9d6 	bl	8000b84 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007d8:	f000 f9aa 	bl	8000b30 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80007dc:	f000 f89e 	bl	800091c <MX_TIM1_Init>
  MX_TIM2_Init();
 80007e0:	f000 f942 	bl	8000a68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  prepareDshotPacket(MIN_THROTTLE, ESC_CMD_MOTOR1);
 80007e4:	4913      	ldr	r1, [pc, #76]	; (8000834 <main+0x70>)
 80007e6:	2030      	movs	r0, #48	; 0x30
 80007e8:	f7ff feaf 	bl	800054a <prepareDshotPacket>
  HAL_TIM_Base_Start_IT(&htim2);
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <main+0x74>)
 80007ee:	f002 fa0b 	bl	8002c08 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (key_pressed == 1) {
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <main+0x78>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d105      	bne.n	8000806 <main+0x42>
			prepareDshotPacket(MAX_THROTTLE, ESC_CMD_MOTOR1);
 80007fa:	490e      	ldr	r1, [pc, #56]	; (8000834 <main+0x70>)
 80007fc:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000800:	f7ff fea3 	bl	800054a <prepareDshotPacket>
 8000804:	e00b      	b.n	800081e <main+0x5a>
		} else if (key_pressed == 2) {
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <main+0x78>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d107      	bne.n	800081e <main+0x5a>
      key_pressed = 0;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <main+0x78>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
			prepareDshotPacket(1046, ESC_CMD_MOTOR1);
 8000814:	4907      	ldr	r1, [pc, #28]	; (8000834 <main+0x70>)
 8000816:	f240 4016 	movw	r0, #1046	; 0x416
 800081a:	f7ff fe96 	bl	800054a <prepareDshotPacket>
		}
    if (send_dshot_to_esc) {
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <main+0x7c>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0e5      	beq.n	80007f2 <main+0x2e>
      send_dshot_to_esc = 0;
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <main+0x7c>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
      SendDshotPacket();
 800082c:	f7ff ff7a 	bl	8000724 <SendDshotPacket>
		if (key_pressed == 1) {
 8000830:	e7df      	b.n	80007f2 <main+0x2e>
 8000832:	bf00      	nop
 8000834:	2000039c 	.word	0x2000039c
 8000838:	20000070 	.word	0x20000070
 800083c:	2000042d 	.word	0x2000042d
 8000840:	2000042c 	.word	0x2000042c

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	; 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	; 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f004 fba6 	bl	8004fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <SystemClock_Config+0xd0>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a28      	ldr	r2, [pc, #160]	; (8000914 <SystemClock_Config+0xd0>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <SystemClock_Config+0xd0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <SystemClock_Config+0xd4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <SystemClock_Config+0xd4>)
 8000892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <SystemClock_Config+0xd4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008b8:	2319      	movs	r3, #25
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fccd 	bl	800226c <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008d8:	f000 fa70 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2102      	movs	r1, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 ff2f 	bl	800275c <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000904:	f000 fa5a 	bl	8000dbc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000908:	f002 f80e 	bl	8002928 <HAL_RCC_EnableCSS>
}
 800090c:	bf00      	nop
 800090e:	3750      	adds	r7, #80	; 0x50
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b092      	sub	sp, #72	; 0x48
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
 800093c:	615a      	str	r2, [r3, #20]
 800093e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2220      	movs	r2, #32
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f004 fb2c 	bl	8004fa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094c:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <MX_TIM1_Init+0x144>)
 800094e:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <MX_TIM1_Init+0x148>)
 8000950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000952:	4b43      	ldr	r3, [pc, #268]	; (8000a60 <MX_TIM1_Init+0x144>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <MX_TIM1_Init+0x144>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 133;
 800095e:	4b40      	ldr	r3, [pc, #256]	; (8000a60 <MX_TIM1_Init+0x144>)
 8000960:	2285      	movs	r2, #133	; 0x85
 8000962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b3e      	ldr	r3, [pc, #248]	; (8000a60 <MX_TIM1_Init+0x144>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096a:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <MX_TIM1_Init+0x144>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <MX_TIM1_Init+0x144>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000976:	483a      	ldr	r0, [pc, #232]	; (8000a60 <MX_TIM1_Init+0x144>)
 8000978:	f002 f9d7 	bl	8002d2a <HAL_TIM_PWM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 fa1b 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800098e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000992:	4619      	mov	r1, r3
 8000994:	4832      	ldr	r0, [pc, #200]	; (8000a60 <MX_TIM1_Init+0x144>)
 8000996:	f003 faf9 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80009a0:	f000 fa0c 	bl	8000dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a4:	2360      	movs	r3, #96	; 0x60
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCPOLARITY_HIGH;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	2200      	movs	r2, #0
 80009c6:	4619      	mov	r1, r3
 80009c8:	4825      	ldr	r0, [pc, #148]	; (8000a60 <MX_TIM1_Init+0x144>)
 80009ca:	f002 fcb5 	bl	8003338 <HAL_TIM_PWM_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009d4:	f000 f9f2 	bl	8000dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	2204      	movs	r2, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	481f      	ldr	r0, [pc, #124]	; (8000a60 <MX_TIM1_Init+0x144>)
 80009e2:	f002 fca9 	bl	8003338 <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80009ec:	f000 f9e6 	bl	8000dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	2208      	movs	r2, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	4819      	ldr	r0, [pc, #100]	; (8000a60 <MX_TIM1_Init+0x144>)
 80009fa:	f002 fc9d 	bl	8003338 <HAL_TIM_PWM_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000a04:	f000 f9da 	bl	8000dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	220c      	movs	r2, #12
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <MX_TIM1_Init+0x144>)
 8000a12:	f002 fc91 	bl	8003338 <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000a1c:	f000 f9ce 	bl	8000dbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4807      	ldr	r0, [pc, #28]	; (8000a60 <MX_TIM1_Init+0x144>)
 8000a44:	f003 fb10 	bl	8004068 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000a4e:	f000 f9b5 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <MX_TIM1_Init+0x144>)
 8000a54:	f000 fb06 	bl	8001064 <HAL_TIM_MspPostInit>

}
 8000a58:	bf00      	nop
 8000a5a:	3748      	adds	r7, #72	; 0x48
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000028 	.word	0x20000028
 8000a64:	40010000 	.word	0x40010000

08000a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000aaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000abc:	481b      	ldr	r0, [pc, #108]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000abe:	f002 f854 	bl	8002b6a <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000ac8:	f000 f978 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4814      	ldr	r0, [pc, #80]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000ada:	f002 fcef 	bl	80034bc <HAL_TIM_ConfigClockSource>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ae4:	f000 f96a 	bl	8000dbc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000af8:	f002 fda7 	bl	800364a <HAL_TIM_SlaveConfigSynchro>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b02:	f000 f95b 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <MX_TIM2_Init+0xc4>)
 8000b14:	f003 fa3a 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000b1e:	f000 f94d 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3730      	adds	r7, #48	; 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000070 	.word	0x20000070

08000b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_USART1_UART_Init+0x50>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b68:	f003 fae4 	bl	8004134 <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b72:	f000 f923 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000238 	.word	0x20000238
 8000b80:	40011000 	.word	0x40011000

08000b84 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <MX_DMA_Init+0xec>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a37      	ldr	r2, [pc, #220]	; (8000c70 <MX_DMA_Init+0xec>)
 8000b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <MX_DMA_Init+0xec>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000ba8:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <MX_DMA_Init+0xf4>)
 8000baa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000bac:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000bb2:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc4:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000bd8:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bde:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000be0:	2204      	movs	r2, #4
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000be4:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000be6:	2203      	movs	r2, #3
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000bf6:	481f      	ldr	r0, [pc, #124]	; (8000c74 <MX_DMA_Init+0xf0>)
 8000bf8:	f000 fd68 	bl	80016cc <HAL_DMA_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 8000c02:	f000 f8db 	bl	8000dbc <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2039      	movs	r0, #57	; 0x39
 8000c0c:	f000 fd27 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c10:	2039      	movs	r0, #57	; 0x39
 8000c12:	f000 fd40 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	203a      	movs	r0, #58	; 0x3a
 8000c1c:	f000 fd1f 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c20:	203a      	movs	r0, #58	; 0x3a
 8000c22:	f000 fd38 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	203c      	movs	r0, #60	; 0x3c
 8000c2c:	f000 fd17 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000c30:	203c      	movs	r0, #60	; 0x3c
 8000c32:	f000 fd30 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2044      	movs	r0, #68	; 0x44
 8000c3c:	f000 fd0f 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000c40:	2044      	movs	r0, #68	; 0x44
 8000c42:	f000 fd28 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2045      	movs	r0, #69	; 0x45
 8000c4c:	f000 fd07 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c50:	2045      	movs	r0, #69	; 0x45
 8000c52:	f000 fd20 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2046      	movs	r0, #70	; 0x46
 8000c5c:	f000 fcff 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000c60:	2046      	movs	r0, #70	; 0x46
 8000c62:	f000 fd18 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	2000033c 	.word	0x2000033c
 8000c78:	40026410 	.word	0x40026410

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b45      	ldr	r3, [pc, #276]	; (8000dac <MX_GPIO_Init+0x130>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a44      	ldr	r2, [pc, #272]	; (8000dac <MX_GPIO_Init+0x130>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b42      	ldr	r3, [pc, #264]	; (8000dac <MX_GPIO_Init+0x130>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <MX_GPIO_Init+0x130>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a3d      	ldr	r2, [pc, #244]	; (8000dac <MX_GPIO_Init+0x130>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <MX_GPIO_Init+0x130>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b37      	ldr	r3, [pc, #220]	; (8000dac <MX_GPIO_Init+0x130>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a36      	ldr	r2, [pc, #216]	; (8000dac <MX_GPIO_Init+0x130>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <MX_GPIO_Init+0x130>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b30      	ldr	r3, [pc, #192]	; (8000dac <MX_GPIO_Init+0x130>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <MX_GPIO_Init+0x130>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <MX_GPIO_Init+0x130>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d08:	4829      	ldr	r0, [pc, #164]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000d0a:	f001 fa7d 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4822      	ldr	r0, [pc, #136]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000d28:	f001 f8d2 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d32:	2303      	movs	r3, #3
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000d42:	f001 f8c5 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d46:	2301      	movs	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4816      	ldr	r0, [pc, #88]	; (8000db4 <MX_GPIO_Init+0x138>)
 8000d5c:	f001 f8b8 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000d60:	f249 03fe 	movw	r3, #37118	; 0x90fe
 8000d64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	480f      	ldr	r0, [pc, #60]	; (8000db4 <MX_GPIO_Init+0x138>)
 8000d76:	f001 f8ab 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d7a:	f24f 7337 	movw	r3, #63287	; 0xf737
 8000d7e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d80:	2303      	movs	r3, #3
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <MX_GPIO_Init+0x13c>)
 8000d90:	f001 f89e 	bl	8001ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2006      	movs	r0, #6
 8000d9a:	f000 fc60 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d9e:	2006      	movs	r0, #6
 8000da0:	f000 fc79 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40020400 	.word	0x40020400

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a72      	ldr	r2, [pc, #456]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x1d8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	f040 80de 	bne.w	8000fe8 <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4b70      	ldr	r3, [pc, #448]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x1dc>)
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	4a6f      	ldr	r2, [pc, #444]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x1dc>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3c:	4b6d      	ldr	r3, [pc, #436]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x1dc>)
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000e48:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e4a:	4a6c      	ldr	r2, [pc, #432]	; (8000ffc <HAL_TIM_PWM_MspInit+0x1e4>)
 8000e4c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e50:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e54:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e56:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e58:	2240      	movs	r2, #64	; 0x40
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5c:	4b66      	ldr	r3, [pc, #408]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e62:	4b65      	ldr	r3, [pc, #404]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e6a:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e70:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e72:	4b61      	ldr	r3, [pc, #388]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e78:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000e7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e80:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e86:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e88:	4b5b      	ldr	r3, [pc, #364]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000e8e:	485a      	ldr	r0, [pc, #360]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000e90:	f000 fc1c 	bl	80016cc <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8000e9a:	f7ff ff8f 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a55      	ldr	r2, [pc, #340]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ea4:	4a54      	ldr	r2, [pc, #336]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8000eaa:	4b55      	ldr	r3, [pc, #340]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000eac:	4a55      	ldr	r2, [pc, #340]	; (8001004 <HAL_TIM_PWM_MspInit+0x1ec>)
 8000eae:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8000eb0:	4b53      	ldr	r3, [pc, #332]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000eb2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000eb6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb8:	4b51      	ldr	r3, [pc, #324]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebe:	4b50      	ldr	r3, [pc, #320]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000ec4:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eca:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ecc:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed4:	4b4a      	ldr	r3, [pc, #296]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eda:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000edc:	4b48      	ldr	r3, [pc, #288]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8000ee2:	4b47      	ldr	r3, [pc, #284]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000ee4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ee8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eea:	4b45      	ldr	r3, [pc, #276]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000ef0:	4843      	ldr	r0, [pc, #268]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000ef2:	f000 fbeb 	bl	80016cc <HAL_DMA_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_TIM_PWM_MspInit+0xe8>
    {
      Error_Handler();
 8000efc:	f7ff ff5e 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3f      	ldr	r2, [pc, #252]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	; (800100c <HAL_TIM_PWM_MspInit+0x1f4>)
 8000f10:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f14:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f18:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f20:	4b39      	ldr	r3, [pc, #228]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f34:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000f3e:	4b32      	ldr	r3, [pc, #200]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8000f44:	4b30      	ldr	r3, [pc, #192]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f4a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000f52:	482d      	ldr	r0, [pc, #180]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f54:	f000 fbba 	bl	80016cc <HAL_DMA_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_TIM_PWM_MspInit+0x14a>
    {
      Error_Handler();
 8000f5e:	f7ff ff2d 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a28      	ldr	r2, [pc, #160]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000f70:	4a28      	ldr	r2, [pc, #160]	; (8001014 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000f76:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f7a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000f7e:	2240      	movs	r2, #64	; 0x40
 8000f80:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fac:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8000fb4:	4816      	ldr	r0, [pc, #88]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fb6:	f000 fb89 	bl	80016cc <HAL_DMA_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_TIM_PWM_MspInit+0x1ac>
    {
      Error_Handler();
 8000fc0:	f7ff fefc 	bl	8000dbc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	200000b8 	.word	0x200000b8
 8000ffc:	40026428 	.word	0x40026428
 8001000:	20000118 	.word	0x20000118
 8001004:	40026440 	.word	0x40026440
 8001008:	20000178 	.word	0x20000178
 800100c:	400264a0 	.word	0x400264a0
 8001010:	200001d8 	.word	0x200001d8
 8001014:	40026470 	.word	0x40026470

08001018 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001028:	d115      	bne.n	8001056 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_TIM_Base_MspInit+0x48>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_TIM_Base_MspInit+0x48>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_TIM_Base_MspInit+0x48>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	201c      	movs	r0, #28
 800104c:	f000 fb07 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001050:	201c      	movs	r0, #28
 8001052:	f000 fb20 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <HAL_TIM_MspPostInit+0x68>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d11e      	bne.n	80010c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_TIM_MspPostInit+0x6c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_TIM_MspPostInit+0x6c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_TIM_MspPostInit+0x6c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80010a2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_TIM_MspPostInit+0x70>)
 80010c0:	f000 ff06 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40010000 	.word	0x40010000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_UART_MspInit+0x150>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	f040 8091 	bne.w	800121e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	4b4a      	ldr	r3, [pc, #296]	; (800122c <HAL_UART_MspInit+0x154>)
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	4a49      	ldr	r2, [pc, #292]	; (800122c <HAL_UART_MspInit+0x154>)
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	6453      	str	r3, [r2, #68]	; 0x44
 800110c:	4b47      	ldr	r3, [pc, #284]	; (800122c <HAL_UART_MspInit+0x154>)
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	4b43      	ldr	r3, [pc, #268]	; (800122c <HAL_UART_MspInit+0x154>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a42      	ldr	r2, [pc, #264]	; (800122c <HAL_UART_MspInit+0x154>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b40      	ldr	r3, [pc, #256]	; (800122c <HAL_UART_MspInit+0x154>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001134:	23c0      	movs	r3, #192	; 0xc0
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001144:	2307      	movs	r3, #7
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4838      	ldr	r0, [pc, #224]	; (8001230 <HAL_UART_MspInit+0x158>)
 8001150:	f000 febe 	bl	8001ed0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_UART_MspInit+0x15c>)
 8001156:	4a38      	ldr	r2, [pc, #224]	; (8001238 <HAL_UART_MspInit+0x160>)
 8001158:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800115a:	4b36      	ldr	r3, [pc, #216]	; (8001234 <HAL_UART_MspInit+0x15c>)
 800115c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001160:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001162:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_UART_MspInit+0x15c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001168:	4b32      	ldr	r3, [pc, #200]	; (8001234 <HAL_UART_MspInit+0x15c>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <HAL_UART_MspInit+0x15c>)
 8001170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001174:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_UART_MspInit+0x15c>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_UART_MspInit+0x15c>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <HAL_UART_MspInit+0x15c>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_UART_MspInit+0x15c>)
 800118a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800118e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_UART_MspInit+0x15c>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001196:	4827      	ldr	r0, [pc, #156]	; (8001234 <HAL_UART_MspInit+0x15c>)
 8001198:	f000 fa98 	bl	80016cc <HAL_DMA_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80011a2:	f7ff fe0b 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a22      	ldr	r2, [pc, #136]	; (8001234 <HAL_UART_MspInit+0x15c>)
 80011aa:	639a      	str	r2, [r3, #56]	; 0x38
 80011ac:	4a21      	ldr	r2, [pc, #132]	; (8001234 <HAL_UART_MspInit+0x15c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <HAL_UART_MspInit+0x164>)
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HAL_UART_MspInit+0x168>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_UART_MspInit+0x164>)
 80011ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_UART_MspInit+0x164>)
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_UART_MspInit+0x164>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <HAL_UART_MspInit+0x164>)
 80011ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_UART_MspInit+0x164>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_UART_MspInit+0x164>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_UART_MspInit+0x164>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_UART_MspInit+0x164>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_UART_MspInit+0x164>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <HAL_UART_MspInit+0x164>)
 80011f4:	f000 fa6a 	bl	80016cc <HAL_DMA_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80011fe:	f7ff fddd 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_UART_MspInit+0x164>)
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_UART_MspInit+0x164>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2025      	movs	r0, #37	; 0x25
 8001214:	f000 fa23 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001218:	2025      	movs	r0, #37	; 0x25
 800121a:	f000 fa3c 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40011000 	.word	0x40011000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020400 	.word	0x40020400
 8001234:	2000027c 	.word	0x2000027c
 8001238:	40026488 	.word	0x40026488
 800123c:	200002dc 	.word	0x200002dc
 8001240:	400264b8 	.word	0x400264b8

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001248:	f001 fc74 	bl	8002b34 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x8>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f8e8 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f000 ffcb 	bl	800223c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM2_IRQHandler+0x10>)
 80012b2:	f001 ff39 	bl	8003128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000070 	.word	0x20000070

080012c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <USART1_IRQHandler+0x10>)
 80012c6:	f002 ff83 	bl	80041d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000238 	.word	0x20000238

080012d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DMA2_Stream1_IRQHandler+0x10>)
 80012da:	f000 fb8f 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200000b8 	.word	0x200000b8

080012e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <DMA2_Stream2_IRQHandler+0x10>)
 80012ee:	f000 fb85 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000118 	.word	0x20000118

080012fc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <DMA2_Stream4_IRQHandler+0x10>)
 8001302:	f000 fb7b 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001d8 	.word	0x200001d8

08001310 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <DMA2_Stream5_IRQHandler+0x10>)
 8001316:	f000 fb71 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000027c 	.word	0x2000027c

08001324 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA2_Stream6_IRQHandler+0x10>)
 800132a:	f000 fb67 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000178 	.word	0x20000178

08001338 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <DMA2_Stream7_IRQHandler+0x10>)
 800133e:	f000 fb5d 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200002dc 	.word	0x200002dc

0800134c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <SystemInit+0x20>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <SystemInit+0x20>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopFillZerobss+0x12>
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <LoopFillZerobss+0x16>)
 8001376:	490e      	ldr	r1, [pc, #56]	; (80013b0 <LoopFillZerobss+0x1a>)
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <LoopFillZerobss+0x1e>)
 800137a:	2300      	movs	r3, #0
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:
 800137e:	58d4      	ldr	r4, [r2, r3]
 8001380:	50c4      	str	r4, [r0, r3]
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:
 8001384:	18c4      	adds	r4, r0, r3
 8001386:	428c      	cmp	r4, r1
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <LoopFillZerobss+0x22>)
 800138c:	4c0b      	ldr	r4, [pc, #44]	; (80013bc <LoopFillZerobss+0x26>)
 800138e:	2300      	movs	r3, #0
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:
 8001396:	42a2      	cmp	r2, r4
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>
 800139a:	f7ff ffd7 	bl	800134c <SystemInit>
 800139e:	f003 fddd 	bl	8004f5c <__libc_init_array>
 80013a2:	f7ff fa0f 	bl	80007c4 <main>
 80013a6:	4770      	bx	lr
 80013a8:	20010000 	.word	0x20010000
 80013ac:	20000000 	.word	0x20000000
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	08004ffc 	.word	0x08004ffc
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	20000434 	.word	0x20000434

080013c0 <ADC_IRQHandler>:
 80013c0:	e7fe      	b.n	80013c0 <ADC_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_Init+0x40>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_Init+0x40>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_Init+0x40>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f92b 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	200f      	movs	r0, #15
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff fce6 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f943 	bl	80016b2 <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001444:	f000 f90b 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000008 	.word	0x20000008
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	20000430 	.word	0x20000430

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000430 	.word	0x20000430

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff3e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff31 	bl	800150c <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff feda 	bl	8001490 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e099      	b.n	800181c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001708:	e00f      	b.n	800172a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800170a:	f7ff fec1 	bl	8001490 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b05      	cmp	r3, #5
 8001716:	d908      	bls.n	800172a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2203      	movs	r2, #3
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e078      	b.n	800181c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e8      	bne.n	800170a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_DMA_Init+0x158>)
 8001744:	4013      	ands	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b04      	cmp	r3, #4
 8001782:	d107      	bne.n	8001794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4313      	orrs	r3, r2
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4313      	orrs	r3, r2
 8001792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f023 0307 	bic.w	r3, r3, #7
 80017aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d117      	bne.n	80017ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00e      	beq.n	80017ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fb01 	bl	8001dd8 <DMA_CheckFifoParam>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017ea:	2301      	movs	r3, #1
 80017ec:	e016      	b.n	800181c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fab8 	bl	8001d6c <DMA_CalcBaseAndBitshift>
 80017fc:	4603      	mov	r3, r0
 80017fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	223f      	movs	r2, #63	; 0x3f
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	f010803f 	.word	0xf010803f

08001828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_DMA_Start_IT+0x26>
 800184a:	2302      	movs	r3, #2
 800184c:	e040      	b.n	80018d0 <HAL_DMA_Start_IT+0xa8>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d12f      	bne.n	80018c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2202      	movs	r2, #2
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 fa4a 	bl	8001d10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	223f      	movs	r2, #63	; 0x3f
 8001882:	409a      	lsls	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0216 	orr.w	r2, r2, #22
 8001896:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0208 	orr.w	r2, r2, #8
 80018ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e005      	b.n	80018ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018ca:	2302      	movs	r3, #2
 80018cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018e6:	f7ff fdd3 	bl	8001490 <HAL_GetTick>
 80018ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d008      	beq.n	800190a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e052      	b.n	80019b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0216 	bic.w	r2, r2, #22
 8001918:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001928:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <HAL_DMA_Abort+0x62>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0208 	bic.w	r2, r2, #8
 8001948:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800195a:	e013      	b.n	8001984 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800195c:	f7ff fd98 	bl	8001490 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b05      	cmp	r3, #5
 8001968:	d90c      	bls.n	8001984 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2220      	movs	r2, #32
 800196e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2203      	movs	r2, #3
 8001974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e015      	b.n	80019b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1e4      	bne.n	800195c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	223f      	movs	r2, #63	; 0x3f
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d004      	beq.n	80019d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00c      	b.n	80019f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2205      	movs	r2, #5
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0201 	bic.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a08:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <HAL_DMA_IRQHandler+0x248>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a8e      	ldr	r2, [pc, #568]	; (8001c48 <HAL_DMA_IRQHandler+0x24c>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0a9b      	lsrs	r3, r3, #10
 8001a14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a26:	2208      	movs	r2, #8
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01a      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0204 	bic.w	r2, r2, #4
 8001a4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	2208      	movs	r2, #8
 8001a56:	409a      	lsls	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d012      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a96:	f043 0202 	orr.w	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d012      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001acc:	f043 0204 	orr.w	r2, r3, #4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	2210      	movs	r2, #16
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d043      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d03c      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	2210      	movs	r2, #16
 8001af8:	409a      	lsls	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d018      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d108      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d024      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
 8001b2a:	e01f      	b.n	8001b6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01b      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	e016      	b.n	8001b6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0208 	bic.w	r2, r2, #8
 8001b5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	2220      	movs	r2, #32
 8001b72:	409a      	lsls	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 808f 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8087 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	2220      	movs	r2, #32
 8001b94:	409a      	lsls	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d136      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0216 	bic.w	r2, r2, #22
 8001bb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <HAL_DMA_IRQHandler+0x1da>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0208 	bic.w	r2, r2, #8
 8001be4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bea:	223f      	movs	r2, #63	; 0x3f
 8001bec:	409a      	lsls	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d07e      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
        }
        return;
 8001c12:	e079      	b.n	8001d08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01d      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d031      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
 8001c40:	e02c      	b.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000
 8001c48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d023      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
 8001c5c:	e01e      	b.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10f      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0210 	bic.w	r2, r2, #16
 8001c7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d032      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d022      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2205      	movs	r2, #5
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d307      	bcc.n	8001ce4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f2      	bne.n	8001cc8 <HAL_DMA_IRQHandler+0x2cc>
 8001ce2:	e000      	b.n	8001ce6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ce4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
 8001d06:	e000      	b.n	8001d0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d08:	bf00      	nop
    }
  }
}
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d108      	bne.n	8001d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d4e:	e007      	b.n	8001d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3b10      	subs	r3, #16
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d909      	bls.n	8001dae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	1d1a      	adds	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	659a      	str	r2, [r3, #88]	; 0x58
 8001dac:	e007      	b.n	8001dbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	aaaaaaab 	.word	0xaaaaaaab
 8001dd4:	08004fe4 	.word	0x08004fe4

08001dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11f      	bne.n	8001e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d856      	bhi.n	8001ea6 <DMA_CheckFifoParam+0xce>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <DMA_CheckFifoParam+0x28>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e23 	.word	0x08001e23
 8001e08:	08001e11 	.word	0x08001e11
 8001e0c:	08001ea7 	.word	0x08001ea7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d046      	beq.n	8001eaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e20:	e043      	b.n	8001eaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e2a:	d140      	bne.n	8001eae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e30:	e03d      	b.n	8001eae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3a:	d121      	bne.n	8001e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d837      	bhi.n	8001eb2 <DMA_CheckFifoParam+0xda>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <DMA_CheckFifoParam+0x70>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e5f 	.word	0x08001e5f
 8001e50:	08001e59 	.word	0x08001e59
 8001e54:	08001e71 	.word	0x08001e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5c:	e030      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d025      	beq.n	8001eb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6e:	e022      	b.n	8001eb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e78:	d11f      	bne.n	8001eba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e7e:	e01c      	b.n	8001eba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d903      	bls.n	8001e8e <DMA_CheckFifoParam+0xb6>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d003      	beq.n	8001e94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e8c:	e018      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
      break;
 8001e92:	e015      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea4:	e00b      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e00a      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e008      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e006      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e004      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb6:	bf00      	nop
 8001eb8:	e002      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001eba:	bf00      	nop
 8001ebc:	e000      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ebe:	bf00      	nop
    }
  } 
  
  return status; 
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e159      	b.n	80021a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8148 	bne.w	800219a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d005      	beq.n	8001f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d130      	bne.n	8001f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 0201 	and.w	r2, r3, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d017      	beq.n	8001fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d123      	bne.n	8002014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	08da      	lsrs	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	69b9      	ldr	r1, [r7, #24]
 8002010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a2 	beq.w	800219a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_GPIO_Init+0x2e8>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a56      	ldr	r2, [pc, #344]	; (80021b8 <HAL_GPIO_Init+0x2e8>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <HAL_GPIO_Init+0x2e8>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002072:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_GPIO_Init+0x2ec>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_GPIO_Init+0x2f0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x202>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <HAL_GPIO_Init+0x2f4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x1fe>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a47      	ldr	r2, [pc, #284]	; (80021c8 <HAL_GPIO_Init+0x2f8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x1fa>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a46      	ldr	r2, [pc, #280]	; (80021cc <HAL_GPIO_Init+0x2fc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x1f6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a45      	ldr	r2, [pc, #276]	; (80021d0 <HAL_GPIO_Init+0x300>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x1f2>
 80020be:	2304      	movs	r3, #4
 80020c0:	e008      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e006      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e004      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020d2:	2300      	movs	r3, #0
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	f002 0203 	and.w	r2, r2, #3
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	4093      	lsls	r3, r2
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e4:	4935      	ldr	r1, [pc, #212]	; (80021bc <HAL_GPIO_Init+0x2ec>)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <HAL_GPIO_Init+0x304>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002116:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_GPIO_Init+0x304>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <HAL_GPIO_Init+0x304>)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002194:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	f67f aea2 	bls.w	8001eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	e001      	b.n	80021fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f93c 	bl	80004d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40013c00 	.word	0x40013c00

0800226c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e267      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d075      	beq.n	8002376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800228a:	4b88      	ldr	r3, [pc, #544]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b04      	cmp	r3, #4
 8002294:	d00c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002296:	4b85      	ldr	r3, [pc, #532]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d112      	bne.n	80022c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a2:	4b82      	ldr	r3, [pc, #520]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ae:	d10b      	bne.n	80022c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	4b7e      	ldr	r3, [pc, #504]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05b      	beq.n	8002374 <HAL_RCC_OscConfig+0x108>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d157      	bne.n	8002374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e242      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x74>
 80022d2:	4b76      	ldr	r3, [pc, #472]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a75      	ldr	r2, [pc, #468]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0xb0>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x98>
 80022ea:	4b70      	ldr	r3, [pc, #448]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a6f      	ldr	r2, [pc, #444]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6c      	ldr	r2, [pc, #432]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0xb0>
 8002304:	4b69      	ldr	r3, [pc, #420]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a68      	ldr	r2, [pc, #416]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b66      	ldr	r3, [pc, #408]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a65      	ldr	r2, [pc, #404]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff f8b4 	bl	8001490 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff f8b0 	bl	8001490 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e207      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b5b      	ldr	r3, [pc, #364]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0xc0>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff f8a0 	bl	8001490 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff f89c 	bl	8001490 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1f3      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	4b51      	ldr	r3, [pc, #324]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0xe8>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d063      	beq.n	800244a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002382:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002396:	2b08      	cmp	r3, #8
 8002398:	d11c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b44      	ldr	r3, [pc, #272]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x152>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e1c7      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4937      	ldr	r1, [pc, #220]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	e03a      	b.n	800244a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023dc:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <HAL_RCC_OscConfig+0x244>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7ff f855 	bl	8001490 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff f851 	bl	8001490 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e1a8      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002408:	4b28      	ldr	r3, [pc, #160]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4925      	ldr	r1, [pc, #148]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
 800241c:	e015      	b.n	800244a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_RCC_OscConfig+0x244>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff f834 	bl	8001490 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242c:	f7ff f830 	bl	8001490 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e187      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d036      	beq.n	80024c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_RCC_OscConfig+0x248>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7ff f814 	bl	8001490 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff f810 	bl	8001490 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e167      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_OscConfig+0x240>)
 8002480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x200>
 800248a:	e01b      	b.n	80024c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_RCC_OscConfig+0x248>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe fffd 	bl	8001490 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002498:	e00e      	b.n	80024b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249a:	f7fe fff9 	bl	8001490 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d907      	bls.n	80024b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e150      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
 80024ac:	40023800 	.word	0x40023800
 80024b0:	42470000 	.word	0x42470000
 80024b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b8:	4b88      	ldr	r3, [pc, #544]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80024ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ea      	bne.n	800249a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8097 	beq.w	8002600 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d6:	4b81      	ldr	r3, [pc, #516]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	4b7d      	ldr	r3, [pc, #500]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a7c      	ldr	r2, [pc, #496]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b7a      	ldr	r3, [pc, #488]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b77      	ldr	r3, [pc, #476]	; (80026e0 <HAL_RCC_OscConfig+0x474>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d118      	bne.n	8002540 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250e:	4b74      	ldr	r3, [pc, #464]	; (80026e0 <HAL_RCC_OscConfig+0x474>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a73      	ldr	r2, [pc, #460]	; (80026e0 <HAL_RCC_OscConfig+0x474>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251a:	f7fe ffb9 	bl	8001490 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002522:	f7fe ffb5 	bl	8001490 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e10c      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	4b6a      	ldr	r3, [pc, #424]	; (80026e0 <HAL_RCC_OscConfig+0x474>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x2ea>
 8002548:	4b64      	ldr	r3, [pc, #400]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	4a63      	ldr	r2, [pc, #396]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6713      	str	r3, [r2, #112]	; 0x70
 8002554:	e01c      	b.n	8002590 <HAL_RCC_OscConfig+0x324>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b05      	cmp	r3, #5
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x30c>
 800255e:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002562:	4a5e      	ldr	r2, [pc, #376]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	6713      	str	r3, [r2, #112]	; 0x70
 800256a:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a5b      	ldr	r2, [pc, #364]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0x324>
 8002578:	4b58      	ldr	r3, [pc, #352]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4a57      	ldr	r2, [pc, #348]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6713      	str	r3, [r2, #112]	; 0x70
 8002584:	4b55      	ldr	r3, [pc, #340]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a54      	ldr	r2, [pc, #336]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d015      	beq.n	80025c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fe ff7a 	bl	8001490 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f7fe ff76 	bl	8001490 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0cb      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b6:	4b49      	ldr	r3, [pc, #292]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0ee      	beq.n	80025a0 <HAL_RCC_OscConfig+0x334>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c4:	f7fe ff64 	bl	8001490 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7fe ff60 	bl	8001490 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e0b5      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e2:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ee      	bne.n	80025cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	4a38      	ldr	r2, [pc, #224]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80025fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80a1 	beq.w	800274c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b08      	cmp	r3, #8
 8002614:	d05c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d141      	bne.n	80026a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_RCC_OscConfig+0x478>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe ff34 	bl	8001490 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe ff30 	bl	8001490 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e087      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	019b      	lsls	r3, r3, #6
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	3b01      	subs	r3, #1
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	491b      	ldr	r1, [pc, #108]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002674:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_RCC_OscConfig+0x478>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7fe ff09 	bl	8001490 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe ff05 	bl	8001490 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e05c      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x416>
 80026a0:	e054      	b.n	800274c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_RCC_OscConfig+0x478>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe fef2 	bl	8001490 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe feee 	bl	8001490 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e045      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_RCC_OscConfig+0x470>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x444>
 80026ce:	e03d      	b.n	800274c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e038      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000
 80026e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x4ec>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d028      	beq.n	8002748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d121      	bne.n	8002748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d11a      	bne.n	8002748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800271e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002720:	4293      	cmp	r3, r2
 8002722:	d111      	bne.n	8002748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	3b01      	subs	r3, #1
 8002732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d107      	bne.n	8002748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0cc      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b68      	ldr	r3, [pc, #416]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d90c      	bls.n	8002798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b65      	ldr	r3, [pc, #404]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b63      	ldr	r3, [pc, #396]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0b8      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d020      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b0:	4b59      	ldr	r3, [pc, #356]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a58      	ldr	r2, [pc, #352]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c8:	4b53      	ldr	r3, [pc, #332]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d4:	4b50      	ldr	r3, [pc, #320]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	494d      	ldr	r1, [pc, #308]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d044      	beq.n	800287c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d119      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e07f      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d003      	beq.n	800281a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002816:	2b03      	cmp	r3, #3
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06f      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e067      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283a:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f023 0203 	bic.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4934      	ldr	r1, [pc, #208]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800284c:	f7fe fe20 	bl	8001490 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	e00a      	b.n	800286a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7fe fe1c 	bl	8001490 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e04f      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 020c 	and.w	r2, r3, #12
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	429a      	cmp	r2, r3
 800287a:	d1eb      	bne.n	8002854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d20c      	bcs.n	80028a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e032      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4916      	ldr	r1, [pc, #88]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	490e      	ldr	r1, [pc, #56]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028e2:	f000 f82d 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	490a      	ldr	r1, [pc, #40]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	5ccb      	ldrb	r3, [r1, r3]
 80028f6:	fa22 f303 	lsr.w	r3, r2, r3
 80028fa:	4a09      	ldr	r2, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fd80 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023c00 	.word	0x40023c00
 8002918:	40023800 	.word	0x40023800
 800291c:	08004fcc 	.word	0x08004fcc
 8002920:	20000000 	.word	0x20000000
 8002924:	20000004 	.word	0x20000004

08002928 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCC_EnableCSS+0x14>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	4247004c 	.word	0x4247004c

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002944:	b090      	sub	sp, #64	; 0x40
 8002946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
 800294c:	2300      	movs	r3, #0
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002950:	2300      	movs	r3, #0
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d00d      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x40>
 8002964:	2b08      	cmp	r3, #8
 8002966:	f200 80a1 	bhi.w	8002aac <HAL_RCC_GetSysClockFreq+0x16c>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x34>
 800296e:	2b04      	cmp	r3, #4
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x3a>
 8002972:	e09b      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002978:	e09b      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800297a:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800297e:	e098      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298a:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d028      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002996:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	2200      	movs	r2, #0
 800299e:	623b      	str	r3, [r7, #32]
 80029a0:	627a      	str	r2, [r7, #36]	; 0x24
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029a8:	2100      	movs	r1, #0
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029ac:	fb03 f201 	mul.w	r2, r3, r1
 80029b0:	2300      	movs	r3, #0
 80029b2:	fb00 f303 	mul.w	r3, r0, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	4a43      	ldr	r2, [pc, #268]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029ba:	fba0 1202 	umull	r1, r2, r0, r2
 80029be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c0:	460a      	mov	r2, r1
 80029c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	4413      	add	r3, r2
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	2200      	movs	r2, #0
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	61fa      	str	r2, [r7, #28]
 80029d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029da:	f7fd fbfb 	bl	80001d4 <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4613      	mov	r3, r2
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e6:	e053      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e8:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	2200      	movs	r2, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	617a      	str	r2, [r7, #20]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029fa:	f04f 0b00 	mov.w	fp, #0
 80029fe:	4652      	mov	r2, sl
 8002a00:	465b      	mov	r3, fp
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	0159      	lsls	r1, r3, #5
 8002a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a10:	0150      	lsls	r0, r2, #5
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	ebb2 080a 	subs.w	r8, r2, sl
 8002a1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a32:	ebb2 0408 	subs.w	r4, r2, r8
 8002a36:	eb63 0509 	sbc.w	r5, r3, r9
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	00eb      	lsls	r3, r5, #3
 8002a44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a48:	00e2      	lsls	r2, r4, #3
 8002a4a:	4614      	mov	r4, r2
 8002a4c:	461d      	mov	r5, r3
 8002a4e:	eb14 030a 	adds.w	r3, r4, sl
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	eb45 030b 	adc.w	r3, r5, fp
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a66:	4629      	mov	r1, r5
 8002a68:	028b      	lsls	r3, r1, #10
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a70:	4621      	mov	r1, r4
 8002a72:	028a      	lsls	r2, r1, #10
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	60fa      	str	r2, [r7, #12]
 8002a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a84:	f7fd fba6 	bl	80001d4 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3740      	adds	r7, #64	; 0x40
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	017d7840 	.word	0x017d7840

08002acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae8:	f7ff fff0 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0a9b      	lsrs	r3, r3, #10
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800
 8002b08:	08004fdc 	.word	0x08004fdc

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b10:	f7ff ffdc 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0b5b      	lsrs	r3, r3, #13
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4903      	ldr	r1, [pc, #12]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08004fdc 	.word	0x08004fdc

08002b34 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d104      	bne.n	8002b4e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002b44:	f000 f80a 	bl	8002b5c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	701a      	strb	r2, [r3, #0]
  }
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	4002380e 	.word	0x4002380e

08002b5c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e041      	b.n	8002c00 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7fe fa41 	bl	8001018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f000 fe93 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d001      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e044      	b.n	8002caa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d018      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0x6c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4a:	d013      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0x6c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_TIM_Base_Start_IT+0xb4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00e      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0x6c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d009      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0x6c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0x6c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d010      	beq.n	8002ca8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c96:	e007      	b.n	8002ca8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800
 8002cc4:	40000c00 	.word	0x40000c00
 8002cc8:	40014000 	.word	0x40014000

08002ccc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <HAL_TIM_Base_Stop_IT+0x48>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6a1a      	ldr	r2, [r3, #32]
 8002cfa:	f240 4344 	movw	r3, #1092	; 0x444
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_Base_Stop_IT+0x48>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e041      	b.n	8002dc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fe f861 	bl	8000e18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f000 fdb3 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e022      	b.n	8002e3a <HAL_TIM_PWM_Start_DMA+0x72>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d109      	bne.n	8002e0e <HAL_TIM_PWM_Start_DMA+0x46>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	e015      	b.n	8002e3a <HAL_TIM_PWM_Start_DMA+0x72>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d109      	bne.n	8002e28 <HAL_TIM_PWM_Start_DMA+0x60>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e008      	b.n	8002e3a <HAL_TIM_PWM_Start_DMA+0x72>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e15d      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_TIM_PWM_Start_DMA+0x94>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e022      	b.n	8002ea2 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d109      	bne.n	8002e76 <HAL_TIM_PWM_Start_DMA+0xae>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	e015      	b.n	8002ea2 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d109      	bne.n	8002e90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e008      	b.n	8002ea2 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d024      	beq.n	8002ef0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_PWM_Start_DMA+0xee>
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e123      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec4:	e016      	b.n	8002ef4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed4:	e00e      	b.n	8002ef4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee4:	e006      	b.n	8002ef4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eee:	e001      	b.n	8002ef4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e104      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	f200 80ae 	bhi.w	8003058 <HAL_TIM_PWM_Start_DMA+0x290>
 8002efc:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08003059 	.word	0x08003059
 8002f0c:	08003059 	.word	0x08003059
 8002f10:	08003059 	.word	0x08003059
 8002f14:	08002f81 	.word	0x08002f81
 8002f18:	08003059 	.word	0x08003059
 8002f1c:	08003059 	.word	0x08003059
 8002f20:	08003059 	.word	0x08003059
 8002f24:	08002fc9 	.word	0x08002fc9
 8002f28:	08003059 	.word	0x08003059
 8002f2c:	08003059 	.word	0x08003059
 8002f30:	08003059 	.word	0x08003059
 8002f34:	08003011 	.word	0x08003011
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	4a72      	ldr	r2, [pc, #456]	; (8003108 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002f3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	4a71      	ldr	r2, [pc, #452]	; (800310c <HAL_TIM_PWM_Start_DMA+0x344>)
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	4a70      	ldr	r2, [pc, #448]	; (8003110 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002f4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3334      	adds	r3, #52	; 0x34
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	887b      	ldrh	r3, [r7, #2]
 8002f60:	f7fe fc62 	bl	8001828 <HAL_DMA_Start_IT>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0c7      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	60da      	str	r2, [r3, #12]
      break;
 8002f7e:	e06e      	b.n	800305e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	4a60      	ldr	r2, [pc, #384]	; (8003108 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002f86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	4a5f      	ldr	r2, [pc, #380]	; (800310c <HAL_TIM_PWM_Start_DMA+0x344>)
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	4a5e      	ldr	r2, [pc, #376]	; (8003110 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002f96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3338      	adds	r3, #56	; 0x38
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	f7fe fc3e 	bl	8001828 <HAL_DMA_Start_IT>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0a3      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc4:	60da      	str	r2, [r3, #12]
      break;
 8002fc6:	e04a      	b.n	800305e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	4a4e      	ldr	r2, [pc, #312]	; (8003108 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4a4d      	ldr	r2, [pc, #308]	; (800310c <HAL_TIM_PWM_Start_DMA+0x344>)
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	4a4c      	ldr	r2, [pc, #304]	; (8003110 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002fde:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	333c      	adds	r3, #60	; 0x3c
 8002fec:	461a      	mov	r2, r3
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	f7fe fc1a 	bl	8001828 <HAL_DMA_Start_IT>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800300c:	60da      	str	r2, [r3, #12]
      break;
 800300e:	e026      	b.n	800305e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4a3c      	ldr	r2, [pc, #240]	; (8003108 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	4a3b      	ldr	r2, [pc, #236]	; (800310c <HAL_TIM_PWM_Start_DMA+0x344>)
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	4a3a      	ldr	r2, [pc, #232]	; (8003110 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003026:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3340      	adds	r3, #64	; 0x40
 8003034:	461a      	mov	r2, r3
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	f7fe fbf6 	bl	8001828 <HAL_DMA_Start_IT>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e05b      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003054:	60da      	str	r2, [r3, #12]
      break;
 8003056:	e002      	b.n	800305e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	75fb      	strb	r3, [r7, #23]
      break;
 800305c:	bf00      	nop
  }

  if (status == HAL_OK)
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d14b      	bne.n	80030fc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 ff68 	bl	8003f42 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a27      	ldr	r2, [pc, #156]	; (8003114 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d107      	bne.n	800308c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a20      	ldr	r2, [pc, #128]	; (8003114 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d018      	beq.n	80030c8 <HAL_TIM_PWM_Start_DMA+0x300>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d013      	beq.n	80030c8 <HAL_TIM_PWM_Start_DMA+0x300>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_TIM_PWM_Start_DMA+0x350>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00e      	beq.n	80030c8 <HAL_TIM_PWM_Start_DMA+0x300>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1b      	ldr	r2, [pc, #108]	; (800311c <HAL_TIM_PWM_Start_DMA+0x354>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d009      	beq.n	80030c8 <HAL_TIM_PWM_Start_DMA+0x300>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_TIM_PWM_Start_DMA+0x358>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_TIM_PWM_Start_DMA+0x300>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d111      	bne.n	80030ec <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d010      	beq.n	80030fc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ea:	e007      	b.n	80030fc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	080037c5 	.word	0x080037c5
 800310c:	0800386d 	.word	0x0800386d
 8003110:	08003733 	.word	0x08003733
 8003114:	40010000 	.word	0x40010000
 8003118:	40000400 	.word	0x40000400
 800311c:	40000800 	.word	0x40000800
 8003120:	40000c00 	.word	0x40000c00
 8003124:	40014000 	.word	0x40014000

08003128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0202 	mvn.w	r2, #2
 8003154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fab9 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 faab 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd faff 	bl	800077c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b04      	cmp	r3, #4
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0204 	mvn.w	r2, #4
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fa8f 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa81 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fd fad5 	bl	800077c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0208 	mvn.w	r2, #8
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2204      	movs	r2, #4
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fa65 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fa57 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7fd faab 	bl	800077c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b10      	cmp	r3, #16
 8003238:	d122      	bne.n	8003280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b10      	cmp	r3, #16
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0210 	mvn.w	r2, #16
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2208      	movs	r2, #8
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fa3b 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa2d 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7fd fa81 	bl	800077c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0201 	mvn.w	r2, #1
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fa76 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 ff24 	bl	8004120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d10e      	bne.n	8003304 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d107      	bne.n	8003304 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa03 	bl	800370a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b20      	cmp	r3, #32
 8003310:	d10e      	bne.n	8003330 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b20      	cmp	r3, #32
 800331e:	d107      	bne.n	8003330 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0220 	mvn.w	r2, #32
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 feee 	bl	800410c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003352:	2302      	movs	r3, #2
 8003354:	e0ae      	b.n	80034b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	f200 809f 	bhi.w	80034a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	080033a1 	.word	0x080033a1
 8003370:	080034a5 	.word	0x080034a5
 8003374:	080034a5 	.word	0x080034a5
 8003378:	080034a5 	.word	0x080034a5
 800337c:	080033e1 	.word	0x080033e1
 8003380:	080034a5 	.word	0x080034a5
 8003384:	080034a5 	.word	0x080034a5
 8003388:	080034a5 	.word	0x080034a5
 800338c:	08003423 	.word	0x08003423
 8003390:	080034a5 	.word	0x080034a5
 8003394:	080034a5 	.word	0x080034a5
 8003398:	080034a5 	.word	0x080034a5
 800339c:	08003463 	.word	0x08003463
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fb14 	bl	80039d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0208 	orr.w	r2, r2, #8
 80033ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6999      	ldr	r1, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	619a      	str	r2, [r3, #24]
      break;
 80033de:	e064      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fb5a 	bl	8003aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
      break;
 8003420:	e043      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fba5 	bl	8003b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0208 	orr.w	r2, r2, #8
 800343c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0204 	bic.w	r2, r2, #4
 800344c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
      break;
 8003460:	e023      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fbef 	bl	8003c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800347c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69d9      	ldr	r1, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	021a      	lsls	r2, r3, #8
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	61da      	str	r2, [r3, #28]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	75fb      	strb	r3, [r7, #23]
      break;
 80034a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_TIM_ConfigClockSource+0x1c>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0b4      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x186>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003510:	d03e      	beq.n	8003590 <HAL_TIM_ConfigClockSource+0xd4>
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003516:	f200 8087 	bhi.w	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351e:	f000 8086 	beq.w	800362e <HAL_TIM_ConfigClockSource+0x172>
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003526:	d87f      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b70      	cmp	r3, #112	; 0x70
 800352a:	d01a      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0xa6>
 800352c:	2b70      	cmp	r3, #112	; 0x70
 800352e:	d87b      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b60      	cmp	r3, #96	; 0x60
 8003532:	d050      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003534:	2b60      	cmp	r3, #96	; 0x60
 8003536:	d877      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b50      	cmp	r3, #80	; 0x50
 800353a:	d03c      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0xfa>
 800353c:	2b50      	cmp	r3, #80	; 0x50
 800353e:	d873      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d058      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d86f      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b30      	cmp	r3, #48	; 0x30
 800354a:	d064      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 800354c:	2b30      	cmp	r3, #48	; 0x30
 800354e:	d86b      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b20      	cmp	r3, #32
 8003552:	d060      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 8003554:	2b20      	cmp	r3, #32
 8003556:	d867      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05c      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 800355c:	2b10      	cmp	r3, #16
 800355e:	d05a      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 8003560:	e062      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f000 fcc6 	bl	8003f02 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	609a      	str	r2, [r3, #8]
      break;
 800358e:	e04f      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f000 fcaf 	bl	8003f02 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b2:	609a      	str	r2, [r3, #8]
      break;
 80035b4:	e03c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f000 fc23 	bl	8003e0e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2150      	movs	r1, #80	; 0x50
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fc7c 	bl	8003ecc <TIM_ITRx_SetConfig>
      break;
 80035d4:	e02c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f000 fc42 	bl	8003e6c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2160      	movs	r1, #96	; 0x60
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fc6c 	bl	8003ecc <TIM_ITRx_SetConfig>
      break;
 80035f4:	e01c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	461a      	mov	r2, r3
 8003604:	f000 fc03 	bl	8003e0e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2140      	movs	r1, #64	; 0x40
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fc5c 	bl	8003ecc <TIM_ITRx_SetConfig>
      break;
 8003614:	e00c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f000 fc53 	bl	8003ecc <TIM_ITRx_SetConfig>
      break;
 8003626:	e003      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      break;
 800362c:	e000      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800362e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_TIM_SlaveConfigSynchro+0x18>
 800365e:	2302      	movs	r3, #2
 8003660:	e031      	b.n	80036c6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fb39 	bl	8003cec <TIM_SlaveTimer_SetConfig>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e018      	b.n	80036c6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036b2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d107      	bne.n	800375a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003758:	e02a      	b.n	80037b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d107      	bne.n	8003774 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2202      	movs	r2, #2
 8003768:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003772:	e01d      	b.n	80037b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d107      	bne.n	800378e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2204      	movs	r2, #4
 8003782:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800378c:	e010      	b.n	80037b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d107      	bne.n	80037a8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2208      	movs	r2, #8
 800379c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037a6:	e003      	b.n	80037b0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff ffb4 	bl	800371e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d10b      	bne.n	80037f4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d136      	bne.n	8003858 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f2:	e031      	b.n	8003858 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d10b      	bne.n	8003816 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2202      	movs	r2, #2
 8003802:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d125      	bne.n	8003858 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003814:	e020      	b.n	8003858 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d10b      	bne.n	8003838 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2204      	movs	r2, #4
 8003824:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d114      	bne.n	8003858 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003836:	e00f      	b.n	8003858 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d10a      	bne.n	8003858 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2208      	movs	r2, #8
 8003846:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d103      	bne.n	8003858 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7fc ff8f 	bl	800077c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	d103      	bne.n	800388c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	771a      	strb	r2, [r3, #28]
 800388a:	e019      	b.n	80038c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d103      	bne.n	800389e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2202      	movs	r2, #2
 800389a:	771a      	strb	r2, [r3, #28]
 800389c:	e010      	b.n	80038c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d103      	bne.n	80038b0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2204      	movs	r2, #4
 80038ac:	771a      	strb	r2, [r3, #28]
 80038ae:	e007      	b.n	80038c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d102      	bne.n	80038c0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2208      	movs	r2, #8
 80038be:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff ff18 	bl	80036f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a34      	ldr	r2, [pc, #208]	; (80039b8 <TIM_Base_SetConfig+0xe4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00f      	beq.n	800390c <TIM_Base_SetConfig+0x38>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f2:	d00b      	beq.n	800390c <TIM_Base_SetConfig+0x38>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a31      	ldr	r2, [pc, #196]	; (80039bc <TIM_Base_SetConfig+0xe8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d007      	beq.n	800390c <TIM_Base_SetConfig+0x38>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a30      	ldr	r2, [pc, #192]	; (80039c0 <TIM_Base_SetConfig+0xec>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_Base_SetConfig+0x38>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <TIM_Base_SetConfig+0xf0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d108      	bne.n	800391e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <TIM_Base_SetConfig+0xe4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01b      	beq.n	800395e <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d017      	beq.n	800395e <TIM_Base_SetConfig+0x8a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a22      	ldr	r2, [pc, #136]	; (80039bc <TIM_Base_SetConfig+0xe8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <TIM_Base_SetConfig+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <TIM_Base_SetConfig+0xec>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00f      	beq.n	800395e <TIM_Base_SetConfig+0x8a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <TIM_Base_SetConfig+0xf0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00b      	beq.n	800395e <TIM_Base_SetConfig+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <TIM_Base_SetConfig+0xf4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <TIM_Base_SetConfig+0x8a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <TIM_Base_SetConfig+0xf8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <TIM_Base_SetConfig+0x8a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <TIM_Base_SetConfig+0xfc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d108      	bne.n	8003970 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <TIM_Base_SetConfig+0xe4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d103      	bne.n	80039a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	615a      	str	r2, [r3, #20]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800

080039d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f023 0201 	bic.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0303 	bic.w	r3, r3, #3
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 0302 	bic.w	r3, r3, #2
 8003a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <TIM_OC1_SetConfig+0xc8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d10c      	bne.n	8003a4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 0308 	bic.w	r3, r3, #8
 8003a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <TIM_OC1_SetConfig+0xc8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d111      	bne.n	8003a76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40010000 	.word	0x40010000

08003aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f023 0210 	bic.w	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0320 	bic.w	r3, r3, #32
 8003aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <TIM_OC2_SetConfig+0xd4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d10d      	bne.n	8003b1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <TIM_OC2_SetConfig+0xd4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d113      	bne.n	8003b4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40010000 	.word	0x40010000

08003b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <TIM_OC3_SetConfig+0xd0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d10d      	bne.n	8003bf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <TIM_OC3_SetConfig+0xd0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d113      	bne.n	8003c22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40010000 	.word	0x40010000

08003c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	031b      	lsls	r3, r3, #12
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <TIM_OC4_SetConfig+0x9c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d109      	bne.n	8003cc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	019b      	lsls	r3, r3, #6
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40010000 	.word	0x40010000

08003cec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d08:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f023 0307 	bic.w	r3, r3, #7
 8003d1a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b70      	cmp	r3, #112	; 0x70
 8003d34:	d01a      	beq.n	8003d6c <TIM_SlaveTimer_SetConfig+0x80>
 8003d36:	2b70      	cmp	r3, #112	; 0x70
 8003d38:	d860      	bhi.n	8003dfc <TIM_SlaveTimer_SetConfig+0x110>
 8003d3a:	2b60      	cmp	r3, #96	; 0x60
 8003d3c:	d054      	beq.n	8003de8 <TIM_SlaveTimer_SetConfig+0xfc>
 8003d3e:	2b60      	cmp	r3, #96	; 0x60
 8003d40:	d85c      	bhi.n	8003dfc <TIM_SlaveTimer_SetConfig+0x110>
 8003d42:	2b50      	cmp	r3, #80	; 0x50
 8003d44:	d046      	beq.n	8003dd4 <TIM_SlaveTimer_SetConfig+0xe8>
 8003d46:	2b50      	cmp	r3, #80	; 0x50
 8003d48:	d858      	bhi.n	8003dfc <TIM_SlaveTimer_SetConfig+0x110>
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d019      	beq.n	8003d82 <TIM_SlaveTimer_SetConfig+0x96>
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d854      	bhi.n	8003dfc <TIM_SlaveTimer_SetConfig+0x110>
 8003d52:	2b30      	cmp	r3, #48	; 0x30
 8003d54:	d055      	beq.n	8003e02 <TIM_SlaveTimer_SetConfig+0x116>
 8003d56:	2b30      	cmp	r3, #48	; 0x30
 8003d58:	d850      	bhi.n	8003dfc <TIM_SlaveTimer_SetConfig+0x110>
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d051      	beq.n	8003e02 <TIM_SlaveTimer_SetConfig+0x116>
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d84c      	bhi.n	8003dfc <TIM_SlaveTimer_SetConfig+0x110>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d04d      	beq.n	8003e02 <TIM_SlaveTimer_SetConfig+0x116>
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d04b      	beq.n	8003e02 <TIM_SlaveTimer_SetConfig+0x116>
 8003d6a:	e047      	b.n	8003dfc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68d9      	ldr	r1, [r3, #12]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f000 f8c1 	bl	8003f02 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003d80:	e040      	b.n	8003e04 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d101      	bne.n	8003d8e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e03b      	b.n	8003e06 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	621a      	str	r2, [r3, #32]
      break;
 8003dd2:	e017      	b.n	8003e04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6899      	ldr	r1, [r3, #8]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	461a      	mov	r2, r3
 8003de2:	f000 f814 	bl	8003e0e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003de6:	e00d      	b.n	8003e04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6899      	ldr	r1, [r3, #8]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f000 f839 	bl	8003e6c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003dfa:	e003      	b.n	8003e04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003e00:	e000      	b.n	8003e04 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003e02:	bf00      	nop
  }

  return status;
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 0201 	bic.w	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 030a 	bic.w	r3, r3, #10
 8003e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	621a      	str	r2, [r3, #32]
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f023 0210 	bic.w	r2, r3, #16
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	031b      	lsls	r3, r3, #12
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f043 0307 	orr.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	609a      	str	r2, [r3, #8]
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	021a      	lsls	r2, r3, #8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	609a      	str	r2, [r3, #8]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b087      	sub	sp, #28
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	2201      	movs	r2, #1
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	401a      	ands	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1a      	ldr	r2, [r3, #32]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	621a      	str	r2, [r3, #32]
}
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e050      	b.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d013      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a13      	ldr	r2, [pc, #76]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10c      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40014000 	.word	0x40014000

08004068 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004080:	2302      	movs	r3, #2
 8004082:	e03d      	b.n	8004100 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e03f      	b.n	80041c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fc ffbc 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2224      	movs	r2, #36	; 0x24
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fc7b 	bl	8004a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800418c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800419c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b0ba      	sub	sp, #232	; 0xe8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800420e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10f      	bne.n	8004236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_UART_IRQHandler+0x66>
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fb65 	bl	80048fe <UART_Receive_IT>
      return;
 8004234:	e256      	b.n	80046e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80de 	beq.w	80043fc <HAL_UART_IRQHandler+0x22c>
 8004240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800424c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80d1 	beq.w	80043fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_UART_IRQHandler+0xae>
 8004266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800427e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_UART_IRQHandler+0xd2>
 800428a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f043 0202 	orr.w	r2, r3, #2
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_UART_IRQHandler+0xf6>
 80042ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0204 	orr.w	r2, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d011      	beq.n	80042f6 <HAL_UART_IRQHandler+0x126>
 80042d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d105      	bne.n	80042ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0208 	orr.w	r2, r3, #8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 81ed 	beq.w	80046da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_UART_IRQHandler+0x14e>
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 faf0 	bl	80048fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <HAL_UART_IRQHandler+0x17a>
 8004342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d04f      	beq.n	80043ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f9f8 	bl	8004740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d141      	bne.n	80043e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3314      	adds	r3, #20
 8004364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3314      	adds	r3, #20
 8004386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800438a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800438e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1d9      	bne.n	800435e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d013      	beq.n	80043da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	4a7d      	ldr	r2, [pc, #500]	; (80045ac <HAL_UART_IRQHandler+0x3dc>)
 80043b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd fafa 	bl	80019b8 <HAL_DMA_Abort_IT>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043d4:	4610      	mov	r0, r2
 80043d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	e00e      	b.n	80043f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f99a 	bl	8004714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e0:	e00a      	b.n	80043f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f996 	bl	8004714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	e006      	b.n	80043f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f992 	bl	8004714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043f6:	e170      	b.n	80046da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f8:	bf00      	nop
    return;
 80043fa:	e16e      	b.n	80046da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 814a 	bne.w	800469a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8143 	beq.w	800469a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 813c 	beq.w	800469a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004442:	2b40      	cmp	r3, #64	; 0x40
 8004444:	f040 80b4 	bne.w	80045b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8140 	beq.w	80046de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004466:	429a      	cmp	r2, r3
 8004468:	f080 8139 	bcs.w	80046de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004472:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447e:	f000 8088 	beq.w	8004592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800449c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1d9      	bne.n	8004482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3314      	adds	r3, #20
 80044ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e1      	bne.n	80044ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800451a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800451c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3314      	adds	r3, #20
 800452a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800452e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004530:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800453c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e3      	bne.n	800450a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	330c      	adds	r3, #12
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004574:	65ba      	str	r2, [r7, #88]	; 0x58
 8004576:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800457a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e3      	bne.n	8004550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	4618      	mov	r0, r3
 800458e:	f7fd f9a3 	bl	80018d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800459a:	b29b      	uxth	r3, r3
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8c0 	bl	8004728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045a8:	e099      	b.n	80046de <HAL_UART_IRQHandler+0x50e>
 80045aa:	bf00      	nop
 80045ac:	08004807 	.word	0x08004807
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 808b 	beq.w	80046e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80045cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8086 	beq.w	80046e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	330c      	adds	r3, #12
 80045dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045fa:	647a      	str	r2, [r7, #68]	; 0x44
 80045fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e3      	bne.n	80045d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	623b      	str	r3, [r7, #32]
   return(result);
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004632:	633a      	str	r2, [r7, #48]	; 0x30
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e3      	bne.n	800460e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	60fb      	str	r3, [r7, #12]
   return(result);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0310 	bic.w	r3, r3, #16
 800466a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004678:	61fa      	str	r2, [r7, #28]
 800467a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	69b9      	ldr	r1, [r7, #24]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	617b      	str	r3, [r7, #20]
   return(result);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e3      	bne.n	8004654 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800468c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f848 	bl	8004728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004698:	e023      	b.n	80046e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_UART_IRQHandler+0x4ea>
 80046a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8bb 	bl	800482e <UART_Transmit_IT>
    return;
 80046b8:	e014      	b.n	80046e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00e      	beq.n	80046e4 <HAL_UART_IRQHandler+0x514>
 80046c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f8fb 	bl	80048ce <UART_EndTransmit_IT>
    return;
 80046d8:	e004      	b.n	80046e4 <HAL_UART_IRQHandler+0x514>
    return;
 80046da:	bf00      	nop
 80046dc:	e002      	b.n	80046e4 <HAL_UART_IRQHandler+0x514>
      return;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <HAL_UART_IRQHandler+0x514>
      return;
 80046e2:	bf00      	nop
  }
}
 80046e4:	37e8      	adds	r7, #232	; 0xe8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop

080046ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004740:	b480      	push	{r7}
 8004742:	b095      	sub	sp, #84	; 0x54
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800475e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004768:	643a      	str	r2, [r7, #64]	; 0x40
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800476e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e5      	bne.n	8004748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3314      	adds	r3, #20
 8004782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	61fb      	str	r3, [r7, #28]
   return(result);
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	64bb      	str	r3, [r7, #72]	; 0x48
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3314      	adds	r3, #20
 800479a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800479c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e5      	bne.n	800477c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d119      	bne.n	80047ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f023 0310 	bic.w	r3, r3, #16
 80047ce:	647b      	str	r3, [r7, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047d8:	61ba      	str	r2, [r7, #24]
 80047da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6979      	ldr	r1, [r7, #20]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	613b      	str	r3, [r7, #16]
   return(result);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e5      	bne.n	80047b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047fa:	bf00      	nop
 80047fc:	3754      	adds	r7, #84	; 0x54
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff ff77 	bl	8004714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b21      	cmp	r3, #33	; 0x21
 8004840:	d13e      	bne.n	80048c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d114      	bne.n	8004876 <UART_Transmit_IT+0x48>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d110      	bne.n	8004876 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004868:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	1c9a      	adds	r2, r3, #2
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	621a      	str	r2, [r3, #32]
 8004874:	e008      	b.n	8004888 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	1c59      	adds	r1, r3, #1
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6211      	str	r1, [r2, #32]
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29b      	uxth	r3, r3
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4619      	mov	r1, r3
 8004896:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10f      	bne.n	80048bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
  }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fefc 	bl	80046ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b08c      	sub	sp, #48	; 0x30
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b22      	cmp	r3, #34	; 0x22
 8004910:	f040 80ab 	bne.w	8004a6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491c:	d117      	bne.n	800494e <UART_Receive_IT+0x50>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d113      	bne.n	800494e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493c:	b29a      	uxth	r2, r3
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	1c9a      	adds	r2, r3, #2
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	629a      	str	r2, [r3, #40]	; 0x28
 800494c:	e026      	b.n	800499c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004960:	d007      	beq.n	8004972 <UART_Receive_IT+0x74>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <UART_Receive_IT+0x82>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e008      	b.n	8004992 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800498c:	b2da      	uxtb	r2, r3
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4619      	mov	r1, r3
 80049aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d15a      	bne.n	8004a66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0220 	bic.w	r2, r2, #32
 80049be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d135      	bne.n	8004a5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	613b      	str	r3, [r7, #16]
   return(result);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f023 0310 	bic.w	r3, r3, #16
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	623a      	str	r2, [r7, #32]
 8004a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	69f9      	ldr	r1, [r7, #28]
 8004a1c:	6a3a      	ldr	r2, [r7, #32]
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e5      	bne.n	80049f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d10a      	bne.n	8004a4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff fe67 	bl	8004728 <HAL_UARTEx_RxEventCallback>
 8004a5a:	e002      	b.n	8004a62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fe4f 	bl	8004700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e002      	b.n	8004a6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3730      	adds	r7, #48	; 0x30
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a78:	b0c0      	sub	sp, #256	; 0x100
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	68d9      	ldr	r1, [r3, #12]
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	ea40 0301 	orr.w	r3, r0, r1
 8004a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004acc:	f021 010c 	bic.w	r1, r1, #12
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ada:	430b      	orrs	r3, r1
 8004adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	6999      	ldr	r1, [r3, #24]
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	ea40 0301 	orr.w	r3, r0, r1
 8004afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b8f      	ldr	r3, [pc, #572]	; (8004d40 <UART_SetConfig+0x2cc>)
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d005      	beq.n	8004b14 <UART_SetConfig+0xa0>
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b8d      	ldr	r3, [pc, #564]	; (8004d44 <UART_SetConfig+0x2d0>)
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d104      	bne.n	8004b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7fd fffa 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8004b18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b1c:	e003      	b.n	8004b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b1e:	f7fd ffe1 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8004b22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b30:	f040 810c 	bne.w	8004d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b46:	4622      	mov	r2, r4
 8004b48:	462b      	mov	r3, r5
 8004b4a:	1891      	adds	r1, r2, r2
 8004b4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b4e:	415b      	adcs	r3, r3
 8004b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b56:	4621      	mov	r1, r4
 8004b58:	eb12 0801 	adds.w	r8, r2, r1
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	eb43 0901 	adc.w	r9, r3, r1
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b76:	4690      	mov	r8, r2
 8004b78:	4699      	mov	r9, r3
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	eb18 0303 	adds.w	r3, r8, r3
 8004b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b84:	462b      	mov	r3, r5
 8004b86:	eb49 0303 	adc.w	r3, r9, r3
 8004b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	18db      	adds	r3, r3, r3
 8004ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba8:	4613      	mov	r3, r2
 8004baa:	eb42 0303 	adc.w	r3, r2, r3
 8004bae:	657b      	str	r3, [r7, #84]	; 0x54
 8004bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bb8:	f7fb fb0c 	bl	80001d4 <__aeabi_uldivmod>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4b61      	ldr	r3, [pc, #388]	; (8004d48 <UART_SetConfig+0x2d4>)
 8004bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	011c      	lsls	r4, r3, #4
 8004bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	1891      	adds	r1, r2, r2
 8004be2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004be4:	415b      	adcs	r3, r3
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bec:	4641      	mov	r1, r8
 8004bee:	eb12 0a01 	adds.w	sl, r2, r1
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c0c:	4692      	mov	sl, r2
 8004c0e:	469b      	mov	fp, r3
 8004c10:	4643      	mov	r3, r8
 8004c12:	eb1a 0303 	adds.w	r3, sl, r3
 8004c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	18db      	adds	r3, r3, r3
 8004c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c3e:	4613      	mov	r3, r2
 8004c40:	eb42 0303 	adc.w	r3, r2, r3
 8004c44:	647b      	str	r3, [r7, #68]	; 0x44
 8004c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c4e:	f7fb fac1 	bl	80001d4 <__aeabi_uldivmod>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <UART_SetConfig+0x2d4>)
 8004c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	2264      	movs	r2, #100	; 0x64
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	1acb      	subs	r3, r1, r3
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c6e:	4b36      	ldr	r3, [pc, #216]	; (8004d48 <UART_SetConfig+0x2d4>)
 8004c70:	fba3 2302 	umull	r2, r3, r3, r2
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c7c:	441c      	add	r4, r3
 8004c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	1891      	adds	r1, r2, r2
 8004c96:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c98:	415b      	adcs	r3, r3
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	1851      	adds	r1, r2, r1
 8004ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	414b      	adcs	r3, r1
 8004caa:	637b      	str	r3, [r7, #52]	; 0x34
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cb8:	4659      	mov	r1, fp
 8004cba:	00cb      	lsls	r3, r1, #3
 8004cbc:	4651      	mov	r1, sl
 8004cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc2:	4651      	mov	r1, sl
 8004cc4:	00ca      	lsls	r2, r1, #3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4642      	mov	r2, r8
 8004cce:	189b      	adds	r3, r3, r2
 8004cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cd4:	464b      	mov	r3, r9
 8004cd6:	460a      	mov	r2, r1
 8004cd8:	eb42 0303 	adc.w	r3, r2, r3
 8004cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	18db      	adds	r3, r3, r3
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	eb42 0303 	adc.w	r3, r2, r3
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d0a:	f7fb fa63 	bl	80001d4 <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <UART_SetConfig+0x2d4>)
 8004d14:	fba3 1302 	umull	r1, r3, r3, r2
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	2164      	movs	r1, #100	; 0x64
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	3332      	adds	r3, #50	; 0x32
 8004d26:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <UART_SetConfig+0x2d4>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	f003 0207 	and.w	r2, r3, #7
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4422      	add	r2, r4
 8004d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d3c:	e105      	b.n	8004f4a <UART_SetConfig+0x4d6>
 8004d3e:	bf00      	nop
 8004d40:	40011000 	.word	0x40011000
 8004d44:	40011400 	.word	0x40011400
 8004d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d5e:	4642      	mov	r2, r8
 8004d60:	464b      	mov	r3, r9
 8004d62:	1891      	adds	r1, r2, r2
 8004d64:	6239      	str	r1, [r7, #32]
 8004d66:	415b      	adcs	r3, r3
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d6e:	4641      	mov	r1, r8
 8004d70:	1854      	adds	r4, r2, r1
 8004d72:	4649      	mov	r1, r9
 8004d74:	eb43 0501 	adc.w	r5, r3, r1
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	00eb      	lsls	r3, r5, #3
 8004d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d86:	00e2      	lsls	r2, r4, #3
 8004d88:	4614      	mov	r4, r2
 8004d8a:	461d      	mov	r5, r3
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	18e3      	adds	r3, r4, r3
 8004d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d94:	464b      	mov	r3, r9
 8004d96:	eb45 0303 	adc.w	r3, r5, r3
 8004d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004daa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004dba:	4629      	mov	r1, r5
 8004dbc:	008b      	lsls	r3, r1, #2
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	008a      	lsls	r2, r1, #2
 8004dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004dcc:	f7fb fa02 	bl	80001d4 <__aeabi_uldivmod>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4b60      	ldr	r3, [pc, #384]	; (8004f58 <UART_SetConfig+0x4e4>)
 8004dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	011c      	lsls	r4, r3, #4
 8004dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004de8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004df0:	4642      	mov	r2, r8
 8004df2:	464b      	mov	r3, r9
 8004df4:	1891      	adds	r1, r2, r2
 8004df6:	61b9      	str	r1, [r7, #24]
 8004df8:	415b      	adcs	r3, r3
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e00:	4641      	mov	r1, r8
 8004e02:	1851      	adds	r1, r2, r1
 8004e04:	6139      	str	r1, [r7, #16]
 8004e06:	4649      	mov	r1, r9
 8004e08:	414b      	adcs	r3, r1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e18:	4659      	mov	r1, fp
 8004e1a:	00cb      	lsls	r3, r1, #3
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e22:	4651      	mov	r1, sl
 8004e24:	00ca      	lsls	r2, r1, #3
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	189b      	adds	r3, r3, r2
 8004e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e34:	464b      	mov	r3, r9
 8004e36:	460a      	mov	r2, r1
 8004e38:	eb42 0303 	adc.w	r3, r2, r3
 8004e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e58:	4649      	mov	r1, r9
 8004e5a:	008b      	lsls	r3, r1, #2
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e62:	4641      	mov	r1, r8
 8004e64:	008a      	lsls	r2, r1, #2
 8004e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e6a:	f7fb f9b3 	bl	80001d4 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b39      	ldr	r3, [pc, #228]	; (8004f58 <UART_SetConfig+0x4e4>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	3332      	adds	r3, #50	; 0x32
 8004e86:	4a34      	ldr	r2, [pc, #208]	; (8004f58 <UART_SetConfig+0x4e4>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e92:	441c      	add	r4, r3
 8004e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e98:	2200      	movs	r2, #0
 8004e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004e9c:	677a      	str	r2, [r7, #116]	; 0x74
 8004e9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ea2:	4642      	mov	r2, r8
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	1891      	adds	r1, r2, r2
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	415b      	adcs	r3, r3
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	1851      	adds	r1, r2, r1
 8004eb6:	6039      	str	r1, [r7, #0]
 8004eb8:	4649      	mov	r1, r9
 8004eba:	414b      	adcs	r3, r1
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004eca:	4659      	mov	r1, fp
 8004ecc:	00cb      	lsls	r3, r1, #3
 8004ece:	4651      	mov	r1, sl
 8004ed0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed4:	4651      	mov	r1, sl
 8004ed6:	00ca      	lsls	r2, r1, #3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	4603      	mov	r3, r0
 8004ede:	4642      	mov	r2, r8
 8004ee0:	189b      	adds	r3, r3, r2
 8004ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	460a      	mov	r2, r1
 8004ee8:	eb42 0303 	adc.w	r3, r2, r3
 8004eec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ef8:	667a      	str	r2, [r7, #100]	; 0x64
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f06:	4649      	mov	r1, r9
 8004f08:	008b      	lsls	r3, r1, #2
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f10:	4641      	mov	r1, r8
 8004f12:	008a      	lsls	r2, r1, #2
 8004f14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f18:	f7fb f95c 	bl	80001d4 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <UART_SetConfig+0x4e4>)
 8004f22:	fba3 1302 	umull	r1, r3, r3, r2
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2164      	movs	r1, #100	; 0x64
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	3332      	adds	r3, #50	; 0x32
 8004f34:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <UART_SetConfig+0x4e4>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	f003 020f 	and.w	r2, r3, #15
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4422      	add	r2, r4
 8004f48:	609a      	str	r2, [r3, #8]
}
 8004f4a:	bf00      	nop
 8004f4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f50:	46bd      	mov	sp, r7
 8004f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f56:	bf00      	nop
 8004f58:	51eb851f 	.word	0x51eb851f

08004f5c <__libc_init_array>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	4d0d      	ldr	r5, [pc, #52]	; (8004f94 <__libc_init_array+0x38>)
 8004f60:	4c0d      	ldr	r4, [pc, #52]	; (8004f98 <__libc_init_array+0x3c>)
 8004f62:	1b64      	subs	r4, r4, r5
 8004f64:	10a4      	asrs	r4, r4, #2
 8004f66:	2600      	movs	r6, #0
 8004f68:	42a6      	cmp	r6, r4
 8004f6a:	d109      	bne.n	8004f80 <__libc_init_array+0x24>
 8004f6c:	4d0b      	ldr	r5, [pc, #44]	; (8004f9c <__libc_init_array+0x40>)
 8004f6e:	4c0c      	ldr	r4, [pc, #48]	; (8004fa0 <__libc_init_array+0x44>)
 8004f70:	f000 f820 	bl	8004fb4 <_init>
 8004f74:	1b64      	subs	r4, r4, r5
 8004f76:	10a4      	asrs	r4, r4, #2
 8004f78:	2600      	movs	r6, #0
 8004f7a:	42a6      	cmp	r6, r4
 8004f7c:	d105      	bne.n	8004f8a <__libc_init_array+0x2e>
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f84:	4798      	blx	r3
 8004f86:	3601      	adds	r6, #1
 8004f88:	e7ee      	b.n	8004f68 <__libc_init_array+0xc>
 8004f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8e:	4798      	blx	r3
 8004f90:	3601      	adds	r6, #1
 8004f92:	e7f2      	b.n	8004f7a <__libc_init_array+0x1e>
 8004f94:	08004ff4 	.word	0x08004ff4
 8004f98:	08004ff4 	.word	0x08004ff4
 8004f9c:	08004ff4 	.word	0x08004ff4
 8004fa0:	08004ff8 	.word	0x08004ff8

08004fa4 <memset>:
 8004fa4:	4402      	add	r2, r0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d100      	bne.n	8004fae <memset+0xa>
 8004fac:	4770      	bx	lr
 8004fae:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb2:	e7f9      	b.n	8004fa8 <memset+0x4>

08004fb4 <_init>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr

08004fc0 <_fini>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	bf00      	nop
 8004fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc6:	bc08      	pop	{r3}
 8004fc8:	469e      	mov	lr, r3
 8004fca:	4770      	bx	lr
