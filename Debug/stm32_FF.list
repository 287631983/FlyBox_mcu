
stm32_FF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004564  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004718  08004718  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004718  08004718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004720  08004720  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000000c  08004734  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08004734  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d702  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf2  00000000  00000000  0002d73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001559f  00000000  00000000  00030b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7a9  00000000  00000000  000460e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089535  00000000  00000000  00053890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcdc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003420  00000000  00000000  000dce18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080046e0 	.word	0x080046e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080046e0 	.word	0x080046e0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
uint16_t ESC_CMD[ESC_CMD_BUF_LEN]={0};
void delay();
static uint16_t prepareDshotPacket(const uint16_t value, uint8_t requestTelemetry);
static void pwmWriteDigital(uint16_t *esc_cmd, uint16_t value);
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fe99 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f96b 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fb21 	bl	8000b2c <MX_GPIO_Init>
  MX_DMA_Init();
 80004ea:	f000 faa3 	bl	8000a34 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004ee:	f000 fa77 	bl	80009e0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80004f2:	f000 f9cf 	bl	8000894 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
  /* USER CODE BEGIN 3 */
    uint16_t ele = prepareDshotPacket(2000, 0);
 80004f6:	2100      	movs	r1, #0
 80004f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004fc:	f000 f828 	bl	8000550 <prepareDshotPacket>
 8000500:	4603      	mov	r3, r0
 8000502:	80fb      	strh	r3, [r7, #6]
    pwmWriteDigital(ESC_CMD, ele);
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	4619      	mov	r1, r3
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <main+0x3c>)
 800050a:	f000 f85d 	bl	80005c8 <pwmWriteDigital>
    delay();
 800050e:	f000 f803 	bl	8000518 <delay>
	while (1) {
 8000512:	e7f0      	b.n	80004f6 <main+0x1e>
 8000514:	20000354 	.word	0x20000354

08000518 <delay>:
    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

void delay() {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
  uint64_t i = 84*1000;
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <delay+0x34>)
 8000520:	f04f 0300 	mov.w	r3, #0
 8000524:	e9c7 2300 	strd	r2, r3, [r7]
  while(i--);
 8000528:	bf00      	nop
 800052a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800052e:	1e50      	subs	r0, r2, #1
 8000530:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
 8000534:	e9c7 0100 	strd	r0, r1, [r7]
 8000538:	4313      	orrs	r3, r2
 800053a:	d1f6      	bne.n	800052a <delay+0x12>
}
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	00014820 	.word	0x00014820

08000550 <prepareDshotPacket>:

static uint16_t prepareDshotPacket(const uint16_t value, uint8_t requestTelemetry)
{
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	80fb      	strh	r3, [r7, #6]
 800055c:	4613      	mov	r3, r2
 800055e:	717b      	strb	r3, [r7, #5]
    // 油门大小为11位  所以这里先左移一位 添加上请求回传标志共12位
    uint16_t packet = (value << 1) | (requestTelemetry ? 1 : 0);
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	b21a      	sxth	r2, r3
 8000566:	797b      	ldrb	r3, [r7, #5]
 8000568:	2b00      	cmp	r3, #0
 800056a:	bf14      	ite	ne
 800056c:	2301      	movne	r3, #1
 800056e:	2300      	moveq	r3, #0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	b21b      	sxth	r3, r3
 8000574:	4313      	orrs	r3, r2
 8000576:	b21b      	sxth	r3, r3
 8000578:	817b      	strh	r3, [r7, #10]
 
    // 将12位数据分为3组 每组4位, 进行异或
    // compute checksum
    int csum = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
    int csum_data = packet;
 800057e:	897b      	ldrh	r3, [r7, #10]
 8000580:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 3; i++) {
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e009      	b.n	800059c <prepareDshotPacket+0x4c>
        csum ^=  csum_data;   // xor data by nibbles
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	4053      	eors	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	111b      	asrs	r3, r3, #4
 8000594:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 3; i++) {
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2b02      	cmp	r3, #2
 80005a0:	ddf2      	ble.n	8000588 <prepareDshotPacket+0x38>
    }
    //取最后四位 其他的不要 
    csum &= 0xf;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	f003 030f 	and.w	r3, r3, #15
 80005a8:	617b      	str	r3, [r7, #20]
    // append checksum 将CRC添加到后四位
    packet = (packet << 4) | csum;
 80005aa:	897b      	ldrh	r3, [r7, #10]
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	817b      	strh	r3, [r7, #10]
    return packet;
 80005ba:	897b      	ldrh	r3, [r7, #10]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	371c      	adds	r7, #28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <pwmWriteDigital>:


static void pwmWriteDigital(uint16_t *esc_cmd, uint16_t value)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
	value = ( (value > 2047) ? 2047 : value );
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80005da:	4293      	cmp	r3, r2
 80005dc:	bf28      	it	cs
 80005de:	4613      	movcs	r3, r2
 80005e0:	807b      	strh	r3, [r7, #2]
	value = prepareDshotPacket(value, 0);
 80005e2:	887b      	ldrh	r3, [r7, #2]
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffb2 	bl	8000550 <prepareDshotPacket>
 80005ec:	4603      	mov	r3, r0
 80005ee:	807b      	strh	r3, [r7, #2]
    esc_cmd[0]  = (value & 0x8000) ? ESC_BIT_1 : ESC_BIT_0;
 80005f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	da01      	bge.n	80005fc <pwmWriteDigital+0x34>
 80005f8:	2275      	movs	r2, #117	; 0x75
 80005fa:	e000      	b.n	80005fe <pwmWriteDigital+0x36>
 80005fc:	2232      	movs	r2, #50	; 0x32
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	801a      	strh	r2, [r3, #0]
    esc_cmd[1]  = (value & 0x4000) ? ESC_BIT_1 : ESC_BIT_0;
 8000602:	887b      	ldrh	r3, [r7, #2]
 8000604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <pwmWriteDigital+0x48>
 800060c:	2275      	movs	r2, #117	; 0x75
 800060e:	e000      	b.n	8000612 <pwmWriteDigital+0x4a>
 8000610:	2232      	movs	r2, #50	; 0x32
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3302      	adds	r3, #2
 8000616:	801a      	strh	r2, [r3, #0]
    esc_cmd[2]  = (value & 0x2000) ? ESC_BIT_1 : ESC_BIT_0;
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <pwmWriteDigital+0x5e>
 8000622:	2275      	movs	r2, #117	; 0x75
 8000624:	e000      	b.n	8000628 <pwmWriteDigital+0x60>
 8000626:	2232      	movs	r2, #50	; 0x32
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3304      	adds	r3, #4
 800062c:	801a      	strh	r2, [r3, #0]
    esc_cmd[3]  = (value & 0x1000) ? ESC_BIT_1 : ESC_BIT_0;
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <pwmWriteDigital+0x74>
 8000638:	2275      	movs	r2, #117	; 0x75
 800063a:	e000      	b.n	800063e <pwmWriteDigital+0x76>
 800063c:	2232      	movs	r2, #50	; 0x32
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3306      	adds	r3, #6
 8000642:	801a      	strh	r2, [r3, #0]
    esc_cmd[4]  = (value & 0x0800) ? ESC_BIT_1 : ESC_BIT_0;
 8000644:	887b      	ldrh	r3, [r7, #2]
 8000646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <pwmWriteDigital+0x8a>
 800064e:	2275      	movs	r2, #117	; 0x75
 8000650:	e000      	b.n	8000654 <pwmWriteDigital+0x8c>
 8000652:	2232      	movs	r2, #50	; 0x32
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3308      	adds	r3, #8
 8000658:	801a      	strh	r2, [r3, #0]
    esc_cmd[5]  = (value & 0x0400) ? ESC_BIT_1 : ESC_BIT_0;
 800065a:	887b      	ldrh	r3, [r7, #2]
 800065c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <pwmWriteDigital+0xa0>
 8000664:	2275      	movs	r2, #117	; 0x75
 8000666:	e000      	b.n	800066a <pwmWriteDigital+0xa2>
 8000668:	2232      	movs	r2, #50	; 0x32
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	330a      	adds	r3, #10
 800066e:	801a      	strh	r2, [r3, #0]
    esc_cmd[6]  = (value & 0x0200) ? ESC_BIT_1 : ESC_BIT_0;
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <pwmWriteDigital+0xb6>
 800067a:	2275      	movs	r2, #117	; 0x75
 800067c:	e000      	b.n	8000680 <pwmWriteDigital+0xb8>
 800067e:	2232      	movs	r2, #50	; 0x32
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	330c      	adds	r3, #12
 8000684:	801a      	strh	r2, [r3, #0]
    esc_cmd[7]  = (value & 0x0100) ? ESC_BIT_1 : ESC_BIT_0;
 8000686:	887b      	ldrh	r3, [r7, #2]
 8000688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <pwmWriteDigital+0xcc>
 8000690:	2275      	movs	r2, #117	; 0x75
 8000692:	e000      	b.n	8000696 <pwmWriteDigital+0xce>
 8000694:	2232      	movs	r2, #50	; 0x32
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	330e      	adds	r3, #14
 800069a:	801a      	strh	r2, [r3, #0]
    esc_cmd[8]  = (value & 0x0080) ? ESC_BIT_1 : ESC_BIT_0;
 800069c:	887b      	ldrh	r3, [r7, #2]
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <pwmWriteDigital+0xe2>
 80006a6:	2275      	movs	r2, #117	; 0x75
 80006a8:	e000      	b.n	80006ac <pwmWriteDigital+0xe4>
 80006aa:	2232      	movs	r2, #50	; 0x32
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3310      	adds	r3, #16
 80006b0:	801a      	strh	r2, [r3, #0]
    esc_cmd[9]  = (value & 0x0040) ? ESC_BIT_1 : ESC_BIT_0;
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <pwmWriteDigital+0xf8>
 80006bc:	2275      	movs	r2, #117	; 0x75
 80006be:	e000      	b.n	80006c2 <pwmWriteDigital+0xfa>
 80006c0:	2232      	movs	r2, #50	; 0x32
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3312      	adds	r3, #18
 80006c6:	801a      	strh	r2, [r3, #0]
    esc_cmd[10] = (value & 0x0020) ? ESC_BIT_1 : ESC_BIT_0;
 80006c8:	887b      	ldrh	r3, [r7, #2]
 80006ca:	f003 0320 	and.w	r3, r3, #32
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <pwmWriteDigital+0x10e>
 80006d2:	2275      	movs	r2, #117	; 0x75
 80006d4:	e000      	b.n	80006d8 <pwmWriteDigital+0x110>
 80006d6:	2232      	movs	r2, #50	; 0x32
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3314      	adds	r3, #20
 80006dc:	801a      	strh	r2, [r3, #0]
    esc_cmd[11] = (value & 0x0010) ? ESC_BIT_1 : ESC_BIT_0; 	
 80006de:	887b      	ldrh	r3, [r7, #2]
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <pwmWriteDigital+0x124>
 80006e8:	2275      	movs	r2, #117	; 0x75
 80006ea:	e000      	b.n	80006ee <pwmWriteDigital+0x126>
 80006ec:	2232      	movs	r2, #50	; 0x32
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3316      	adds	r3, #22
 80006f2:	801a      	strh	r2, [r3, #0]
    esc_cmd[12] = (value & 0x8) ? ESC_BIT_1 : ESC_BIT_0;
 80006f4:	887b      	ldrh	r3, [r7, #2]
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <pwmWriteDigital+0x13a>
 80006fe:	2275      	movs	r2, #117	; 0x75
 8000700:	e000      	b.n	8000704 <pwmWriteDigital+0x13c>
 8000702:	2232      	movs	r2, #50	; 0x32
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3318      	adds	r3, #24
 8000708:	801a      	strh	r2, [r3, #0]
    esc_cmd[13] = (value & 0x4) ? ESC_BIT_1 : ESC_BIT_0;
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <pwmWriteDigital+0x150>
 8000714:	2275      	movs	r2, #117	; 0x75
 8000716:	e000      	b.n	800071a <pwmWriteDigital+0x152>
 8000718:	2232      	movs	r2, #50	; 0x32
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	331a      	adds	r3, #26
 800071e:	801a      	strh	r2, [r3, #0]
    esc_cmd[14] = (value & 0x2) ? ESC_BIT_1 : ESC_BIT_0;
 8000720:	887b      	ldrh	r3, [r7, #2]
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <pwmWriteDigital+0x166>
 800072a:	2275      	movs	r2, #117	; 0x75
 800072c:	e000      	b.n	8000730 <pwmWriteDigital+0x168>
 800072e:	2232      	movs	r2, #50	; 0x32
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	331c      	adds	r3, #28
 8000734:	801a      	strh	r2, [r3, #0]
    esc_cmd[15] = (value & 0x1) ? ESC_BIT_1 : ESC_BIT_0;
 8000736:	887b      	ldrh	r3, [r7, #2]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <pwmWriteDigital+0x17c>
 8000740:	2275      	movs	r2, #117	; 0x75
 8000742:	e000      	b.n	8000746 <pwmWriteDigital+0x17e>
 8000744:	2232      	movs	r2, #50	; 0x32
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	331e      	adds	r3, #30
 800074a:	801a      	strh	r2, [r3, #0]
 
    HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_1,(uint32_t *)esc_cmd,ESC_CMD_BUF_LEN);
 800074c:	2312      	movs	r3, #18
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	2100      	movs	r1, #0
 8000752:	480c      	ldr	r0, [pc, #48]	; (8000784 <pwmWriteDigital+0x1bc>)
 8000754:	f002 f974 	bl	8002a40 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_2,(uint32_t *)esc_cmd,ESC_CMD_BUF_LEN);
 8000758:	2312      	movs	r3, #18
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	2104      	movs	r1, #4
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <pwmWriteDigital+0x1bc>)
 8000760:	f002 f96e 	bl	8002a40 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_3,(uint32_t *)esc_cmd,ESC_CMD_BUF_LEN);
 8000764:	2312      	movs	r3, #18
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	2108      	movs	r1, #8
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <pwmWriteDigital+0x1bc>)
 800076c:	f002 f968 	bl	8002a40 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_4,(uint32_t *)esc_cmd,ESC_CMD_BUF_LEN);
 8000770:	2312      	movs	r3, #18
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	210c      	movs	r1, #12
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <pwmWriteDigital+0x1bc>)
 8000778:	f002 f962 	bl	8002a40 <HAL_TIM_PWM_Start_DMA>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000028 	.word	0x20000028

08000788 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000790:	2100      	movs	r1, #0
 8000792:	4809      	ldr	r0, [pc, #36]	; (80007b8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8000794:	f002 fb04 	bl	8002da0 <HAL_TIM_PWM_Stop_DMA>
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8000798:	2104      	movs	r1, #4
 800079a:	4807      	ldr	r0, [pc, #28]	; (80007b8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800079c:	f002 fb00 	bl	8002da0 <HAL_TIM_PWM_Stop_DMA>
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 80007a0:	2108      	movs	r1, #8
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80007a4:	f002 fafc 	bl	8002da0 <HAL_TIM_PWM_Stop_DMA>
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_4);
 80007a8:	210c      	movs	r1, #12
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80007ac:	f002 faf8 	bl	8002da0 <HAL_TIM_PWM_Stop_DMA>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000028 	.word	0x20000028

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	; 0x50
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2230      	movs	r2, #48	; 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 ff80 	bl	80046d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <SystemClock_Config+0xd0>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	4a28      	ldr	r2, [pc, #160]	; (800088c <SystemClock_Config+0xd0>)
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ee:	6413      	str	r3, [r2, #64]	; 0x40
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <SystemClock_Config+0xd0>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <SystemClock_Config+0xd4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <SystemClock_Config+0xd4>)
 800080a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <SystemClock_Config+0xd4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000830:	2319      	movs	r3, #25
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000834:	23a0      	movs	r3, #160	; 0xa0
 8000836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083c:	2304      	movs	r3, #4
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fc2d 	bl	80020a4 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000850:	f000 fa0c 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2302      	movs	r3, #2
 800085a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fe8f 	bl	8002594 <HAL_RCC_ClockConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800087c:	f000 f9f6 	bl	8000c6c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000880:	f001 ff6e 	bl	8002760 <HAL_RCC_EnableCSS>
}
 8000884:	bf00      	nop
 8000886:	3750      	adds	r7, #80	; 0x50
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b092      	sub	sp, #72	; 0x48
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 ff06 	bl	80046d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c4:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <MX_TIM1_Init+0x144>)
 80008c6:	4a45      	ldr	r2, [pc, #276]	; (80009dc <MX_TIM1_Init+0x148>)
 80008c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80008ca:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <MX_TIM1_Init+0x144>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b41      	ldr	r3, [pc, #260]	; (80009d8 <MX_TIM1_Init+0x144>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 166;
 80008d6:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <MX_TIM1_Init+0x144>)
 80008d8:	22a6      	movs	r2, #166	; 0xa6
 80008da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <MX_TIM1_Init+0x144>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e2:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <MX_TIM1_Init+0x144>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <MX_TIM1_Init+0x144>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ee:	483a      	ldr	r0, [pc, #232]	; (80009d8 <MX_TIM1_Init+0x144>)
 80008f0:	f002 f857 	bl	80029a2 <HAL_TIM_PWM_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f9b7 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000906:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800090a:	4619      	mov	r1, r3
 800090c:	4832      	ldr	r0, [pc, #200]	; (80009d8 <MX_TIM1_Init+0x144>)
 800090e:	f002 fee7 	bl	80036e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000918:	f000 f9a8 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091c:	2360      	movs	r3, #96	; 0x60
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	2200      	movs	r2, #0
 800093e:	4619      	mov	r1, r3
 8000940:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_TIM1_Init+0x144>)
 8000942:	f002 faf3 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800094c:	f000 f98e 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	2204      	movs	r2, #4
 8000956:	4619      	mov	r1, r3
 8000958:	481f      	ldr	r0, [pc, #124]	; (80009d8 <MX_TIM1_Init+0x144>)
 800095a:	f002 fae7 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000964:	f000 f982 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	2208      	movs	r2, #8
 800096e:	4619      	mov	r1, r3
 8000970:	4819      	ldr	r0, [pc, #100]	; (80009d8 <MX_TIM1_Init+0x144>)
 8000972:	f002 fadb 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800097c:	f000 f976 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	220c      	movs	r2, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <MX_TIM1_Init+0x144>)
 800098a:	f002 facf 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000994:	f000 f96a 	bl	8000c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4807      	ldr	r0, [pc, #28]	; (80009d8 <MX_TIM1_Init+0x144>)
 80009bc:	f002 fefe 	bl	80037bc <HAL_TIMEx_ConfigBreakDeadTime>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80009c6:	f000 f951 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <MX_TIM1_Init+0x144>)
 80009cc:	f000 fa7c 	bl	8000ec8 <HAL_TIM_MspPostInit>

}
 80009d0:	bf00      	nop
 80009d2:	3748      	adds	r7, #72	; 0x48
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000028 	.word	0x20000028
 80009dc:	40010000 	.word	0x40010000

080009e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_USART1_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a18:	f002 ff22 	bl	8003860 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 f923 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001f0 	.word	0x200001f0
 8000a30:	40011000 	.word	0x40011000

08000a34 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b38      	ldr	r3, [pc, #224]	; (8000b20 <MX_DMA_Init+0xec>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a37      	ldr	r2, [pc, #220]	; (8000b20 <MX_DMA_Init+0xec>)
 8000a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b35      	ldr	r3, [pc, #212]	; (8000b20 <MX_DMA_Init+0xec>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000a56:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a58:	4a33      	ldr	r2, [pc, #204]	; (8000b28 <MX_DMA_Init+0xf4>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000a5c:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a62:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a74:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7c:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a90:	2204      	movs	r2, #4
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a96:	2203      	movs	r2, #3
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a9a:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000aa6:	481f      	ldr	r0, [pc, #124]	; (8000b24 <MX_DMA_Init+0xf0>)
 8000aa8:	f000 fd38 	bl	800151c <HAL_DMA_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 8000ab2:	f000 f8db 	bl	8000c6c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2039      	movs	r0, #57	; 0x39
 8000abc:	f000 fcf7 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ac0:	2039      	movs	r0, #57	; 0x39
 8000ac2:	f000 fd10 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	203a      	movs	r0, #58	; 0x3a
 8000acc:	f000 fcef 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ad0:	203a      	movs	r0, #58	; 0x3a
 8000ad2:	f000 fd08 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	203c      	movs	r0, #60	; 0x3c
 8000adc:	f000 fce7 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000ae0:	203c      	movs	r0, #60	; 0x3c
 8000ae2:	f000 fd00 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2044      	movs	r0, #68	; 0x44
 8000aec:	f000 fcdf 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000af0:	2044      	movs	r0, #68	; 0x44
 8000af2:	f000 fcf8 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2045      	movs	r0, #69	; 0x45
 8000afc:	f000 fcd7 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b00:	2045      	movs	r0, #69	; 0x45
 8000b02:	f000 fcf0 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2046      	movs	r0, #70	; 0x46
 8000b0c:	f000 fccf 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000b10:	2046      	movs	r0, #70	; 0x46
 8000b12:	f000 fce8 	bl	80014e6 <HAL_NVIC_EnableIRQ>

}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	200002f4 	.word	0x200002f4
 8000b28:	40026410 	.word	0x40026410

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a44      	ldr	r2, [pc, #272]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a3d      	ldr	r2, [pc, #244]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb8:	4829      	ldr	r0, [pc, #164]	; (8000c60 <MX_GPIO_Init+0x134>)
 8000bba:	f001 fa35 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4822      	ldr	r0, [pc, #136]	; (8000c60 <MX_GPIO_Init+0x134>)
 8000bd8:	f001 f8a2 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bdc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be2:	2303      	movs	r3, #3
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	481b      	ldr	r0, [pc, #108]	; (8000c60 <MX_GPIO_Init+0x134>)
 8000bf2:	f001 f895 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4816      	ldr	r0, [pc, #88]	; (8000c64 <MX_GPIO_Init+0x138>)
 8000c0c:	f001 f888 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000c10:	f249 03fe 	movw	r3, #37118	; 0x90fe
 8000c14:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <MX_GPIO_Init+0x138>)
 8000c26:	f001 f87b 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c2a:	f24f 7337 	movw	r3, #63287	; 0xf737
 8000c2e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c30:	2303      	movs	r3, #3
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <MX_GPIO_Init+0x13c>)
 8000c40:	f001 f86e 	bl	8001d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2006      	movs	r0, #6
 8000c4a:	f000 fc30 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c4e:	2006      	movs	r0, #6
 8000c50:	f000 fc49 	bl	80014e6 <HAL_NVIC_EnableIRQ>

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a72      	ldr	r2, [pc, #456]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x1d8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 80de 	bne.w	8000e98 <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4b70      	ldr	r3, [pc, #448]	; (8000ea4 <HAL_TIM_PWM_MspInit+0x1dc>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a6f      	ldr	r2, [pc, #444]	; (8000ea4 <HAL_TIM_PWM_MspInit+0x1dc>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44
 8000cec:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <HAL_TIM_PWM_MspInit+0x1dc>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000cf8:	4b6b      	ldr	r3, [pc, #428]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000cfa:	4a6c      	ldr	r2, [pc, #432]	; (8000eac <HAL_TIM_PWM_MspInit+0x1e4>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000cfe:	4b6a      	ldr	r3, [pc, #424]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d00:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d04:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d06:	4b68      	ldr	r3, [pc, #416]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d08:	2240      	movs	r2, #64	; 0x40
 8000d0a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0c:	4b66      	ldr	r3, [pc, #408]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d12:	4b65      	ldr	r3, [pc, #404]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d18:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1a:	4b63      	ldr	r3, [pc, #396]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d20:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d22:	4b61      	ldr	r3, [pc, #388]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d28:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000d2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d30:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d36:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d38:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d3e:	485a      	ldr	r0, [pc, #360]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d40:	f000 fbec 	bl	800151c <HAL_DMA_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8000d4a:	f7ff ff8f 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a55      	ldr	r2, [pc, #340]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
 8000d54:	4a54      	ldr	r2, [pc, #336]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8000d5a:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d5c:	4a55      	ldr	r2, [pc, #340]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x1ec>)
 8000d5e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8000d60:	4b53      	ldr	r3, [pc, #332]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d62:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d66:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d6a:	2240      	movs	r2, #64	; 0x40
 8000d6c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6e:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000d74:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d7c:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d82:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d84:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000d8c:	4b48      	ldr	r3, [pc, #288]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8000d92:	4b47      	ldr	r3, [pc, #284]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d98:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000da0:	4843      	ldr	r0, [pc, #268]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000da2:	f000 fbbb 	bl	800151c <HAL_DMA_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_TIM_PWM_MspInit+0xe8>
    {
      Error_Handler();
 8000dac:	f7ff ff5e 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a3f      	ldr	r2, [pc, #252]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
 8000db6:	4a3e      	ldr	r2, [pc, #248]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <HAL_TIM_PWM_MspInit+0x1f4>)
 8000dc0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8000dc2:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000dc4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000dc8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000dcc:	2240      	movs	r2, #64	; 0x40
 8000dce:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd0:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000dd6:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ddc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dde:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000de4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de6:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dec:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8000df4:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000df6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dfa:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000e02:	482d      	ldr	r0, [pc, #180]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000e04:	f000 fb8a 	bl	800151c <HAL_DMA_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_TIM_PWM_MspInit+0x14a>
    {
      Error_Handler();
 8000e0e:	f7ff ff2d 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e18:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e20:	4a28      	ldr	r2, [pc, #160]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e22:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e26:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e2a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e2e:	2240      	movs	r2, #64	; 0x40
 8000e30:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e5c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8000e64:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e66:	f000 fb59 	bl	800151c <HAL_DMA_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_TIM_PWM_MspInit+0x1ac>
    {
      Error_Handler();
 8000e70:	f7ff fefc 	bl	8000c6c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e78:	631a      	str	r2, [r3, #48]	; 0x30
 8000e7a:	4a11      	ldr	r2, [pc, #68]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e84:	639a      	str	r2, [r3, #56]	; 0x38
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	20000070 	.word	0x20000070
 8000eac:	40026428 	.word	0x40026428
 8000eb0:	200000d0 	.word	0x200000d0
 8000eb4:	40026440 	.word	0x40026440
 8000eb8:	20000130 	.word	0x20000130
 8000ebc:	400264a0 	.word	0x400264a0
 8000ec0:	20000190 	.word	0x20000190
 8000ec4:	40026470 	.word	0x40026470

08000ec8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <HAL_TIM_MspPostInit+0x68>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d11e      	bne.n	8000f28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_TIM_MspPostInit+0x6c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_TIM_MspPostInit+0x6c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_TIM_MspPostInit+0x6c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f06:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_TIM_MspPostInit+0x70>)
 8000f24:	f000 fefc 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40010000 	.word	0x40010000
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	; (800108c <HAL_UART_MspInit+0x150>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	f040 8091 	bne.w	8001082 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	4a49      	ldr	r2, [pc, #292]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a42      	ldr	r2, [pc, #264]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f98:	23c0      	movs	r3, #192	; 0xc0
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4838      	ldr	r0, [pc, #224]	; (8001094 <HAL_UART_MspInit+0x158>)
 8000fb4:	f000 feb4 	bl	8001d20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8000fb8:	4b37      	ldr	r3, [pc, #220]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fba:	4a38      	ldr	r2, [pc, #224]	; (800109c <HAL_UART_MspInit+0x160>)
 8000fbc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000fec:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ff2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ffa:	4827      	ldr	r0, [pc, #156]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000ffc:	f000 fa8e 	bl	800151c <HAL_DMA_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001006:	f7ff fe31 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <HAL_UART_MspInit+0x15c>)
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001018:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <HAL_UART_MspInit+0x168>)
 800101a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800101e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001022:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001036:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001058:	f000 fa60 	bl	800151c <HAL_DMA_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001062:	f7ff fe03 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800106a:	635a      	str	r2, [r3, #52]	; 0x34
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2025      	movs	r0, #37	; 0x25
 8001078:	f000 fa19 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800107c:	2025      	movs	r0, #37	; 0x25
 800107e:	f000 fa32 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40011000 	.word	0x40011000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020400 	.word	0x40020400
 8001098:	20000234 	.word	0x20000234
 800109c:	40026488 	.word	0x40026488
 80010a0:	20000294 	.word	0x20000294
 80010a4:	400264b8 	.word	0x400264b8

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80010ac:	f001 fc5e 	bl	800296c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x8>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f8de 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001104:	2001      	movs	r0, #1
 8001106:	f000 ffa9 	bl	800205c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <USART1_IRQHandler+0x10>)
 8001116:	f002 fbf1 	bl	80038fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001f0 	.word	0x200001f0

08001124 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA2_Stream1_IRQHandler+0x10>)
 800112a:	f000 fb8f 	bl	800184c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000070 	.word	0x20000070

08001138 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <DMA2_Stream2_IRQHandler+0x10>)
 800113e:	f000 fb85 	bl	800184c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000d0 	.word	0x200000d0

0800114c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <DMA2_Stream4_IRQHandler+0x10>)
 8001152:	f000 fb7b 	bl	800184c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000190 	.word	0x20000190

08001160 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <DMA2_Stream5_IRQHandler+0x10>)
 8001166:	f000 fb71 	bl	800184c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000234 	.word	0x20000234

08001174 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <DMA2_Stream6_IRQHandler+0x10>)
 800117a:	f000 fb67 	bl	800184c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000130 	.word	0x20000130

08001188 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <DMA2_Stream7_IRQHandler+0x10>)
 800118e:	f000 fb5d 	bl	800184c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000294 	.word	0x20000294

0800119c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <SystemInit+0x20>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <SystemInit+0x20>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c6:	490e      	ldr	r1, [pc, #56]	; (8001200 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011dc:	4c0b      	ldr	r4, [pc, #44]	; (800120c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ea:	f7ff ffd7 	bl	800119c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ee:	f003 fa4b 	bl	8004688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f2:	f7ff f971 	bl	80004d8 <main>
  bx  lr    
 80011f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001204:	08004728 	.word	0x08004728
  ldr r2, =_sbss
 8001208:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800120c:	2000037c 	.word	0x2000037c

08001210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC_IRQHandler>
	...

08001214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <HAL_Init+0x40>)
 800121e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_Init+0x40>)
 800122a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_Init+0x40>)
 8001236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123c:	2003      	movs	r0, #3
 800123e:	f000 f92b 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001242:	200f      	movs	r0, #15
 8001244:	f000 f808 	bl	8001258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001248:	f7ff fd16 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023c00 	.word	0x40023c00

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x54>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x58>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f943 	bl	8001502 <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00e      	b.n	80012a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d80a      	bhi.n	80012a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001294:	f000 f90b 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <HAL_InitTick+0x5c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000004 	.word	0x20000004

080012b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000378 	.word	0x20000378

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000378 	.word	0x20000378

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff29 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff3e 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff8e 	bl	80013ec <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5d 	bl	8001398 <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff31 	bl	800135c <__NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffa2 	bl	8001454 <SysTick_Config>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff feda 	bl	80012e0 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e099      	b.n	800166c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001558:	e00f      	b.n	800157a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800155a:	f7ff fec1 	bl	80012e0 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b05      	cmp	r3, #5
 8001566:	d908      	bls.n	800157a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2220      	movs	r2, #32
 800156c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2203      	movs	r2, #3
 8001572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e078      	b.n	800166c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e8      	bne.n	800155a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <HAL_DMA_Init+0x158>)
 8001594:	4013      	ands	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d107      	bne.n	80015e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	4313      	orrs	r3, r2
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f023 0307 	bic.w	r3, r3, #7
 80015fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	4313      	orrs	r3, r2
 8001604:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	2b04      	cmp	r3, #4
 800160c:	d117      	bne.n	800163e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4313      	orrs	r3, r2
 8001616:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00e      	beq.n	800163e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fb01 	bl	8001c28 <DMA_CheckFifoParam>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800163a:	2301      	movs	r3, #1
 800163c:	e016      	b.n	800166c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fab8 	bl	8001bbc <DMA_CalcBaseAndBitshift>
 800164c:	4603      	mov	r3, r0
 800164e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001654:	223f      	movs	r2, #63	; 0x3f
 8001656:	409a      	lsls	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	f010803f 	.word	0xf010803f

08001678 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_DMA_Start_IT+0x26>
 800169a:	2302      	movs	r3, #2
 800169c:	e040      	b.n	8001720 <HAL_DMA_Start_IT+0xa8>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d12f      	bne.n	8001712 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fa4a 	bl	8001b60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d0:	223f      	movs	r2, #63	; 0x3f
 80016d2:	409a      	lsls	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0216 	orr.w	r2, r2, #22
 80016e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0208 	orr.w	r2, r2, #8
 80016fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e005      	b.n	800171e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800171a:	2302      	movs	r3, #2
 800171c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800171e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001736:	f7ff fdd3 	bl	80012e0 <HAL_GetTick>
 800173a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d008      	beq.n	800175a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e052      	b.n	8001800 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0216 	bic.w	r2, r2, #22
 8001768:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001778:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d103      	bne.n	800178a <HAL_DMA_Abort+0x62>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0208 	bic.w	r2, r2, #8
 8001798:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0201 	bic.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017aa:	e013      	b.n	80017d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ac:	f7ff fd98 	bl	80012e0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d90c      	bls.n	80017d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2220      	movs	r2, #32
 80017be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e015      	b.n	8001800 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1e4      	bne.n	80017ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	223f      	movs	r2, #63	; 0x3f
 80017e8:	409a      	lsls	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d004      	beq.n	8001826 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00c      	b.n	8001840 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2205      	movs	r2, #5
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001858:	4b8e      	ldr	r3, [pc, #568]	; (8001a94 <HAL_DMA_IRQHandler+0x248>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a8e      	ldr	r2, [pc, #568]	; (8001a98 <HAL_DMA_IRQHandler+0x24c>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0a9b      	lsrs	r3, r3, #10
 8001864:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001876:	2208      	movs	r2, #8
 8001878:	409a      	lsls	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d01a      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0204 	bic.w	r2, r2, #4
 800189e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	2208      	movs	r2, #8
 80018a6:	409a      	lsls	r2, r3
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b0:	f043 0201 	orr.w	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	2201      	movs	r2, #1
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d012      	beq.n	80018ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	2201      	movs	r2, #1
 80018dc:	409a      	lsls	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e6:	f043 0202 	orr.w	r2, r3, #2
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f2:	2204      	movs	r2, #4
 80018f4:	409a      	lsls	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d012      	beq.n	8001924 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00b      	beq.n	8001924 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001910:	2204      	movs	r2, #4
 8001912:	409a      	lsls	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191c:	f043 0204 	orr.w	r2, r3, #4
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2210      	movs	r2, #16
 800192a:	409a      	lsls	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d043      	beq.n	80019bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d03c      	beq.n	80019bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001946:	2210      	movs	r2, #16
 8001948:	409a      	lsls	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d018      	beq.n	800198e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d108      	bne.n	800197c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	2b00      	cmp	r3, #0
 8001970:	d024      	beq.n	80019bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
 800197a:	e01f      	b.n	80019bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01b      	beq.n	80019bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
 800198c:	e016      	b.n	80019bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d107      	bne.n	80019ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0208 	bic.w	r2, r2, #8
 80019aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2220      	movs	r2, #32
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 808f 	beq.w	8001aec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 8087 	beq.w	8001aec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	2220      	movs	r2, #32
 80019e4:	409a      	lsls	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d136      	bne.n	8001a64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0216 	bic.w	r2, r2, #22
 8001a04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <HAL_DMA_IRQHandler+0x1da>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0208 	bic.w	r2, r2, #8
 8001a34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3a:	223f      	movs	r2, #63	; 0x3f
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d07e      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
        }
        return;
 8001a62:	e079      	b.n	8001b58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01d      	beq.n	8001aae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10d      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d031      	beq.n	8001aec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
 8001a90:	e02c      	b.n	8001aec <HAL_DMA_IRQHandler+0x2a0>
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000
 8001a98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d023      	beq.n	8001aec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	4798      	blx	r3
 8001aac:	e01e      	b.n	8001aec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10f      	bne.n	8001adc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0210 	bic.w	r2, r2, #16
 8001aca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d032      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d022      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2205      	movs	r2, #5
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d307      	bcc.n	8001b34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f2      	bne.n	8001b18 <HAL_DMA_IRQHandler+0x2cc>
 8001b32:	e000      	b.n	8001b36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
 8001b56:	e000      	b.n	8001b5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b58:	bf00      	nop
    }
  }
}
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	d108      	bne.n	8001ba0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b9e:	e007      	b.n	8001bb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	3b10      	subs	r3, #16
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <DMA_CalcBaseAndBitshift+0x64>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bd6:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <DMA_CalcBaseAndBitshift+0x68>)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d909      	bls.n	8001bfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bf2:	f023 0303 	bic.w	r3, r3, #3
 8001bf6:	1d1a      	adds	r2, r3, #4
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	659a      	str	r2, [r3, #88]	; 0x58
 8001bfc:	e007      	b.n	8001c0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c06:	f023 0303 	bic.w	r3, r3, #3
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	aaaaaaab 	.word	0xaaaaaaab
 8001c24:	08004710 	.word	0x08004710

08001c28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d11f      	bne.n	8001c82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d856      	bhi.n	8001cf6 <DMA_CheckFifoParam+0xce>
 8001c48:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <DMA_CheckFifoParam+0x28>)
 8001c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4e:	bf00      	nop
 8001c50:	08001c61 	.word	0x08001c61
 8001c54:	08001c73 	.word	0x08001c73
 8001c58:	08001c61 	.word	0x08001c61
 8001c5c:	08001cf7 	.word	0x08001cf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d046      	beq.n	8001cfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c70:	e043      	b.n	8001cfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c7a:	d140      	bne.n	8001cfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c80:	e03d      	b.n	8001cfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c8a:	d121      	bne.n	8001cd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d837      	bhi.n	8001d02 <DMA_CheckFifoParam+0xda>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <DMA_CheckFifoParam+0x70>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001caf 	.word	0x08001caf
 8001ca0:	08001ca9 	.word	0x08001ca9
 8001ca4:	08001cc1 	.word	0x08001cc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cac:	e030      	b.n	8001d10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d025      	beq.n	8001d06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cbe:	e022      	b.n	8001d06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cc8:	d11f      	bne.n	8001d0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cce:	e01c      	b.n	8001d0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d903      	bls.n	8001cde <DMA_CheckFifoParam+0xb6>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d003      	beq.n	8001ce4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cdc:	e018      	b.n	8001d10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce2:	e015      	b.n	8001d10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00e      	beq.n	8001d0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf4:	e00b      	b.n	8001d0e <DMA_CheckFifoParam+0xe6>
      break;
 8001cf6:	bf00      	nop
 8001cf8:	e00a      	b.n	8001d10 <DMA_CheckFifoParam+0xe8>
      break;
 8001cfa:	bf00      	nop
 8001cfc:	e008      	b.n	8001d10 <DMA_CheckFifoParam+0xe8>
      break;
 8001cfe:	bf00      	nop
 8001d00:	e006      	b.n	8001d10 <DMA_CheckFifoParam+0xe8>
      break;
 8001d02:	bf00      	nop
 8001d04:	e004      	b.n	8001d10 <DMA_CheckFifoParam+0xe8>
      break;
 8001d06:	bf00      	nop
 8001d08:	e002      	b.n	8001d10 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d0a:	bf00      	nop
 8001d0c:	e000      	b.n	8001d10 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e159      	b.n	8001ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8148 	bne.w	8001fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d005      	beq.n	8001d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d130      	bne.n	8001dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d017      	beq.n	8001e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d123      	bne.n	8001e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a2 	beq.w	8001fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a56      	ldr	r2, [pc, #344]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec2:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a49      	ldr	r2, [pc, #292]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_Init+0x202>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_GPIO_Init+0x2f4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x1fe>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_GPIO_Init+0x2f8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a46      	ldr	r2, [pc, #280]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_Init+0x1f6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a45      	ldr	r2, [pc, #276]	; (8002020 <HAL_GPIO_Init+0x300>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_Init+0x1f2>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f12:	2307      	movs	r3, #7
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f aea2 	bls.w	8001d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f806 	bl	800208c <HAL_GPIO_EXTI_Callback>
  }
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40013c00 	.word	0x40013c00

0800208c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e267      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d075      	beq.n	80021ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020c2:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d00c      	beq.n	80020e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ce:	4b85      	ldr	r3, [pc, #532]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d112      	bne.n	8002100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020da:	4b82      	ldr	r3, [pc, #520]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e6:	d10b      	bne.n	8002100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e8:	4b7e      	ldr	r3, [pc, #504]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d05b      	beq.n	80021ac <HAL_RCC_OscConfig+0x108>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d157      	bne.n	80021ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e242      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002108:	d106      	bne.n	8002118 <HAL_RCC_OscConfig+0x74>
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a75      	ldr	r2, [pc, #468]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e01d      	b.n	8002154 <HAL_RCC_OscConfig+0xb0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x98>
 8002122:	4b70      	ldr	r3, [pc, #448]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a6f      	ldr	r2, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6c      	ldr	r2, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0xb0>
 800213c:	4b69      	ldr	r3, [pc, #420]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a68      	ldr	r2, [pc, #416]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 800214e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d013      	beq.n	8002184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff f8c0 	bl	80012e0 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff f8bc 	bl	80012e0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e207      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b5b      	ldr	r3, [pc, #364]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0xc0>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff f8ac 	bl	80012e0 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff f8a8 	bl	80012e0 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1f3      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	4b51      	ldr	r3, [pc, #324]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0xe8>
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d063      	beq.n	8002282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ba:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d11c      	bne.n	800220c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d2:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d116      	bne.n	800220c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_RCC_OscConfig+0x152>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1c7      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4937      	ldr	r1, [pc, #220]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	e03a      	b.n	8002282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <HAL_RCC_OscConfig+0x244>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7ff f861 	bl	80012e0 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002222:	f7ff f85d 	bl	80012e0 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1a8      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4925      	ldr	r1, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_RCC_OscConfig+0x244>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f840 	bl	80012e0 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002264:	f7ff f83c 	bl	80012e0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e187      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d036      	beq.n	80022fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_RCC_OscConfig+0x248>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff f820 	bl	80012e0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a4:	f7ff f81c 	bl	80012e0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e167      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80022b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x200>
 80022c2:	e01b      	b.n	80022fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_RCC_OscConfig+0x248>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7ff f809 	bl	80012e0 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	e00e      	b.n	80022f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d2:	f7ff f805 	bl	80012e0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d907      	bls.n	80022f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e150      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	42470000 	.word	0x42470000
 80022ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80022f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ea      	bne.n	80022d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8097 	beq.w	8002438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4b81      	ldr	r3, [pc, #516]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10f      	bne.n	800233a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b7d      	ldr	r3, [pc, #500]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a7c      	ldr	r2, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b77      	ldr	r3, [pc, #476]	; (8002518 <HAL_RCC_OscConfig+0x474>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b74      	ldr	r3, [pc, #464]	; (8002518 <HAL_RCC_OscConfig+0x474>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a73      	ldr	r2, [pc, #460]	; (8002518 <HAL_RCC_OscConfig+0x474>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe ffc5 	bl	80012e0 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7fe ffc1 	bl	80012e0 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e10c      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_RCC_OscConfig+0x474>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x2ea>
 8002380:	4b64      	ldr	r3, [pc, #400]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a63      	ldr	r2, [pc, #396]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
 800238c:	e01c      	b.n	80023c8 <HAL_RCC_OscConfig+0x324>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x30c>
 8002396:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a5e      	ldr	r2, [pc, #376]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a5b      	ldr	r2, [pc, #364]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0x324>
 80023b0:	4b58      	ldr	r3, [pc, #352]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a57      	ldr	r2, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
 80023bc:	4b55      	ldr	r3, [pc, #340]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe ff86 	bl	80012e0 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7fe ff82 	bl	80012e0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0cb      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ee:	4b49      	ldr	r3, [pc, #292]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ee      	beq.n	80023d8 <HAL_RCC_OscConfig+0x334>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fc:	f7fe ff70 	bl	80012e0 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7fe ff6c 	bl	80012e0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e0b5      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241a:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ee      	bne.n	8002404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a38      	ldr	r2, [pc, #224]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a1 	beq.w	8002584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002442:	4b34      	ldr	r3, [pc, #208]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b08      	cmp	r3, #8
 800244c:	d05c      	beq.n	8002508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d141      	bne.n	80024da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_RCC_OscConfig+0x478>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe ff40 	bl	80012e0 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe ff3c 	bl	80012e0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e087      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	085b      	lsrs	r3, r3, #1
 800249a:	3b01      	subs	r3, #1
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	491b      	ldr	r1, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x478>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe ff15 	bl	80012e0 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe ff11 	bl	80012e0 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e05c      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x416>
 80024d8:	e054      	b.n	8002584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_RCC_OscConfig+0x478>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fefe 	bl	80012e0 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fefa 	bl	80012e0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e045      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x444>
 8002506:	e03d      	b.n	8002584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e038      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
 8002514:	40023800 	.word	0x40023800
 8002518:	40007000 	.word	0x40007000
 800251c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_RCC_OscConfig+0x4ec>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d028      	beq.n	8002580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d121      	bne.n	8002580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d11a      	bne.n	8002580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002558:	4293      	cmp	r3, r2
 800255a:	d111      	bne.n	8002580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	085b      	lsrs	r3, r3, #1
 8002568:	3b01      	subs	r3, #1
 800256a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d107      	bne.n	8002580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800

08002594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0cc      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b68      	ldr	r3, [pc, #416]	; (800274c <HAL_RCC_ClockConfig+0x1b8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d90c      	bls.n	80025d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025be:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0b8      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e8:	4b59      	ldr	r3, [pc, #356]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a58      	ldr	r2, [pc, #352]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800260a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	494d      	ldr	r1, [pc, #308]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d044      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b47      	ldr	r3, [pc, #284]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d119      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e07f      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d003      	beq.n	8002652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264e:	2b03      	cmp	r3, #3
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06f      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e067      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b37      	ldr	r3, [pc, #220]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4934      	ldr	r1, [pc, #208]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	4313      	orrs	r3, r2
 8002682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002684:	f7fe fe2c 	bl	80012e0 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7fe fe28 	bl	80012e0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e04f      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b25      	ldr	r3, [pc, #148]	; (800274c <HAL_RCC_ClockConfig+0x1b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d20c      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b22      	ldr	r3, [pc, #136]	; (800274c <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e032      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4916      	ldr	r1, [pc, #88]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	490e      	ldr	r1, [pc, #56]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800271a:	f000 f82d 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 800271e:	4602      	mov	r2, r0
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	490a      	ldr	r1, [pc, #40]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	5ccb      	ldrb	r3, [r1, r3]
 800272e:	fa22 f303 	lsr.w	r3, r2, r3
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fd8c 	bl	8001258 <HAL_InitTick>

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40023c00 	.word	0x40023c00
 8002750:	40023800 	.word	0x40023800
 8002754:	080046f8 	.word	0x080046f8
 8002758:	20000000 	.word	0x20000000
 800275c:	20000004 	.word	0x20000004

08002760 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_RCC_EnableCSS+0x14>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	4247004c 	.word	0x4247004c

08002778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800277c:	b090      	sub	sp, #64	; 0x40
 800277e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
 8002784:	2300      	movs	r3, #0
 8002786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002790:	4b59      	ldr	r3, [pc, #356]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d00d      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x40>
 800279c:	2b08      	cmp	r3, #8
 800279e:	f200 80a1 	bhi.w	80028e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x34>
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027aa:	e09b      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_GetSysClockFreq+0x184>)
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027b0:	e09b      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027b2:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_GetSysClockFreq+0x188>)
 80027b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027b6:	e098      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b8:	4b4f      	ldr	r3, [pc, #316]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027c2:	4b4d      	ldr	r3, [pc, #308]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d028      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	2200      	movs	r2, #0
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	627a      	str	r2, [r7, #36]	; 0x24
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027e0:	2100      	movs	r1, #0
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_GetSysClockFreq+0x188>)
 80027e4:	fb03 f201 	mul.w	r2, r3, r1
 80027e8:	2300      	movs	r3, #0
 80027ea:	fb00 f303 	mul.w	r3, r0, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_RCC_GetSysClockFreq+0x188>)
 80027f2:	fba0 1202 	umull	r1, r2, r0, r2
 80027f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f8:	460a      	mov	r2, r1
 80027fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80027fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fe:	4413      	add	r3, r2
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	2200      	movs	r2, #0
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	61fa      	str	r2, [r7, #28]
 800280a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800280e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002812:	f7fd fcdf 	bl	80001d4 <__aeabi_uldivmod>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4613      	mov	r3, r2
 800281c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281e:	e053      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	2200      	movs	r2, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	617a      	str	r2, [r7, #20]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002832:	f04f 0b00 	mov.w	fp, #0
 8002836:	4652      	mov	r2, sl
 8002838:	465b      	mov	r3, fp
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	0159      	lsls	r1, r3, #5
 8002844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002848:	0150      	lsls	r0, r2, #5
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	ebb2 080a 	subs.w	r8, r2, sl
 8002852:	eb63 090b 	sbc.w	r9, r3, fp
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002862:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002866:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800286a:	ebb2 0408 	subs.w	r4, r2, r8
 800286e:	eb63 0509 	sbc.w	r5, r3, r9
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	00eb      	lsls	r3, r5, #3
 800287c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002880:	00e2      	lsls	r2, r4, #3
 8002882:	4614      	mov	r4, r2
 8002884:	461d      	mov	r5, r3
 8002886:	eb14 030a 	adds.w	r3, r4, sl
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	eb45 030b 	adc.w	r3, r5, fp
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800289e:	4629      	mov	r1, r5
 80028a0:	028b      	lsls	r3, r1, #10
 80028a2:	4621      	mov	r1, r4
 80028a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a8:	4621      	mov	r1, r4
 80028aa:	028a      	lsls	r2, r1, #10
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	2200      	movs	r2, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	60fa      	str	r2, [r7, #12]
 80028b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028bc:	f7fd fc8a 	bl	80001d4 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4613      	mov	r3, r2
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	3301      	adds	r3, #1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e2:	e002      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetSysClockFreq+0x184>)
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3740      	adds	r7, #64	; 0x40
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	00f42400 	.word	0x00f42400
 8002900:	017d7840 	.word	0x017d7840

08002904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_RCC_GetHCLKFreq+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000000 	.word	0x20000000

0800291c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002920:	f7ff fff0 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	0a9b      	lsrs	r3, r3, #10
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4903      	ldr	r1, [pc, #12]	; (8002940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	08004708 	.word	0x08004708

08002944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002948:	f7ff ffdc 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	0b5b      	lsrs	r3, r3, #13
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4903      	ldr	r1, [pc, #12]	; (8002968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	08004708 	.word	0x08004708

0800296c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d104      	bne.n	8002986 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800297c:	f000 f80a 	bl	8002994 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	701a      	strb	r2, [r3, #0]
  }
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	4002380e 	.word	0x4002380e

08002994 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e041      	b.n	8002a38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7fe f97d 	bl	8000cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 fc4b 	bl	800327c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e022      	b.n	8002ab2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d109      	bne.n	8002a86 <HAL_TIM_PWM_Start_DMA+0x46>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	2300      	movne	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	e015      	b.n	8002ab2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d109      	bne.n	8002aa0 <HAL_TIM_PWM_Start_DMA+0x60>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e008      	b.n	8002ab2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e15d      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_TIM_PWM_Start_DMA+0x94>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e022      	b.n	8002b1a <HAL_TIM_PWM_Start_DMA+0xda>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d109      	bne.n	8002aee <HAL_TIM_PWM_Start_DMA+0xae>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	e015      	b.n	8002b1a <HAL_TIM_PWM_Start_DMA+0xda>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d109      	bne.n	8002b08 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e008      	b.n	8002b1a <HAL_TIM_PWM_Start_DMA+0xda>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d024      	beq.n	8002b68 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d104      	bne.n	8002b2e <HAL_TIM_PWM_Start_DMA+0xee>
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e123      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <HAL_TIM_PWM_Start_DMA+0xfe>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b3c:	e016      	b.n	8002b6c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d104      	bne.n	8002b4e <HAL_TIM_PWM_Start_DMA+0x10e>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b4c:	e00e      	b.n	8002b6c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_PWM_Start_DMA+0x11e>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b5c:	e006      	b.n	8002b6c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b66:	e001      	b.n	8002b6c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e104      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	f200 80ae 	bhi.w	8002cd0 <HAL_TIM_PWM_Start_DMA+0x290>
 8002b74:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002bb1 	.word	0x08002bb1
 8002b80:	08002cd1 	.word	0x08002cd1
 8002b84:	08002cd1 	.word	0x08002cd1
 8002b88:	08002cd1 	.word	0x08002cd1
 8002b8c:	08002bf9 	.word	0x08002bf9
 8002b90:	08002cd1 	.word	0x08002cd1
 8002b94:	08002cd1 	.word	0x08002cd1
 8002b98:	08002cd1 	.word	0x08002cd1
 8002b9c:	08002c41 	.word	0x08002c41
 8002ba0:	08002cd1 	.word	0x08002cd1
 8002ba4:	08002cd1 	.word	0x08002cd1
 8002ba8:	08002cd1 	.word	0x08002cd1
 8002bac:	08002c89 	.word	0x08002c89
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	4a72      	ldr	r2, [pc, #456]	; (8002d80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002bb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	4a71      	ldr	r2, [pc, #452]	; (8002d84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	4a70      	ldr	r2, [pc, #448]	; (8002d88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002bc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3334      	adds	r3, #52	; 0x34
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	f7fe fd4e 	bl	8001678 <HAL_DMA_Start_IT>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0c7      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	60da      	str	r2, [r3, #12]
      break;
 8002bf6:	e06e      	b.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	4a60      	ldr	r2, [pc, #384]	; (8002d80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	4a5f      	ldr	r2, [pc, #380]	; (8002d84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	4a5e      	ldr	r2, [pc, #376]	; (8002d88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002c0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3338      	adds	r3, #56	; 0x38
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	f7fe fd2a 	bl	8001678 <HAL_DMA_Start_IT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0a3      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c3c:	60da      	str	r2, [r3, #12]
      break;
 8002c3e:	e04a      	b.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	4a4e      	ldr	r2, [pc, #312]	; (8002d80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002c46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	4a4c      	ldr	r2, [pc, #304]	; (8002d88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002c56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	333c      	adds	r3, #60	; 0x3c
 8002c64:	461a      	mov	r2, r3
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	f7fe fd06 	bl	8001678 <HAL_DMA_Start_IT>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e07f      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c84:	60da      	str	r2, [r3, #12]
      break;
 8002c86:	e026      	b.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4a3c      	ldr	r2, [pc, #240]	; (8002d80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4a3a      	ldr	r2, [pc, #232]	; (8002d88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002c9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3340      	adds	r3, #64	; 0x40
 8002cac:	461a      	mov	r2, r3
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	f7fe fce2 	bl	8001678 <HAL_DMA_Start_IT>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e05b      	b.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ccc:	60da      	str	r2, [r3, #12]
      break;
 8002cce:	e002      	b.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d14b      	bne.n	8002d74 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fcd5 	bl	8003694 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d107      	bne.n	8002d04 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d018      	beq.n	8002d40 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d013      	beq.n	8002d40 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00e      	beq.n	8002d40 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d111      	bne.n	8002d64 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d010      	beq.n	8002d74 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d62:	e007      	b.n	8002d74 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	0800316b 	.word	0x0800316b
 8002d84:	08003213 	.word	0x08003213
 8002d88:	080030d9 	.word	0x080030d9
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40014000 	.word	0x40014000

08002da0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d855      	bhi.n	8002e60 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002e61 	.word	0x08002e61
 8002dc4:	08002e61 	.word	0x08002e61
 8002dc8:	08002e61 	.word	0x08002e61
 8002dcc:	08002e0d 	.word	0x08002e0d
 8002dd0:	08002e61 	.word	0x08002e61
 8002dd4:	08002e61 	.word	0x08002e61
 8002dd8:	08002e61 	.word	0x08002e61
 8002ddc:	08002e29 	.word	0x08002e29
 8002de0:	08002e61 	.word	0x08002e61
 8002de4:	08002e61 	.word	0x08002e61
 8002de8:	08002e61 	.word	0x08002e61
 8002dec:	08002e45 	.word	0x08002e45
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fcff 	bl	8001808 <HAL_DMA_Abort_IT>
      break;
 8002e0a:	e02c      	b.n	8002e66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fcf1 	bl	8001808 <HAL_DMA_Abort_IT>
      break;
 8002e26:	e01e      	b.n	8002e66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fce3 	bl	8001808 <HAL_DMA_Abort_IT>
      break;
 8002e42:	e010      	b.n	8002e66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fcd5 	bl	8001808 <HAL_DMA_Abort_IT>
      break;
 8002e5e:	e002      	b.n	8002e66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d157      	bne.n	8002f1c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2200      	movs	r2, #0
 8002e72:	6839      	ldr	r1, [r7, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fc0d 	bl	8003694 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d117      	bne.n	8002eb4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10f      	bne.n	8002eb4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	f240 4344 	movw	r3, #1092	; 0x444
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	f240 4344 	movw	r3, #1092	; 0x444
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef2:	e013      	b.n	8002f1c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d104      	bne.n	8002f04 <HAL_TIM_PWM_Stop_DMA+0x164>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f02:	e00b      	b.n	8002f1c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d104      	bne.n	8002f14 <HAL_TIM_PWM_Stop_DMA+0x174>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f12:	e003      	b.n	8002f1c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000

08002f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0ae      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	f200 809f 	bhi.w	8003098 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08003099 	.word	0x08003099
 8002f68:	08003099 	.word	0x08003099
 8002f6c:	08003099 	.word	0x08003099
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08003099 	.word	0x08003099
 8002f78:	08003099 	.word	0x08003099
 8002f7c:	08003099 	.word	0x08003099
 8002f80:	08003017 	.word	0x08003017
 8002f84:	08003099 	.word	0x08003099
 8002f88:	08003099 	.word	0x08003099
 8002f8c:	08003099 	.word	0x08003099
 8002f90:	08003057 	.word	0x08003057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f9ee 	bl	800337c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0208 	orr.w	r2, r2, #8
 8002fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	619a      	str	r2, [r3, #24]
      break;
 8002fd2:	e064      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fa34 	bl	8003448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6999      	ldr	r1, [r3, #24]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	021a      	lsls	r2, r3, #8
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	619a      	str	r2, [r3, #24]
      break;
 8003014:	e043      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fa7f 	bl	8003520 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0208 	orr.w	r2, r2, #8
 8003030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0204 	bic.w	r2, r2, #4
 8003040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69d9      	ldr	r1, [r3, #28]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
      break;
 8003054:	e023      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fac9 	bl	80035f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69d9      	ldr	r1, [r3, #28]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	021a      	lsls	r2, r3, #8
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	61da      	str	r2, [r3, #28]
      break;
 8003096:	e002      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	75fb      	strb	r3, [r7, #23]
      break;
 800309c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d107      	bne.n	8003100 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030fe:	e02a      	b.n	8003156 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d107      	bne.n	800311a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2202      	movs	r2, #2
 800310e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003118:	e01d      	b.n	8003156 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	d107      	bne.n	8003134 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2204      	movs	r2, #4
 8003128:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003132:	e010      	b.n	8003156 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d107      	bne.n	800314e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2208      	movs	r2, #8
 8003142:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800314c:	e003      	b.n	8003156 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff ffb4 	bl	80030c4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	771a      	strb	r2, [r3, #28]
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d10b      	bne.n	800319a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d136      	bne.n	80031fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003198:	e031      	b.n	80031fe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d10b      	bne.n	80031bc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2202      	movs	r2, #2
 80031a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d125      	bne.n	80031fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ba:	e020      	b.n	80031fe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d10b      	bne.n	80031de <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2204      	movs	r2, #4
 80031ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d114      	bne.n	80031fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031dc:	e00f      	b.n	80031fe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d10a      	bne.n	80031fe <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2208      	movs	r2, #8
 80031ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7fd fac2 	bl	8000788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	771a      	strb	r2, [r3, #28]
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	429a      	cmp	r2, r3
 8003228:	d103      	bne.n	8003232 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	771a      	strb	r2, [r3, #28]
 8003230:	e019      	b.n	8003266 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d103      	bne.n	8003244 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2202      	movs	r2, #2
 8003240:	771a      	strb	r2, [r3, #28]
 8003242:	e010      	b.n	8003266 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d103      	bne.n	8003256 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2204      	movs	r2, #4
 8003252:	771a      	strb	r2, [r3, #28]
 8003254:	e007      	b.n	8003266 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d102      	bne.n	8003266 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2208      	movs	r2, #8
 8003264:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff ff22 	bl	80030b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	771a      	strb	r2, [r3, #28]
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a34      	ldr	r2, [pc, #208]	; (8003360 <TIM_Base_SetConfig+0xe4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00f      	beq.n	80032b4 <TIM_Base_SetConfig+0x38>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329a:	d00b      	beq.n	80032b4 <TIM_Base_SetConfig+0x38>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a31      	ldr	r2, [pc, #196]	; (8003364 <TIM_Base_SetConfig+0xe8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <TIM_Base_SetConfig+0x38>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a30      	ldr	r2, [pc, #192]	; (8003368 <TIM_Base_SetConfig+0xec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_Base_SetConfig+0x38>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a2f      	ldr	r2, [pc, #188]	; (800336c <TIM_Base_SetConfig+0xf0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d108      	bne.n	80032c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <TIM_Base_SetConfig+0xe4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01b      	beq.n	8003306 <TIM_Base_SetConfig+0x8a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d017      	beq.n	8003306 <TIM_Base_SetConfig+0x8a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a22      	ldr	r2, [pc, #136]	; (8003364 <TIM_Base_SetConfig+0xe8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <TIM_Base_SetConfig+0x8a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a21      	ldr	r2, [pc, #132]	; (8003368 <TIM_Base_SetConfig+0xec>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00f      	beq.n	8003306 <TIM_Base_SetConfig+0x8a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a20      	ldr	r2, [pc, #128]	; (800336c <TIM_Base_SetConfig+0xf0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00b      	beq.n	8003306 <TIM_Base_SetConfig+0x8a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <TIM_Base_SetConfig+0xf4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <TIM_Base_SetConfig+0xf8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <TIM_Base_SetConfig+0xfc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d108      	bne.n	8003318 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a08      	ldr	r2, [pc, #32]	; (8003360 <TIM_Base_SetConfig+0xe4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d103      	bne.n	800334c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	615a      	str	r2, [r3, #20]
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40014000 	.word	0x40014000
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800

0800337c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f023 0201 	bic.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f023 0302 	bic.w	r3, r3, #2
 80033c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a1c      	ldr	r2, [pc, #112]	; (8003444 <TIM_OC1_SetConfig+0xc8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10c      	bne.n	80033f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0308 	bic.w	r3, r3, #8
 80033de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a13      	ldr	r2, [pc, #76]	; (8003444 <TIM_OC1_SetConfig+0xc8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d111      	bne.n	800341e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	621a      	str	r2, [r3, #32]
}
 8003438:	bf00      	nop
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40010000 	.word	0x40010000

08003448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f023 0210 	bic.w	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f023 0320 	bic.w	r3, r3, #32
 8003492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <TIM_OC2_SetConfig+0xd4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d10d      	bne.n	80034c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a15      	ldr	r2, [pc, #84]	; (800351c <TIM_OC2_SetConfig+0xd4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d113      	bne.n	80034f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000

08003520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0303 	bic.w	r3, r3, #3
 8003556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <TIM_OC3_SetConfig+0xd0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d10d      	bne.n	800359a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <TIM_OC3_SetConfig+0xd0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d113      	bne.n	80035ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	621a      	str	r2, [r3, #32]
}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40010000 	.word	0x40010000

080035f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	031b      	lsls	r3, r3, #12
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a10      	ldr	r2, [pc, #64]	; (8003690 <TIM_OC4_SetConfig+0x9c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d109      	bne.n	8003668 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800365a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	019b      	lsls	r3, r3, #6
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40010000 	.word	0x40010000

08003694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2201      	movs	r2, #1
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1a      	ldr	r2, [r3, #32]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	401a      	ands	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e050      	b.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d018      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003744:	d013      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10c      	bne.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4313      	orrs	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40000800 	.word	0x40000800
 80037b4:	40000c00 	.word	0x40000c00
 80037b8:	40014000 	.word	0x40014000

080037bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e03d      	b.n	8003854 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e03f      	b.n	80038f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fb58 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fc7b 	bl	80041a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b0ba      	sub	sp, #232	; 0xe8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800393a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_UART_IRQHandler+0x66>
 800394e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fb65 	bl	800402a <UART_Receive_IT>
      return;
 8003960:	e256      	b.n	8003e10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80de 	beq.w	8003b28 <HAL_UART_IRQHandler+0x22c>
 800396c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80d1 	beq.w	8003b28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_UART_IRQHandler+0xae>
 8003992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_UART_IRQHandler+0xd2>
 80039b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_UART_IRQHandler+0xf6>
 80039da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <HAL_UART_IRQHandler+0x126>
 80039fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f043 0208 	orr.w	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 81ed 	beq.w	8003e06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_UART_IRQHandler+0x14e>
 8003a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 faf0 	bl	800402a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_UART_IRQHandler+0x17a>
 8003a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d04f      	beq.n	8003b16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f9f8 	bl	8003e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d141      	bne.n	8003b0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1d9      	bne.n	8003a8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d013      	beq.n	8003b06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	4a7d      	ldr	r2, [pc, #500]	; (8003cd8 <HAL_UART_IRQHandler+0x3dc>)
 8003ae4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fe8c 	bl	8001808 <HAL_DMA_Abort_IT>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b00:	4610      	mov	r0, r2
 8003b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e00e      	b.n	8003b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f99a 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	e00a      	b.n	8003b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f996 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e006      	b.n	8003b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f992 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b22:	e170      	b.n	8003e06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	bf00      	nop
    return;
 8003b26:	e16e      	b.n	8003e06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	f040 814a 	bne.w	8003dc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8143 	beq.w	8003dc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 813c 	beq.w	8003dc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	f040 80b4 	bne.w	8003cdc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8140 	beq.w	8003e0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b92:	429a      	cmp	r2, r3
 8003b94:	f080 8139 	bcs.w	8003e0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003baa:	f000 8088 	beq.w	8003cbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1d9      	bne.n	8003bae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3314      	adds	r3, #20
 8003c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e1      	bne.n	8003bfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3314      	adds	r3, #20
 8003c56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e3      	bne.n	8003c36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8e:	f023 0310 	bic.w	r3, r3, #16
 8003c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ca0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ca2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ca6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e3      	bne.n	8003c7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd fd35 	bl	8001728 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	4619      	mov	r1, r3
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f8c0 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd4:	e099      	b.n	8003e0a <HAL_UART_IRQHandler+0x50e>
 8003cd6:	bf00      	nop
 8003cd8:	08003f33 	.word	0x08003f33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 808b 	beq.w	8003e0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8086 	beq.w	8003e0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d26:	647a      	str	r2, [r7, #68]	; 0x44
 8003d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e3      	bne.n	8003d02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	623b      	str	r3, [r7, #32]
   return(result);
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d5e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e3      	bne.n	8003d3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0310 	bic.w	r3, r3, #16
 8003d96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003da4:	61fa      	str	r2, [r7, #28]
 8003da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	617b      	str	r3, [r7, #20]
   return(result);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e3      	bne.n	8003d80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f848 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dc4:	e023      	b.n	8003e0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_UART_IRQHandler+0x4ea>
 8003dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8bb 	bl	8003f5a <UART_Transmit_IT>
    return;
 8003de4:	e014      	b.n	8003e10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00e      	beq.n	8003e10 <HAL_UART_IRQHandler+0x514>
 8003df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8fb 	bl	8003ffa <UART_EndTransmit_IT>
    return;
 8003e04:	e004      	b.n	8003e10 <HAL_UART_IRQHandler+0x514>
    return;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <HAL_UART_IRQHandler+0x514>
      return;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_UART_IRQHandler+0x514>
      return;
 8003e0e:	bf00      	nop
  }
}
 8003e10:	37e8      	adds	r7, #232	; 0xe8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop

08003e18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b095      	sub	sp, #84	; 0x54
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e94:	643a      	str	r2, [r7, #64]	; 0x40
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e5      	bne.n	8003e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3314      	adds	r3, #20
 8003eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3314      	adds	r3, #20
 8003ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e5      	bne.n	8003ea8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d119      	bne.n	8003f18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f023 0310 	bic.w	r3, r3, #16
 8003efa:	647b      	str	r3, [r7, #68]	; 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f04:	61ba      	str	r2, [r7, #24]
 8003f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6979      	ldr	r1, [r7, #20]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	613b      	str	r3, [r7, #16]
   return(result);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e5      	bne.n	8003ee4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f26:	bf00      	nop
 8003f28:	3754      	adds	r7, #84	; 0x54
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff ff77 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b21      	cmp	r3, #33	; 0x21
 8003f6c:	d13e      	bne.n	8003fec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f76:	d114      	bne.n	8003fa2 <UART_Transmit_IT+0x48>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d110      	bne.n	8003fa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	1c9a      	adds	r2, r3, #2
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	621a      	str	r2, [r3, #32]
 8003fa0:	e008      	b.n	8003fb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	1c59      	adds	r1, r3, #1
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6211      	str	r1, [r2, #32]
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10f      	bne.n	8003fe8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
  }
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fefc 	bl	8003e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b08c      	sub	sp, #48	; 0x30
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b22      	cmp	r3, #34	; 0x22
 800403c:	f040 80ab 	bne.w	8004196 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004048:	d117      	bne.n	800407a <UART_Receive_IT+0x50>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d113      	bne.n	800407a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004068:	b29a      	uxth	r2, r3
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	1c9a      	adds	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
 8004078:	e026      	b.n	80040c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d007      	beq.n	800409e <UART_Receive_IT+0x74>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <UART_Receive_IT+0x82>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e008      	b.n	80040be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4619      	mov	r1, r3
 80040d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d15a      	bne.n	8004192 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0220 	bic.w	r2, r2, #32
 80040ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	2b01      	cmp	r3, #1
 800411a:	d135      	bne.n	8004188 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	613b      	str	r3, [r7, #16]
   return(result);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f023 0310 	bic.w	r3, r3, #16
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004142:	623a      	str	r2, [r7, #32]
 8004144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	69f9      	ldr	r1, [r7, #28]
 8004148:	6a3a      	ldr	r2, [r7, #32]
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e5      	bne.n	8004122 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b10      	cmp	r3, #16
 8004162:	d10a      	bne.n	800417a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fe67 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
 8004186:	e002      	b.n	800418e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fe4f 	bl	8003e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e002      	b.n	8004198 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e000      	b.n	8004198 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3730      	adds	r7, #48	; 0x30
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a4:	b0c0      	sub	sp, #256	; 0x100
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	68d9      	ldr	r1, [r3, #12]
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	ea40 0301 	orr.w	r3, r0, r1
 80041c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	431a      	orrs	r2, r3
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041f8:	f021 010c 	bic.w	r1, r1, #12
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004206:	430b      	orrs	r3, r1
 8004208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421a:	6999      	ldr	r1, [r3, #24]
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	ea40 0301 	orr.w	r3, r0, r1
 8004226:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b8f      	ldr	r3, [pc, #572]	; (800446c <UART_SetConfig+0x2cc>)
 8004230:	429a      	cmp	r2, r3
 8004232:	d005      	beq.n	8004240 <UART_SetConfig+0xa0>
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b8d      	ldr	r3, [pc, #564]	; (8004470 <UART_SetConfig+0x2d0>)
 800423c:	429a      	cmp	r2, r3
 800423e:	d104      	bne.n	800424a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004240:	f7fe fb80 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 8004244:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004248:	e003      	b.n	8004252 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800424a:	f7fe fb67 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 800424e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425c:	f040 810c 	bne.w	8004478 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004264:	2200      	movs	r2, #0
 8004266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800426a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800426e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004272:	4622      	mov	r2, r4
 8004274:	462b      	mov	r3, r5
 8004276:	1891      	adds	r1, r2, r2
 8004278:	65b9      	str	r1, [r7, #88]	; 0x58
 800427a:	415b      	adcs	r3, r3
 800427c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800427e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004282:	4621      	mov	r1, r4
 8004284:	eb12 0801 	adds.w	r8, r2, r1
 8004288:	4629      	mov	r1, r5
 800428a:	eb43 0901 	adc.w	r9, r3, r1
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800429a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800429e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042a2:	4690      	mov	r8, r2
 80042a4:	4699      	mov	r9, r3
 80042a6:	4623      	mov	r3, r4
 80042a8:	eb18 0303 	adds.w	r3, r8, r3
 80042ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042b0:	462b      	mov	r3, r5
 80042b2:	eb49 0303 	adc.w	r3, r9, r3
 80042b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042ce:	460b      	mov	r3, r1
 80042d0:	18db      	adds	r3, r3, r3
 80042d2:	653b      	str	r3, [r7, #80]	; 0x50
 80042d4:	4613      	mov	r3, r2
 80042d6:	eb42 0303 	adc.w	r3, r2, r3
 80042da:	657b      	str	r3, [r7, #84]	; 0x54
 80042dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042e4:	f7fb ff76 	bl	80001d4 <__aeabi_uldivmod>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4b61      	ldr	r3, [pc, #388]	; (8004474 <UART_SetConfig+0x2d4>)
 80042ee:	fba3 2302 	umull	r2, r3, r3, r2
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	011c      	lsls	r4, r3, #4
 80042f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004300:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004304:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004308:	4642      	mov	r2, r8
 800430a:	464b      	mov	r3, r9
 800430c:	1891      	adds	r1, r2, r2
 800430e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004310:	415b      	adcs	r3, r3
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004314:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004318:	4641      	mov	r1, r8
 800431a:	eb12 0a01 	adds.w	sl, r2, r1
 800431e:	4649      	mov	r1, r9
 8004320:	eb43 0b01 	adc.w	fp, r3, r1
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004330:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004338:	4692      	mov	sl, r2
 800433a:	469b      	mov	fp, r3
 800433c:	4643      	mov	r3, r8
 800433e:	eb1a 0303 	adds.w	r3, sl, r3
 8004342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004346:	464b      	mov	r3, r9
 8004348:	eb4b 0303 	adc.w	r3, fp, r3
 800434c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800435c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004360:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004364:	460b      	mov	r3, r1
 8004366:	18db      	adds	r3, r3, r3
 8004368:	643b      	str	r3, [r7, #64]	; 0x40
 800436a:	4613      	mov	r3, r2
 800436c:	eb42 0303 	adc.w	r3, r2, r3
 8004370:	647b      	str	r3, [r7, #68]	; 0x44
 8004372:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004376:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800437a:	f7fb ff2b 	bl	80001d4 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4611      	mov	r1, r2
 8004384:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <UART_SetConfig+0x2d4>)
 8004386:	fba3 2301 	umull	r2, r3, r3, r1
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2264      	movs	r2, #100	; 0x64
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	1acb      	subs	r3, r1, r3
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800439a:	4b36      	ldr	r3, [pc, #216]	; (8004474 <UART_SetConfig+0x2d4>)
 800439c:	fba3 2302 	umull	r2, r3, r3, r2
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043a8:	441c      	add	r4, r3
 80043aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043bc:	4642      	mov	r2, r8
 80043be:	464b      	mov	r3, r9
 80043c0:	1891      	adds	r1, r2, r2
 80043c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80043c4:	415b      	adcs	r3, r3
 80043c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043cc:	4641      	mov	r1, r8
 80043ce:	1851      	adds	r1, r2, r1
 80043d0:	6339      	str	r1, [r7, #48]	; 0x30
 80043d2:	4649      	mov	r1, r9
 80043d4:	414b      	adcs	r3, r1
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043e4:	4659      	mov	r1, fp
 80043e6:	00cb      	lsls	r3, r1, #3
 80043e8:	4651      	mov	r1, sl
 80043ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ee:	4651      	mov	r1, sl
 80043f0:	00ca      	lsls	r2, r1, #3
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	4642      	mov	r2, r8
 80043fa:	189b      	adds	r3, r3, r2
 80043fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004400:	464b      	mov	r3, r9
 8004402:	460a      	mov	r2, r1
 8004404:	eb42 0303 	adc.w	r3, r2, r3
 8004408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004418:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800441c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004420:	460b      	mov	r3, r1
 8004422:	18db      	adds	r3, r3, r3
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
 8004426:	4613      	mov	r3, r2
 8004428:	eb42 0303 	adc.w	r3, r2, r3
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004432:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004436:	f7fb fecd 	bl	80001d4 <__aeabi_uldivmod>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <UART_SetConfig+0x2d4>)
 8004440:	fba3 1302 	umull	r1, r3, r3, r2
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	2164      	movs	r1, #100	; 0x64
 8004448:	fb01 f303 	mul.w	r3, r1, r3
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	3332      	adds	r3, #50	; 0x32
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <UART_SetConfig+0x2d4>)
 8004454:	fba2 2303 	umull	r2, r3, r2, r3
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	f003 0207 	and.w	r2, r3, #7
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4422      	add	r2, r4
 8004466:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004468:	e105      	b.n	8004676 <UART_SetConfig+0x4d6>
 800446a:	bf00      	nop
 800446c:	40011000 	.word	0x40011000
 8004470:	40011400 	.word	0x40011400
 8004474:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800447c:	2200      	movs	r2, #0
 800447e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004482:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004486:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800448a:	4642      	mov	r2, r8
 800448c:	464b      	mov	r3, r9
 800448e:	1891      	adds	r1, r2, r2
 8004490:	6239      	str	r1, [r7, #32]
 8004492:	415b      	adcs	r3, r3
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
 8004496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800449a:	4641      	mov	r1, r8
 800449c:	1854      	adds	r4, r2, r1
 800449e:	4649      	mov	r1, r9
 80044a0:	eb43 0501 	adc.w	r5, r3, r1
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	00eb      	lsls	r3, r5, #3
 80044ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b2:	00e2      	lsls	r2, r4, #3
 80044b4:	4614      	mov	r4, r2
 80044b6:	461d      	mov	r5, r3
 80044b8:	4643      	mov	r3, r8
 80044ba:	18e3      	adds	r3, r4, r3
 80044bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044c0:	464b      	mov	r3, r9
 80044c2:	eb45 0303 	adc.w	r3, r5, r3
 80044c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044e6:	4629      	mov	r1, r5
 80044e8:	008b      	lsls	r3, r1, #2
 80044ea:	4621      	mov	r1, r4
 80044ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f0:	4621      	mov	r1, r4
 80044f2:	008a      	lsls	r2, r1, #2
 80044f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044f8:	f7fb fe6c 	bl	80001d4 <__aeabi_uldivmod>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4b60      	ldr	r3, [pc, #384]	; (8004684 <UART_SetConfig+0x4e4>)
 8004502:	fba3 2302 	umull	r2, r3, r3, r2
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	011c      	lsls	r4, r3, #4
 800450a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800450e:	2200      	movs	r2, #0
 8004510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004514:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004518:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	1891      	adds	r1, r2, r2
 8004522:	61b9      	str	r1, [r7, #24]
 8004524:	415b      	adcs	r3, r3
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800452c:	4641      	mov	r1, r8
 800452e:	1851      	adds	r1, r2, r1
 8004530:	6139      	str	r1, [r7, #16]
 8004532:	4649      	mov	r1, r9
 8004534:	414b      	adcs	r3, r1
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004544:	4659      	mov	r1, fp
 8004546:	00cb      	lsls	r3, r1, #3
 8004548:	4651      	mov	r1, sl
 800454a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454e:	4651      	mov	r1, sl
 8004550:	00ca      	lsls	r2, r1, #3
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	4603      	mov	r3, r0
 8004558:	4642      	mov	r2, r8
 800455a:	189b      	adds	r3, r3, r2
 800455c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004560:	464b      	mov	r3, r9
 8004562:	460a      	mov	r2, r1
 8004564:	eb42 0303 	adc.w	r3, r2, r3
 8004568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	67bb      	str	r3, [r7, #120]	; 0x78
 8004576:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004584:	4649      	mov	r1, r9
 8004586:	008b      	lsls	r3, r1, #2
 8004588:	4641      	mov	r1, r8
 800458a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800458e:	4641      	mov	r1, r8
 8004590:	008a      	lsls	r2, r1, #2
 8004592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004596:	f7fb fe1d 	bl	80001d4 <__aeabi_uldivmod>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4b39      	ldr	r3, [pc, #228]	; (8004684 <UART_SetConfig+0x4e4>)
 80045a0:	fba3 1302 	umull	r1, r3, r3, r2
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	2164      	movs	r1, #100	; 0x64
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	3332      	adds	r3, #50	; 0x32
 80045b2:	4a34      	ldr	r2, [pc, #208]	; (8004684 <UART_SetConfig+0x4e4>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045be:	441c      	add	r4, r3
 80045c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c4:	2200      	movs	r2, #0
 80045c6:	673b      	str	r3, [r7, #112]	; 0x70
 80045c8:	677a      	str	r2, [r7, #116]	; 0x74
 80045ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045ce:	4642      	mov	r2, r8
 80045d0:	464b      	mov	r3, r9
 80045d2:	1891      	adds	r1, r2, r2
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	415b      	adcs	r3, r3
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045de:	4641      	mov	r1, r8
 80045e0:	1851      	adds	r1, r2, r1
 80045e2:	6039      	str	r1, [r7, #0]
 80045e4:	4649      	mov	r1, r9
 80045e6:	414b      	adcs	r3, r1
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045f6:	4659      	mov	r1, fp
 80045f8:	00cb      	lsls	r3, r1, #3
 80045fa:	4651      	mov	r1, sl
 80045fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004600:	4651      	mov	r1, sl
 8004602:	00ca      	lsls	r2, r1, #3
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	4603      	mov	r3, r0
 800460a:	4642      	mov	r2, r8
 800460c:	189b      	adds	r3, r3, r2
 800460e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004610:	464b      	mov	r3, r9
 8004612:	460a      	mov	r2, r1
 8004614:	eb42 0303 	adc.w	r3, r2, r3
 8004618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	663b      	str	r3, [r7, #96]	; 0x60
 8004624:	667a      	str	r2, [r7, #100]	; 0x64
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004632:	4649      	mov	r1, r9
 8004634:	008b      	lsls	r3, r1, #2
 8004636:	4641      	mov	r1, r8
 8004638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800463c:	4641      	mov	r1, r8
 800463e:	008a      	lsls	r2, r1, #2
 8004640:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004644:	f7fb fdc6 	bl	80001d4 <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <UART_SetConfig+0x4e4>)
 800464e:	fba3 1302 	umull	r1, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2164      	movs	r1, #100	; 0x64
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	3332      	adds	r3, #50	; 0x32
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <UART_SetConfig+0x4e4>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f003 020f 	and.w	r2, r3, #15
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4422      	add	r2, r4
 8004674:	609a      	str	r2, [r3, #8]
}
 8004676:	bf00      	nop
 8004678:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800467c:	46bd      	mov	sp, r7
 800467e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004682:	bf00      	nop
 8004684:	51eb851f 	.word	0x51eb851f

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4d0d      	ldr	r5, [pc, #52]	; (80046c0 <__libc_init_array+0x38>)
 800468c:	4c0d      	ldr	r4, [pc, #52]	; (80046c4 <__libc_init_array+0x3c>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	2600      	movs	r6, #0
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	4d0b      	ldr	r5, [pc, #44]	; (80046c8 <__libc_init_array+0x40>)
 800469a:	4c0c      	ldr	r4, [pc, #48]	; (80046cc <__libc_init_array+0x44>)
 800469c:	f000 f820 	bl	80046e0 <_init>
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	2600      	movs	r6, #0
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b0:	4798      	blx	r3
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ba:	4798      	blx	r3
 80046bc:	3601      	adds	r6, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	08004720 	.word	0x08004720
 80046c4:	08004720 	.word	0x08004720
 80046c8:	08004720 	.word	0x08004720
 80046cc:	08004724 	.word	0x08004724

080046d0 <memset>:
 80046d0:	4402      	add	r2, r0
 80046d2:	4603      	mov	r3, r0
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d100      	bne.n	80046da <memset+0xa>
 80046d8:	4770      	bx	lr
 80046da:	f803 1b01 	strb.w	r1, [r3], #1
 80046de:	e7f9      	b.n	80046d4 <memset+0x4>

080046e0 <_init>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	bf00      	nop
 80046e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e6:	bc08      	pop	{r3}
 80046e8:	469e      	mov	lr, r3
 80046ea:	4770      	bx	lr

080046ec <_fini>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr
