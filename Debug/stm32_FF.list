
stm32_FF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004728  08004728  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004730  08004730  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000000c  08004744  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08004744  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d714  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c17  00000000  00000000  0002d750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001559f  00000000  00000000  00030b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7ad  00000000  00000000  0004611f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895b2  00000000  00000000  000538cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dce7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  000dced0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080046f0 	.word	0x080046f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080046f0 	.word	0x080046f0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fea2 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f974 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fb2a 	bl	8000b3c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 faac 	bl	8000a44 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 fa80 	bl	80009f0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80004f0:	f000 f9d8 	bl	80008a4 <MX_TIM1_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    prepareDshotPacket(2000, ESC_CMD_MOTOR1);
 80004f4:	490c      	ldr	r1, [pc, #48]	; (8000528 <main+0x50>)
 80004f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004fa:	f000 f839 	bl	8000570 <prepareDshotPacket>
    prepareDshotPacket(1000, ESC_CMD_MOTOR2);
 80004fe:	490b      	ldr	r1, [pc, #44]	; (800052c <main+0x54>)
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 f834 	bl	8000570 <prepareDshotPacket>
    prepareDshotPacket(1500, ESC_CMD_MOTOR3);
 8000508:	4909      	ldr	r1, [pc, #36]	; (8000530 <main+0x58>)
 800050a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800050e:	f000 f82f 	bl	8000570 <prepareDshotPacket>
    prepareDshotPacket(2000, ESC_CMD_MOTOR4);
 8000512:	4908      	ldr	r1, [pc, #32]	; (8000534 <main+0x5c>)
 8000514:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000518:	f000 f82a 	bl	8000570 <prepareDshotPacket>

    SendDshotPacket();
 800051c:	f000 f916 	bl	800074c <SendDshotPacket>

    DelayMs(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 f809 	bl	8000538 <DelayMs>
    prepareDshotPacket(2000, ESC_CMD_MOTOR1);
 8000526:	e7e5      	b.n	80004f4 <main+0x1c>
 8000528:	20000354 	.word	0x20000354
 800052c:	20000378 	.word	0x20000378
 8000530:	2000039c 	.word	0x2000039c
 8000534:	200003c0 	.word	0x200003c0

08000538 <DelayMs>:
	}
  /* USER CODE END 3 */
}


void DelayMs(uint32_t ms) {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	for (;ms > 0; --ms) {
 8000540:	e00c      	b.n	800055c <DelayMs+0x24>
		for (uint16_t j = 7946; j > 0; j--);
 8000542:	f641 730a 	movw	r3, #7946	; 0x1f0a
 8000546:	81fb      	strh	r3, [r7, #14]
 8000548:	e002      	b.n	8000550 <DelayMs+0x18>
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	3b01      	subs	r3, #1
 800054e:	81fb      	strh	r3, [r7, #14]
 8000550:	89fb      	ldrh	r3, [r7, #14]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1f9      	bne.n	800054a <DelayMs+0x12>
	for (;ms > 0; --ms) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3b01      	subs	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d1ef      	bne.n	8000542 <DelayMs+0xa>
	}
}
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <prepareDshotPacket>:

static void prepareDshotPacket(const uint16_t elememt, uint16_t *esc_cmd)
{
 8000570:	b480      	push	{r7}
 8000572:	b089      	sub	sp, #36	; 0x24
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	80fb      	strh	r3, [r7, #6]
    uint8_t requestTelemetry = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	74fb      	strb	r3, [r7, #19]
    uint16_t value = elememt;
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	823b      	strh	r3, [r7, #16]
    value = ( (value > 2047) ? 2047 : value );
 8000584:	8a3b      	ldrh	r3, [r7, #16]
 8000586:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800058a:	4293      	cmp	r3, r2
 800058c:	bf28      	it	cs
 800058e:	4613      	movcs	r3, r2
 8000590:	823b      	strh	r3, [r7, #16]
    // 油门大小为11位  所以这里先左移一位 添加上请求回传标志共12位
    uint16_t packet = (value << 1) | requestTelemetry;
 8000592:	8a3b      	ldrh	r3, [r7, #16]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	b21a      	sxth	r2, r3
 8000598:	7cfb      	ldrb	r3, [r7, #19]
 800059a:	b21b      	sxth	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b21b      	sxth	r3, r3
 80005a0:	81fb      	strh	r3, [r7, #14]
 
    // 将12位数据分为3组 每组4位, 进行异或
    // compute checksum
    int csum = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
    int csum_data = packet;
 80005a6:	89fb      	ldrh	r3, [r7, #14]
 80005a8:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 3; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e009      	b.n	80005c4 <prepareDshotPacket+0x54>
        csum ^=  csum_data;   // xor data by nibbles
 80005b0:	69fa      	ldr	r2, [r7, #28]
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	4053      	eors	r3, r2
 80005b6:	61fb      	str	r3, [r7, #28]
        csum_data >>= 4;
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	111b      	asrs	r3, r3, #4
 80005bc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 3; i++) {
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	ddf2      	ble.n	80005b0 <prepareDshotPacket+0x40>
    }
    //取最后四位 其他的不要 
    csum &= 0xf;
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	f003 030f 	and.w	r3, r3, #15
 80005d0:	61fb      	str	r3, [r7, #28]
    // append checksum 将CRC添加到后四位
    packet = (packet << 4) | csum;
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	b21b      	sxth	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b21b      	sxth	r3, r3
 80005e0:	81fb      	strh	r3, [r7, #14]

    esc_cmd[0]  = (packet & 0x8000) ? ESC_BIT_1 : ESC_BIT_0;
 80005e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	da01      	bge.n	80005ee <prepareDshotPacket+0x7e>
 80005ea:	2264      	movs	r2, #100	; 0x64
 80005ec:	e000      	b.n	80005f0 <prepareDshotPacket+0x80>
 80005ee:	2232      	movs	r2, #50	; 0x32
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	801a      	strh	r2, [r3, #0]
    esc_cmd[1]  = (packet & 0x4000) ? ESC_BIT_1 : ESC_BIT_0;
 80005f4:	89fb      	ldrh	r3, [r7, #14]
 80005f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <prepareDshotPacket+0x92>
 80005fe:	2264      	movs	r2, #100	; 0x64
 8000600:	e000      	b.n	8000604 <prepareDshotPacket+0x94>
 8000602:	2232      	movs	r2, #50	; 0x32
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	3302      	adds	r3, #2
 8000608:	801a      	strh	r2, [r3, #0]
    esc_cmd[2]  = (packet & 0x2000) ? ESC_BIT_1 : ESC_BIT_0;
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <prepareDshotPacket+0xa8>
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	e000      	b.n	800061a <prepareDshotPacket+0xaa>
 8000618:	2232      	movs	r2, #50	; 0x32
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	3304      	adds	r3, #4
 800061e:	801a      	strh	r2, [r3, #0]
    esc_cmd[3]  = (packet & 0x1000) ? ESC_BIT_1 : ESC_BIT_0;
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <prepareDshotPacket+0xbe>
 800062a:	2264      	movs	r2, #100	; 0x64
 800062c:	e000      	b.n	8000630 <prepareDshotPacket+0xc0>
 800062e:	2232      	movs	r2, #50	; 0x32
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	3306      	adds	r3, #6
 8000634:	801a      	strh	r2, [r3, #0]
    esc_cmd[4]  = (packet & 0x0800) ? ESC_BIT_1 : ESC_BIT_0;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <prepareDshotPacket+0xd4>
 8000640:	2264      	movs	r2, #100	; 0x64
 8000642:	e000      	b.n	8000646 <prepareDshotPacket+0xd6>
 8000644:	2232      	movs	r2, #50	; 0x32
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	3308      	adds	r3, #8
 800064a:	801a      	strh	r2, [r3, #0]
    esc_cmd[5]  = (packet & 0x0400) ? ESC_BIT_1 : ESC_BIT_0;
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <prepareDshotPacket+0xea>
 8000656:	2264      	movs	r2, #100	; 0x64
 8000658:	e000      	b.n	800065c <prepareDshotPacket+0xec>
 800065a:	2232      	movs	r2, #50	; 0x32
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	330a      	adds	r3, #10
 8000660:	801a      	strh	r2, [r3, #0]
    esc_cmd[6]  = (packet & 0x0200) ? ESC_BIT_1 : ESC_BIT_0;
 8000662:	89fb      	ldrh	r3, [r7, #14]
 8000664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <prepareDshotPacket+0x100>
 800066c:	2264      	movs	r2, #100	; 0x64
 800066e:	e000      	b.n	8000672 <prepareDshotPacket+0x102>
 8000670:	2232      	movs	r2, #50	; 0x32
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	330c      	adds	r3, #12
 8000676:	801a      	strh	r2, [r3, #0]
    esc_cmd[7]  = (packet & 0x0100) ? ESC_BIT_1 : ESC_BIT_0;
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <prepareDshotPacket+0x116>
 8000682:	2264      	movs	r2, #100	; 0x64
 8000684:	e000      	b.n	8000688 <prepareDshotPacket+0x118>
 8000686:	2232      	movs	r2, #50	; 0x32
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	330e      	adds	r3, #14
 800068c:	801a      	strh	r2, [r3, #0]
    esc_cmd[8]  = (packet & 0x0080) ? ESC_BIT_1 : ESC_BIT_0;
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <prepareDshotPacket+0x12c>
 8000698:	2264      	movs	r2, #100	; 0x64
 800069a:	e000      	b.n	800069e <prepareDshotPacket+0x12e>
 800069c:	2232      	movs	r2, #50	; 0x32
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	3310      	adds	r3, #16
 80006a2:	801a      	strh	r2, [r3, #0]
    esc_cmd[9]  = (packet & 0x0040) ? ESC_BIT_1 : ESC_BIT_0;
 80006a4:	89fb      	ldrh	r3, [r7, #14]
 80006a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <prepareDshotPacket+0x142>
 80006ae:	2264      	movs	r2, #100	; 0x64
 80006b0:	e000      	b.n	80006b4 <prepareDshotPacket+0x144>
 80006b2:	2232      	movs	r2, #50	; 0x32
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	3312      	adds	r3, #18
 80006b8:	801a      	strh	r2, [r3, #0]
    esc_cmd[10] = (packet & 0x0020) ? ESC_BIT_1 : ESC_BIT_0;
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	f003 0320 	and.w	r3, r3, #32
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <prepareDshotPacket+0x158>
 80006c4:	2264      	movs	r2, #100	; 0x64
 80006c6:	e000      	b.n	80006ca <prepareDshotPacket+0x15a>
 80006c8:	2232      	movs	r2, #50	; 0x32
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	3314      	adds	r3, #20
 80006ce:	801a      	strh	r2, [r3, #0]
    esc_cmd[11] = (packet & 0x0010) ? ESC_BIT_1 : ESC_BIT_0; 	
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <prepareDshotPacket+0x16e>
 80006da:	2264      	movs	r2, #100	; 0x64
 80006dc:	e000      	b.n	80006e0 <prepareDshotPacket+0x170>
 80006de:	2232      	movs	r2, #50	; 0x32
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	3316      	adds	r3, #22
 80006e4:	801a      	strh	r2, [r3, #0]
    esc_cmd[12] = (packet & 0x8) ? ESC_BIT_1 : ESC_BIT_0;
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <prepareDshotPacket+0x184>
 80006f0:	2264      	movs	r2, #100	; 0x64
 80006f2:	e000      	b.n	80006f6 <prepareDshotPacket+0x186>
 80006f4:	2232      	movs	r2, #50	; 0x32
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	3318      	adds	r3, #24
 80006fa:	801a      	strh	r2, [r3, #0]
    esc_cmd[13] = (packet & 0x4) ? ESC_BIT_1 : ESC_BIT_0;
 80006fc:	89fb      	ldrh	r3, [r7, #14]
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <prepareDshotPacket+0x19a>
 8000706:	2264      	movs	r2, #100	; 0x64
 8000708:	e000      	b.n	800070c <prepareDshotPacket+0x19c>
 800070a:	2232      	movs	r2, #50	; 0x32
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	331a      	adds	r3, #26
 8000710:	801a      	strh	r2, [r3, #0]
    esc_cmd[14] = (packet & 0x2) ? ESC_BIT_1 : ESC_BIT_0;
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <prepareDshotPacket+0x1b0>
 800071c:	2264      	movs	r2, #100	; 0x64
 800071e:	e000      	b.n	8000722 <prepareDshotPacket+0x1b2>
 8000720:	2232      	movs	r2, #50	; 0x32
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	331c      	adds	r3, #28
 8000726:	801a      	strh	r2, [r3, #0]
    esc_cmd[15] = (packet & 0x1) ? ESC_BIT_1 : ESC_BIT_0;
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <prepareDshotPacket+0x1c6>
 8000732:	2264      	movs	r2, #100	; 0x64
 8000734:	e000      	b.n	8000738 <prepareDshotPacket+0x1c8>
 8000736:	2232      	movs	r2, #50	; 0x32
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	331e      	adds	r3, #30
 800073c:	801a      	strh	r2, [r3, #0]
}
 800073e:	bf00      	nop
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SendDshotPacket>:

static void SendDshotPacket()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_1,(uint32_t *)ESC_CMD_MOTOR1,ESC_CMD_BUF_LEN);
 8000750:	2312      	movs	r3, #18
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <SendDshotPacket+0x38>)
 8000754:	2100      	movs	r1, #0
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <SendDshotPacket+0x3c>)
 8000758:	f002 f97a 	bl	8002a50 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_2,(uint32_t *)ESC_CMD_MOTOR2,ESC_CMD_BUF_LEN);
 800075c:	2312      	movs	r3, #18
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <SendDshotPacket+0x40>)
 8000760:	2104      	movs	r1, #4
 8000762:	4809      	ldr	r0, [pc, #36]	; (8000788 <SendDshotPacket+0x3c>)
 8000764:	f002 f974 	bl	8002a50 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_3,(uint32_t *)ESC_CMD_MOTOR3,ESC_CMD_BUF_LEN);
 8000768:	2312      	movs	r3, #18
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <SendDshotPacket+0x44>)
 800076c:	2108      	movs	r1, #8
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <SendDshotPacket+0x3c>)
 8000770:	f002 f96e 	bl	8002a50 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_4,(uint32_t *)ESC_CMD_MOTOR4,ESC_CMD_BUF_LEN);
 8000774:	2312      	movs	r3, #18
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <SendDshotPacket+0x48>)
 8000778:	210c      	movs	r1, #12
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <SendDshotPacket+0x3c>)
 800077c:	f002 f968 	bl	8002a50 <HAL_TIM_PWM_Start_DMA>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000354 	.word	0x20000354
 8000788:	20000028 	.word	0x20000028
 800078c:	20000378 	.word	0x20000378
 8000790:	2000039c 	.word	0x2000039c
 8000794:	200003c0 	.word	0x200003c0

08000798 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80007a0:	2100      	movs	r1, #0
 80007a2:	4809      	ldr	r0, [pc, #36]	; (80007c8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80007a4:	f002 fb04 	bl	8002db0 <HAL_TIM_PWM_Stop_DMA>
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 80007a8:	2104      	movs	r1, #4
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80007ac:	f002 fb00 	bl	8002db0 <HAL_TIM_PWM_Stop_DMA>
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 80007b0:	2108      	movs	r1, #8
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80007b4:	f002 fafc 	bl	8002db0 <HAL_TIM_PWM_Stop_DMA>
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_4);
 80007b8:	210c      	movs	r1, #12
 80007ba:	4803      	ldr	r0, [pc, #12]	; (80007c8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80007bc:	f002 faf8 	bl	8002db0 <HAL_TIM_PWM_Stop_DMA>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000028 	.word	0x20000028

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 ff80 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b29      	ldr	r3, [pc, #164]	; (800089c <SystemClock_Config+0xd0>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	4a28      	ldr	r2, [pc, #160]	; (800089c <SystemClock_Config+0xd0>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000800:	4b26      	ldr	r3, [pc, #152]	; (800089c <SystemClock_Config+0xd0>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <SystemClock_Config+0xd4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <SystemClock_Config+0xd4>)
 800081a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <SystemClock_Config+0xd4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000840:	2319      	movs	r3, #25
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000844:	23a0      	movs	r3, #160	; 0xa0
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fc2d 	bl	80020b4 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000860:	f000 fa0c 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000868:	2302      	movs	r3, #2
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2102      	movs	r1, #2
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fe8f 	bl	80025a4 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800088c:	f000 f9f6 	bl	8000c7c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000890:	f001 ff6e 	bl	8002770 <HAL_RCC_EnableCSS>
}
 8000894:	bf00      	nop
 8000896:	3750      	adds	r7, #80	; 0x50
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b092      	sub	sp, #72	; 0x48
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2220      	movs	r2, #32
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 ff06 	bl	80046e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d4:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <MX_TIM1_Init+0x144>)
 80008d6:	4a45      	ldr	r2, [pc, #276]	; (80009ec <MX_TIM1_Init+0x148>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008da:	4b43      	ldr	r3, [pc, #268]	; (80009e8 <MX_TIM1_Init+0x144>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <MX_TIM1_Init+0x144>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 133;
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <MX_TIM1_Init+0x144>)
 80008e8:	2285      	movs	r2, #133	; 0x85
 80008ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b3e      	ldr	r3, [pc, #248]	; (80009e8 <MX_TIM1_Init+0x144>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f2:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <MX_TIM1_Init+0x144>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <MX_TIM1_Init+0x144>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008fe:	483a      	ldr	r0, [pc, #232]	; (80009e8 <MX_TIM1_Init+0x144>)
 8000900:	f002 f857 	bl	80029b2 <HAL_TIM_PWM_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800090a:	f000 f9b7 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800091a:	4619      	mov	r1, r3
 800091c:	4832      	ldr	r0, [pc, #200]	; (80009e8 <MX_TIM1_Init+0x144>)
 800091e:	f002 fee7 	bl	80036f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000928:	f000 f9a8 	bl	8000c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092c:	2360      	movs	r3, #96	; 0x60
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	4825      	ldr	r0, [pc, #148]	; (80009e8 <MX_TIM1_Init+0x144>)
 8000952:	f002 faf3 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800095c:	f000 f98e 	bl	8000c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	2204      	movs	r2, #4
 8000966:	4619      	mov	r1, r3
 8000968:	481f      	ldr	r0, [pc, #124]	; (80009e8 <MX_TIM1_Init+0x144>)
 800096a:	f002 fae7 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000974:	f000 f982 	bl	8000c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	2208      	movs	r2, #8
 800097e:	4619      	mov	r1, r3
 8000980:	4819      	ldr	r0, [pc, #100]	; (80009e8 <MX_TIM1_Init+0x144>)
 8000982:	f002 fadb 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800098c:	f000 f976 	bl	8000c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	220c      	movs	r2, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4813      	ldr	r0, [pc, #76]	; (80009e8 <MX_TIM1_Init+0x144>)
 800099a:	f002 facf 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80009a4:	f000 f96a 	bl	8000c7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_TIM1_Init+0x144>)
 80009cc:	f002 fefe 	bl	80037cc <HAL_TIMEx_ConfigBreakDeadTime>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80009d6:	f000 f951 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <MX_TIM1_Init+0x144>)
 80009dc:	f000 fa7c 	bl	8000ed8 <HAL_TIM_MspPostInit>

}
 80009e0:	bf00      	nop
 80009e2:	3748      	adds	r7, #72	; 0x48
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000028 	.word	0x20000028
 80009ec:	40010000 	.word	0x40010000

080009f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART1_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a28:	f002 ff22 	bl	8003870 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 f923 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200001f0 	.word	0x200001f0
 8000a40:	40011000 	.word	0x40011000

08000a44 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <MX_DMA_Init+0xec>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a37      	ldr	r2, [pc, #220]	; (8000b30 <MX_DMA_Init+0xec>)
 8000a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <MX_DMA_Init+0xec>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000a66:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000a68:	4a33      	ldr	r2, [pc, #204]	; (8000b38 <MX_DMA_Init+0xf4>)
 8000a6a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a72:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a78:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a84:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <MX_DMA_Init+0xf0>)
 8000ab8:	f000 fd38 	bl	800152c <HAL_DMA_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 8000ac2:	f000 f8db 	bl	8000c7c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2039      	movs	r0, #57	; 0x39
 8000acc:	f000 fcf7 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ad0:	2039      	movs	r0, #57	; 0x39
 8000ad2:	f000 fd10 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	203a      	movs	r0, #58	; 0x3a
 8000adc:	f000 fcef 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ae0:	203a      	movs	r0, #58	; 0x3a
 8000ae2:	f000 fd08 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	203c      	movs	r0, #60	; 0x3c
 8000aec:	f000 fce7 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000af0:	203c      	movs	r0, #60	; 0x3c
 8000af2:	f000 fd00 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2044      	movs	r0, #68	; 0x44
 8000afc:	f000 fcdf 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000b00:	2044      	movs	r0, #68	; 0x44
 8000b02:	f000 fcf8 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2045      	movs	r0, #69	; 0x45
 8000b0c:	f000 fcd7 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b10:	2045      	movs	r0, #69	; 0x45
 8000b12:	f000 fcf0 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2046      	movs	r0, #70	; 0x46
 8000b1c:	f000 fccf 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000b20:	2046      	movs	r0, #70	; 0x46
 8000b22:	f000 fce8 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	200002f4 	.word	0x200002f4
 8000b38:	40026410 	.word	0x40026410

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b45      	ldr	r3, [pc, #276]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a44      	ldr	r2, [pc, #272]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a3d      	ldr	r2, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_GPIO_Init+0x130>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc8:	4829      	ldr	r0, [pc, #164]	; (8000c70 <MX_GPIO_Init+0x134>)
 8000bca:	f001 fa35 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4822      	ldr	r0, [pc, #136]	; (8000c70 <MX_GPIO_Init+0x134>)
 8000be8:	f001 f8a2 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	481b      	ldr	r0, [pc, #108]	; (8000c70 <MX_GPIO_Init+0x134>)
 8000c02:	f001 f895 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c06:	2301      	movs	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4816      	ldr	r0, [pc, #88]	; (8000c74 <MX_GPIO_Init+0x138>)
 8000c1c:	f001 f888 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000c20:	f249 03fe 	movw	r3, #37118	; 0x90fe
 8000c24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c26:	2303      	movs	r3, #3
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <MX_GPIO_Init+0x138>)
 8000c36:	f001 f87b 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c3a:	f24f 7337 	movw	r3, #63287	; 0xf737
 8000c3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c40:	2303      	movs	r3, #3
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480a      	ldr	r0, [pc, #40]	; (8000c78 <MX_GPIO_Init+0x13c>)
 8000c50:	f001 f86e 	bl	8001d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2006      	movs	r0, #6
 8000c5a:	f000 fc30 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c5e:	2006      	movs	r0, #6
 8000c60:	f000 fc49 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40020400 	.word	0x40020400

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a72      	ldr	r2, [pc, #456]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x1d8>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	f040 80de 	bne.w	8000ea8 <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4b70      	ldr	r3, [pc, #448]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x1dc>)
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf4:	4a6f      	ldr	r2, [pc, #444]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x1dc>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfc:	4b6d      	ldr	r3, [pc, #436]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x1dc>)
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000d08:	4b6b      	ldr	r3, [pc, #428]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d0a:	4a6c      	ldr	r2, [pc, #432]	; (8000ebc <HAL_TIM_PWM_MspInit+0x1e4>)
 8000d0c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000d0e:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d10:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d14:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d16:	4b68      	ldr	r3, [pc, #416]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d18:	2240      	movs	r2, #64	; 0x40
 8000d1a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1c:	4b66      	ldr	r3, [pc, #408]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d22:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d28:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d2a:	4b63      	ldr	r3, [pc, #396]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d30:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d32:	4b61      	ldr	r3, [pc, #388]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d40:	4b5d      	ldr	r3, [pc, #372]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d46:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d48:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d4e:	485a      	ldr	r0, [pc, #360]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d50:	f000 fbec 	bl	800152c <HAL_DMA_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8000d5a:	f7ff ff8f 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a55      	ldr	r2, [pc, #340]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
 8000d64:	4a54      	ldr	r2, [pc, #336]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x1e0>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8000d6a:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d6c:	4a55      	ldr	r2, [pc, #340]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x1ec>)
 8000d6e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8000d70:	4b53      	ldr	r3, [pc, #332]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d72:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d78:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d7a:	2240      	movs	r2, #64	; 0x40
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7e:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000d84:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8c:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d94:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000d9c:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8000da2:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000da4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000da8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000daa:	4b45      	ldr	r3, [pc, #276]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000db0:	4843      	ldr	r0, [pc, #268]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000db2:	f000 fbbb 	bl	800152c <HAL_DMA_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_TIM_PWM_MspInit+0xe8>
    {
      Error_Handler();
 8000dbc:	f7ff ff5e 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a3f      	ldr	r2, [pc, #252]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
 8000dc6:	4a3e      	ldr	r2, [pc, #248]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000dce:	4a3f      	ldr	r2, [pc, #252]	; (8000ecc <HAL_TIM_PWM_MspInit+0x1f4>)
 8000dd0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8000dd2:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000dd4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000dd8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dda:	4b3b      	ldr	r3, [pc, #236]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000ddc:	2240      	movs	r2, #64	; 0x40
 8000dde:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de0:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dec:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000df4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000df8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000dfe:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e0a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000e12:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000e14:	f000 fb8a 	bl	800152c <HAL_DMA_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_TIM_PWM_MspInit+0x14a>
    {
      Error_Handler();
 8000e1e:	f7ff ff2d 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a28      	ldr	r2, [pc, #160]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e28:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e30:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e32:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e36:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e3a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e3e:	2240      	movs	r2, #64	; 0x40
 8000e40:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e56:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e6c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8000e74:	4816      	ldr	r0, [pc, #88]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e76:	f000 fb59 	bl	800152c <HAL_DMA_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_TIM_PWM_MspInit+0x1ac>
    {
      Error_Handler();
 8000e80:	f7ff fefc 	bl	8000c7c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e88:	631a      	str	r2, [r3, #48]	; 0x30
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	20000070 	.word	0x20000070
 8000ebc:	40026428 	.word	0x40026428
 8000ec0:	200000d0 	.word	0x200000d0
 8000ec4:	40026440 	.word	0x40026440
 8000ec8:	20000130 	.word	0x20000130
 8000ecc:	400264a0 	.word	0x400264a0
 8000ed0:	20000190 	.word	0x20000190
 8000ed4:	40026470 	.word	0x40026470

08000ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <HAL_TIM_MspPostInit+0x68>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d11e      	bne.n	8000f38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_TIM_MspPostInit+0x6c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_TIM_MspPostInit+0x6c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_TIM_MspPostInit+0x6c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f16:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_TIM_MspPostInit+0x70>)
 8000f34:	f000 fefc 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40010000 	.word	0x40010000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_UART_MspInit+0x150>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 8091 	bne.w	8001092 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	4a49      	ldr	r2, [pc, #292]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f80:	4b47      	ldr	r3, [pc, #284]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a42      	ldr	r2, [pc, #264]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa8:	23c0      	movs	r3, #192	; 0xc0
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4838      	ldr	r0, [pc, #224]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000fc4:	f000 feb4 	bl	8001d30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8000fc8:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fca:	4a38      	ldr	r2, [pc, #224]	; (80010ac <HAL_UART_MspInit+0x160>)
 8000fcc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000ffe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001002:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800100a:	4827      	ldr	r0, [pc, #156]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 800100c:	f000 fa8e 	bl	800152c <HAL_DMA_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001016:	f7ff fe31 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_UART_MspInit+0x168>)
 800102a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800102e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001032:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001036:	2240      	movs	r2, #64	; 0x40
 8001038:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001046:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001066:	4812      	ldr	r0, [pc, #72]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001068:	f000 fa60 	bl	800152c <HAL_DMA_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001072:	f7ff fe03 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800107a:	635a      	str	r2, [r3, #52]	; 0x34
 800107c:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2025      	movs	r0, #37	; 0x25
 8001088:	f000 fa19 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800108c:	2025      	movs	r0, #37	; 0x25
 800108e:	f000 fa32 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40011000 	.word	0x40011000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020400 	.word	0x40020400
 80010a8:	20000234 	.word	0x20000234
 80010ac:	40026488 	.word	0x40026488
 80010b0:	20000294 	.word	0x20000294
 80010b4:	400264b8 	.word	0x400264b8

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80010bc:	f001 fc5e 	bl	800297c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x8>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001108:	f000 f8de 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001114:	2001      	movs	r0, #1
 8001116:	f000 ffa9 	bl	800206c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <USART1_IRQHandler+0x10>)
 8001126:	f002 fbf1 	bl	800390c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001f0 	.word	0x200001f0

08001134 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <DMA2_Stream1_IRQHandler+0x10>)
 800113a:	f000 fb8f 	bl	800185c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000070 	.word	0x20000070

08001148 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <DMA2_Stream2_IRQHandler+0x10>)
 800114e:	f000 fb85 	bl	800185c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000d0 	.word	0x200000d0

0800115c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <DMA2_Stream4_IRQHandler+0x10>)
 8001162:	f000 fb7b 	bl	800185c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000190 	.word	0x20000190

08001170 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <DMA2_Stream5_IRQHandler+0x10>)
 8001176:	f000 fb71 	bl	800185c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000234 	.word	0x20000234

08001184 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <DMA2_Stream6_IRQHandler+0x10>)
 800118a:	f000 fb67 	bl	800185c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000130 	.word	0x20000130

08001198 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <DMA2_Stream7_IRQHandler+0x10>)
 800119e:	f000 fb5d 	bl	800185c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000294 	.word	0x20000294

080011ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopFillZerobss+0x12>
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopFillZerobss+0x16>)
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <LoopFillZerobss+0x1a>)
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <LoopFillZerobss+0x1e>)
 80011da:	2300      	movs	r3, #0
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:
 80011de:	58d4      	ldr	r4, [r2, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:
 80011e4:	18c4      	adds	r4, r0, r3
 80011e6:	428c      	cmp	r4, r1
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopFillZerobss+0x22>)
 80011ec:	4c0b      	ldr	r4, [pc, #44]	; (800121c <LoopFillZerobss+0x26>)
 80011ee:	2300      	movs	r3, #0
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:
 80011f6:	42a2      	cmp	r2, r4
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>
 80011fa:	f7ff ffd7 	bl	80011ac <SystemInit>
 80011fe:	f003 fa4b 	bl	8004698 <__libc_init_array>
 8001202:	f7ff f969 	bl	80004d8 <main>
 8001206:	4770      	bx	lr
 8001208:	20010000 	.word	0x20010000
 800120c:	20000000 	.word	0x20000000
 8001210:	2000000c 	.word	0x2000000c
 8001214:	08004738 	.word	0x08004738
 8001218:	2000000c 	.word	0x2000000c
 800121c:	200003e8 	.word	0x200003e8

08001220 <ADC_IRQHandler>:
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_Init+0x40>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_Init+0x40>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x40>)
 8001246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 f92b 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	200f      	movs	r0, #15
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fd16 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f943 	bl	8001512 <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a4:	f000 f90b 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008
 80012ec:	200003e4 	.word	0x200003e4

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200003e4 	.word	0x200003e4

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff29 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff3e 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff31 	bl	800136c <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff feda 	bl	80012f0 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e099      	b.n	800167c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001568:	e00f      	b.n	800158a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800156a:	f7ff fec1 	bl	80012f0 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b05      	cmp	r3, #5
 8001576:	d908      	bls.n	800158a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2220      	movs	r2, #32
 800157c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e078      	b.n	800167c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e8      	bne.n	800156a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4b38      	ldr	r3, [pc, #224]	; (8001684 <HAL_DMA_Init+0x158>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d107      	bne.n	80015f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4313      	orrs	r3, r2
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f023 0307 	bic.w	r3, r3, #7
 800160a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	4313      	orrs	r3, r2
 8001614:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	2b04      	cmp	r3, #4
 800161c:	d117      	bne.n	800164e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00e      	beq.n	800164e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fb01 	bl	8001c38 <DMA_CheckFifoParam>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2240      	movs	r2, #64	; 0x40
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800164a:	2301      	movs	r3, #1
 800164c:	e016      	b.n	800167c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fab8 	bl	8001bcc <DMA_CalcBaseAndBitshift>
 800165c:	4603      	mov	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001664:	223f      	movs	r2, #63	; 0x3f
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	f010803f 	.word	0xf010803f

08001688 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_DMA_Start_IT+0x26>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e040      	b.n	8001730 <HAL_DMA_Start_IT+0xa8>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d12f      	bne.n	8001722 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2202      	movs	r2, #2
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 fa4a 	bl	8001b70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	223f      	movs	r2, #63	; 0x3f
 80016e2:	409a      	lsls	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0216 	orr.w	r2, r2, #22
 80016f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0208 	orr.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e005      	b.n	800172e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800172a:	2302      	movs	r3, #2
 800172c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800172e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001746:	f7ff fdd3 	bl	80012f0 <HAL_GetTick>
 800174a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d008      	beq.n	800176a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e052      	b.n	8001810 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0216 	bic.w	r2, r2, #22
 8001778:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001788:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <HAL_DMA_Abort+0x62>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0208 	bic.w	r2, r2, #8
 80017a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ba:	e013      	b.n	80017e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017bc:	f7ff fd98 	bl	80012f0 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b05      	cmp	r3, #5
 80017c8:	d90c      	bls.n	80017e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2203      	movs	r2, #3
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e015      	b.n	8001810 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1e4      	bne.n	80017bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	223f      	movs	r2, #63	; 0x3f
 80017f8:	409a      	lsls	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d004      	beq.n	8001836 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00c      	b.n	8001850 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0201 	bic.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <HAL_DMA_IRQHandler+0x248>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <HAL_DMA_IRQHandler+0x24c>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0a9b      	lsrs	r3, r3, #10
 8001874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	2208      	movs	r2, #8
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d01a      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0204 	bic.w	r2, r2, #4
 80018ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	2208      	movs	r2, #8
 80018b6:	409a      	lsls	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2201      	movs	r2, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d012      	beq.n	80018fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	2201      	movs	r2, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f043 0202 	orr.w	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2204      	movs	r2, #4
 8001904:	409a      	lsls	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d012      	beq.n	8001934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001920:	2204      	movs	r2, #4
 8001922:	409a      	lsls	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	f043 0204 	orr.w	r2, r3, #4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2210      	movs	r2, #16
 800193a:	409a      	lsls	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d043      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03c      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2210      	movs	r2, #16
 8001958:	409a      	lsls	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d018      	beq.n	800199e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d108      	bne.n	800198c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d024      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	4798      	blx	r3
 800198a:	e01f      	b.n	80019cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01b      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e016      	b.n	80019cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0208 	bic.w	r2, r2, #8
 80019ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2220      	movs	r2, #32
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 808f 	beq.w	8001afc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8087 	beq.w	8001afc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2220      	movs	r2, #32
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d136      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0216 	bic.w	r2, r2, #22
 8001a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x1da>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	223f      	movs	r2, #63	; 0x3f
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d07e      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
        }
        return;
 8001a72:	e079      	b.n	8001b68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01d      	beq.n	8001abe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10d      	bne.n	8001aac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d031      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
 8001aa0:	e02c      	b.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e01e      	b.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10f      	bne.n	8001aec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0210 	bic.w	r2, r2, #16
 8001ada:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d032      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d022      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2205      	movs	r2, #5
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d307      	bcc.n	8001b44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f2      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x2cc>
 8001b42:	e000      	b.n	8001b46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
 8001b66:	e000      	b.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b68:	bf00      	nop
    }
  }
}
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b40      	cmp	r3, #64	; 0x40
 8001b9c:	d108      	bne.n	8001bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bae:	e007      	b.n	8001bc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3b10      	subs	r3, #16
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <DMA_CalcBaseAndBitshift+0x64>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <DMA_CalcBaseAndBitshift+0x68>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d909      	bls.n	8001c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	1d1a      	adds	r2, r3, #4
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c0c:	e007      	b.n	8001c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	aaaaaaab 	.word	0xaaaaaaab
 8001c34:	08004720 	.word	0x08004720

08001c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d11f      	bne.n	8001c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d856      	bhi.n	8001d06 <DMA_CheckFifoParam+0xce>
 8001c58:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <DMA_CheckFifoParam+0x28>)
 8001c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5e:	bf00      	nop
 8001c60:	08001c71 	.word	0x08001c71
 8001c64:	08001c83 	.word	0x08001c83
 8001c68:	08001c71 	.word	0x08001c71
 8001c6c:	08001d07 	.word	0x08001d07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d046      	beq.n	8001d0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c80:	e043      	b.n	8001d0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c8a:	d140      	bne.n	8001d0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c90:	e03d      	b.n	8001d0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c9a:	d121      	bne.n	8001ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d837      	bhi.n	8001d12 <DMA_CheckFifoParam+0xda>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <DMA_CheckFifoParam+0x70>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001cbf 	.word	0x08001cbf
 8001cb0:	08001cb9 	.word	0x08001cb9
 8001cb4:	08001cd1 	.word	0x08001cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
      break;
 8001cbc:	e030      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d025      	beq.n	8001d16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cce:	e022      	b.n	8001d16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cd8:	d11f      	bne.n	8001d1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cde:	e01c      	b.n	8001d1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d903      	bls.n	8001cee <DMA_CheckFifoParam+0xb6>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d003      	beq.n	8001cf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cec:	e018      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf2:	e015      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00e      	beq.n	8001d1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
      break;
 8001d04:	e00b      	b.n	8001d1e <DMA_CheckFifoParam+0xe6>
      break;
 8001d06:	bf00      	nop
 8001d08:	e00a      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0a:	bf00      	nop
 8001d0c:	e008      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e006      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d12:	bf00      	nop
 8001d14:	e004      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d16:	bf00      	nop
 8001d18:	e002      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d1a:	bf00      	nop
 8001d1c:	e000      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e159      	b.n	8002000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 8148 	bne.w	8001ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d130      	bne.n	8001de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d017      	beq.n	8001e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a2 	beq.w	8001ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a56      	ldr	r2, [pc, #344]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x2ec>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a49      	ldr	r2, [pc, #292]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x202>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_GPIO_Init+0x2f4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x1fe>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_GPIO_Init+0x2f8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x1fa>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a46      	ldr	r2, [pc, #280]	; (800202c <HAL_GPIO_Init+0x2fc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x1f6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a45      	ldr	r2, [pc, #276]	; (8002030 <HAL_GPIO_Init+0x300>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x1f2>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	e008      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f26:	2303      	movs	r3, #3
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f32:	2300      	movs	r3, #0
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	f002 0203 	and.w	r2, r2, #3
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_GPIO_Init+0x2ec>)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f52:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f76:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa0:	4a24      	ldr	r2, [pc, #144]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fca:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	f67f aea2 	bls.w	8001d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	40020800 	.word	0x40020800
 800202c:	40020c00 	.word	0x40020c00
 8002030:	40021000 	.word	0x40021000
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d006      	beq.n	8002090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f806 	bl	800209c <HAL_GPIO_EXTI_Callback>
  }
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40013c00 	.word	0x40013c00

0800209c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e267      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d075      	beq.n	80021be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d2:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d00c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020de:	4b85      	ldr	r3, [pc, #532]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d112      	bne.n	8002110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ea:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020f6:	d10b      	bne.n	8002110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	4b7e      	ldr	r3, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d05b      	beq.n	80021bc <HAL_RCC_OscConfig+0x108>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d157      	bne.n	80021bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e242      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d106      	bne.n	8002128 <HAL_RCC_OscConfig+0x74>
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x98>
 8002132:	4b70      	ldr	r3, [pc, #448]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6f      	ldr	r2, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6c      	ldr	r2, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 800214c:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a68      	ldr	r2, [pc, #416]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b66      	ldr	r3, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a65      	ldr	r2, [pc, #404]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff f8c0 	bl	80012f0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff f8bc 	bl	80012f0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e207      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xc0>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff f8ac 	bl	80012f0 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff f8a8 	bl	80012f0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1f3      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	4b51      	ldr	r3, [pc, #324]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0xe8>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d063      	beq.n	8002292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d11c      	bne.n	800221c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e2:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x152>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e1c7      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4937      	ldr	r1, [pc, #220]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	e03a      	b.n	8002292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002224:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <HAL_RCC_OscConfig+0x244>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7ff f861 	bl	80012f0 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002232:	f7ff f85d 	bl	80012f0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1a8      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4925      	ldr	r1, [pc, #148]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
 8002264:	e015      	b.n	8002292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_OscConfig+0x244>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7ff f840 	bl	80012f0 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002274:	f7ff f83c 	bl	80012f0 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e187      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d036      	beq.n	800230c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_RCC_OscConfig+0x248>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7ff f820 	bl	80012f0 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff f81c 	bl	80012f0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e167      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x200>
 80022d2:	e01b      	b.n	800230c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_OscConfig+0x248>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff f809 	bl	80012f0 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	e00e      	b.n	8002300 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e2:	f7ff f805 	bl	80012f0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d907      	bls.n	8002300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e150      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	42470000 	.word	0x42470000
 80022fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ea      	bne.n	80022e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8097 	beq.w	8002448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231e:	4b81      	ldr	r3, [pc, #516]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a7c      	ldr	r2, [pc, #496]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b77      	ldr	r3, [pc, #476]	; (8002528 <HAL_RCC_OscConfig+0x474>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4b74      	ldr	r3, [pc, #464]	; (8002528 <HAL_RCC_OscConfig+0x474>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a73      	ldr	r2, [pc, #460]	; (8002528 <HAL_RCC_OscConfig+0x474>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe ffc5 	bl	80012f0 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7fe ffc1 	bl	80012f0 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e10c      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x474>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x2ea>
 8002390:	4b64      	ldr	r3, [pc, #400]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	e01c      	b.n	80023d8 <HAL_RCC_OscConfig+0x324>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x30c>
 80023a6:	4b5f      	ldr	r3, [pc, #380]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	4a5e      	ldr	r2, [pc, #376]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70
 80023b2:	4b5c      	ldr	r3, [pc, #368]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0x324>
 80023c0:	4b58      	ldr	r3, [pc, #352]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	6713      	str	r3, [r2, #112]	; 0x70
 80023cc:	4b55      	ldr	r3, [pc, #340]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	4a54      	ldr	r2, [pc, #336]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023d2:	f023 0304 	bic.w	r3, r3, #4
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d015      	beq.n	800240c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe ff86 	bl	80012f0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7fe ff82 	bl	80012f0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0cb      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fe:	4b49      	ldr	r3, [pc, #292]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0ee      	beq.n	80023e8 <HAL_RCC_OscConfig+0x334>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7fe ff70 	bl	80012f0 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe ff6c 	bl	80012f0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0b5      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ee      	bne.n	8002414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	4a38      	ldr	r2, [pc, #224]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80a1 	beq.w	8002594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b08      	cmp	r3, #8
 800245c:	d05c      	beq.n	8002518 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d141      	bne.n	80024ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_RCC_OscConfig+0x478>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe ff40 	bl	80012f0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe ff3c 	bl	80012f0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e087      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	491b      	ldr	r1, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x478>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe ff15 	bl	80012f0 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe ff11 	bl	80012f0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e05c      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x416>
 80024e8:	e054      	b.n	8002594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_OscConfig+0x478>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fefe 	bl	80012f0 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fefa 	bl	80012f0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e045      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x444>
 8002516:	e03d      	b.n	8002594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e038      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000
 800252c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x4ec>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d028      	beq.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d121      	bne.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d11a      	bne.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d107      	bne.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0cc      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d90c      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b65      	ldr	r3, [pc, #404]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b63      	ldr	r3, [pc, #396]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0b8      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f8:	4b59      	ldr	r3, [pc, #356]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002610:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a52      	ldr	r2, [pc, #328]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	494d      	ldr	r1, [pc, #308]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d044      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d119      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e07f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d003      	beq.n	8002662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265e:	2b03      	cmp	r3, #3
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e067      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4934      	ldr	r1, [pc, #208]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	4313      	orrs	r3, r2
 8002692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7fe fe2c 	bl	80012f0 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7fe fe28 	bl	80012f0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e04f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d20c      	bcs.n	80026ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b22      	ldr	r3, [pc, #136]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e032      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4916      	ldr	r1, [pc, #88]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	490e      	ldr	r1, [pc, #56]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272a:	f000 f82d 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 800272e:	4602      	mov	r2, r0
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	490a      	ldr	r1, [pc, #40]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	5ccb      	ldrb	r3, [r1, r3]
 800273e:	fa22 f303 	lsr.w	r3, r2, r3
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fd8c 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023c00 	.word	0x40023c00
 8002760:	40023800 	.word	0x40023800
 8002764:	08004708 	.word	0x08004708
 8002768:	20000000 	.word	0x20000000
 800276c:	20000004 	.word	0x20000004

08002770 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_RCC_EnableCSS+0x14>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	4247004c 	.word	0x4247004c

08002788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278c:	b090      	sub	sp, #64	; 0x40
 800278e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
 8002794:	2300      	movs	r3, #0
 8002796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002798:	2300      	movs	r3, #0
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d00d      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x40>
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	f200 80a1 	bhi.w	80028f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x34>
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ba:	e09b      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_GetSysClockFreq+0x184>)
 80027be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027c0:	e09b      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c2:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_GetSysClockFreq+0x188>)
 80027c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027c6:	e098      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c8:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d2:	4b4d      	ldr	r3, [pc, #308]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d028      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	2200      	movs	r2, #0
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	627a      	str	r2, [r7, #36]	; 0x24
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027f0:	2100      	movs	r1, #0
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_GetSysClockFreq+0x188>)
 80027f4:	fb03 f201 	mul.w	r2, r3, r1
 80027f8:	2300      	movs	r3, #0
 80027fa:	fb00 f303 	mul.w	r3, r0, r3
 80027fe:	4413      	add	r3, r2
 8002800:	4a43      	ldr	r2, [pc, #268]	; (8002910 <HAL_RCC_GetSysClockFreq+0x188>)
 8002802:	fba0 1202 	umull	r1, r2, r0, r2
 8002806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002808:	460a      	mov	r2, r1
 800280a:	62ba      	str	r2, [r7, #40]	; 0x28
 800280c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280e:	4413      	add	r3, r2
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	2200      	movs	r2, #0
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	61fa      	str	r2, [r7, #28]
 800281a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800281e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002822:	f7fd fcd7 	bl	80001d4 <__aeabi_uldivmod>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4613      	mov	r3, r2
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800282e:	e053      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002830:	4b35      	ldr	r3, [pc, #212]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	2200      	movs	r2, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	617a      	str	r2, [r7, #20]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002842:	f04f 0b00 	mov.w	fp, #0
 8002846:	4652      	mov	r2, sl
 8002848:	465b      	mov	r3, fp
 800284a:	f04f 0000 	mov.w	r0, #0
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	0159      	lsls	r1, r3, #5
 8002854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002858:	0150      	lsls	r0, r2, #5
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	ebb2 080a 	subs.w	r8, r2, sl
 8002862:	eb63 090b 	sbc.w	r9, r3, fp
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002872:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002876:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800287a:	ebb2 0408 	subs.w	r4, r2, r8
 800287e:	eb63 0509 	sbc.w	r5, r3, r9
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	00eb      	lsls	r3, r5, #3
 800288c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002890:	00e2      	lsls	r2, r4, #3
 8002892:	4614      	mov	r4, r2
 8002894:	461d      	mov	r5, r3
 8002896:	eb14 030a 	adds.w	r3, r4, sl
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	eb45 030b 	adc.w	r3, r5, fp
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ae:	4629      	mov	r1, r5
 80028b0:	028b      	lsls	r3, r1, #10
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b8:	4621      	mov	r1, r4
 80028ba:	028a      	lsls	r2, r1, #10
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	2200      	movs	r2, #0
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	60fa      	str	r2, [r7, #12]
 80028c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028cc:	f7fd fc82 	bl	80001d4 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	3301      	adds	r3, #1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetSysClockFreq+0x184>)
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3740      	adds	r7, #64	; 0x40
 8002900:	46bd      	mov	sp, r7
 8002902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	00f42400 	.word	0x00f42400
 8002910:	017d7840 	.word	0x017d7840

08002914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCC_GetHCLKFreq+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000000 	.word	0x20000000

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002930:	f7ff fff0 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0a9b      	lsrs	r3, r3, #10
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40023800 	.word	0x40023800
 8002950:	08004718 	.word	0x08004718

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002958:	f7ff ffdc 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0b5b      	lsrs	r3, r3, #13
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4903      	ldr	r1, [pc, #12]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	08004718 	.word	0x08004718

0800297c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d104      	bne.n	8002996 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800298c:	f000 f80a 	bl	80029a4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	701a      	strb	r2, [r3, #0]
  }
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	4002380e 	.word	0x4002380e

080029a4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e041      	b.n	8002a48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe f97d 	bl	8000cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f000 fc4b 	bl	800328c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e022      	b.n	8002ac2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d109      	bne.n	8002a96 <HAL_TIM_PWM_Start_DMA+0x46>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	e015      	b.n	8002ac2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d109      	bne.n	8002ab0 <HAL_TIM_PWM_Start_DMA+0x60>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e008      	b.n	8002ac2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e15d      	b.n	8002d86 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_TIM_PWM_Start_DMA+0x94>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e022      	b.n	8002b2a <HAL_TIM_PWM_Start_DMA+0xda>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d109      	bne.n	8002afe <HAL_TIM_PWM_Start_DMA+0xae>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	e015      	b.n	8002b2a <HAL_TIM_PWM_Start_DMA+0xda>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d109      	bne.n	8002b18 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e008      	b.n	8002b2a <HAL_TIM_PWM_Start_DMA+0xda>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d024      	beq.n	8002b78 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <HAL_TIM_PWM_Start_DMA+0xee>
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e123      	b.n	8002d86 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_TIM_PWM_Start_DMA+0xfe>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b4c:	e016      	b.n	8002b7c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_PWM_Start_DMA+0x10e>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b5c:	e00e      	b.n	8002b7c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_PWM_Start_DMA+0x11e>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b6c:	e006      	b.n	8002b7c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b76:	e001      	b.n	8002b7c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e104      	b.n	8002d86 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	f200 80ae 	bhi.w	8002ce0 <HAL_TIM_PWM_Start_DMA+0x290>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002bc1 	.word	0x08002bc1
 8002b90:	08002ce1 	.word	0x08002ce1
 8002b94:	08002ce1 	.word	0x08002ce1
 8002b98:	08002ce1 	.word	0x08002ce1
 8002b9c:	08002c09 	.word	0x08002c09
 8002ba0:	08002ce1 	.word	0x08002ce1
 8002ba4:	08002ce1 	.word	0x08002ce1
 8002ba8:	08002ce1 	.word	0x08002ce1
 8002bac:	08002c51 	.word	0x08002c51
 8002bb0:	08002ce1 	.word	0x08002ce1
 8002bb4:	08002ce1 	.word	0x08002ce1
 8002bb8:	08002ce1 	.word	0x08002ce1
 8002bbc:	08002c99 	.word	0x08002c99
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	4a72      	ldr	r2, [pc, #456]	; (8002d90 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	4a71      	ldr	r2, [pc, #452]	; (8002d94 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	4a70      	ldr	r2, [pc, #448]	; (8002d98 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002bd6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3334      	adds	r3, #52	; 0x34
 8002be4:	461a      	mov	r2, r3
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	f7fe fd4e 	bl	8001688 <HAL_DMA_Start_IT>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0c7      	b.n	8002d86 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c04:	60da      	str	r2, [r3, #12]
      break;
 8002c06:	e06e      	b.n	8002ce6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	4a60      	ldr	r2, [pc, #384]	; (8002d90 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002c0e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	4a5f      	ldr	r2, [pc, #380]	; (8002d94 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	4a5e      	ldr	r2, [pc, #376]	; (8002d98 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002c1e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3338      	adds	r3, #56	; 0x38
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	f7fe fd2a 	bl	8001688 <HAL_DMA_Start_IT>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0a3      	b.n	8002d86 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c4c:	60da      	str	r2, [r3, #12]
      break;
 8002c4e:	e04a      	b.n	8002ce6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002c66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	333c      	adds	r3, #60	; 0x3c
 8002c74:	461a      	mov	r2, r3
 8002c76:	887b      	ldrh	r3, [r7, #2]
 8002c78:	f7fe fd06 	bl	8001688 <HAL_DMA_Start_IT>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e07f      	b.n	8002d86 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c94:	60da      	str	r2, [r3, #12]
      break;
 8002c96:	e026      	b.n	8002ce6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4a3c      	ldr	r2, [pc, #240]	; (8002d90 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002c9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002cae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3340      	adds	r3, #64	; 0x40
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	f7fe fce2 	bl	8001688 <HAL_DMA_Start_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e05b      	b.n	8002d86 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cdc:	60da      	str	r2, [r3, #12]
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d14b      	bne.n	8002d84 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fcd5 	bl	80036a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a20      	ldr	r2, [pc, #128]	; (8002d9c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d018      	beq.n	8002d50 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d013      	beq.n	8002d50 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00e      	beq.n	8002d50 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_TIM_PWM_Start_DMA+0x300>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d010      	beq.n	8002d84 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d72:	e007      	b.n	8002d84 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	0800317b 	.word	0x0800317b
 8002d94:	08003223 	.word	0x08003223
 8002d98:	080030e9 	.word	0x080030e9
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40014000 	.word	0x40014000

08002db0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	d855      	bhi.n	8002e70 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002dc4:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002e01 	.word	0x08002e01
 8002dd0:	08002e71 	.word	0x08002e71
 8002dd4:	08002e71 	.word	0x08002e71
 8002dd8:	08002e71 	.word	0x08002e71
 8002ddc:	08002e1d 	.word	0x08002e1d
 8002de0:	08002e71 	.word	0x08002e71
 8002de4:	08002e71 	.word	0x08002e71
 8002de8:	08002e71 	.word	0x08002e71
 8002dec:	08002e39 	.word	0x08002e39
 8002df0:	08002e71 	.word	0x08002e71
 8002df4:	08002e71 	.word	0x08002e71
 8002df8:	08002e71 	.word	0x08002e71
 8002dfc:	08002e55 	.word	0x08002e55
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fcff 	bl	8001818 <HAL_DMA_Abort_IT>
      break;
 8002e1a:	e02c      	b.n	8002e76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe fcf1 	bl	8001818 <HAL_DMA_Abort_IT>
      break;
 8002e36:	e01e      	b.n	8002e76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fce3 	bl	8001818 <HAL_DMA_Abort_IT>
      break;
 8002e52:	e010      	b.n	8002e76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe fcd5 	bl	8001818 <HAL_DMA_Abort_IT>
      break;
 8002e6e:	e002      	b.n	8002e76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d157      	bne.n	8002f2c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2200      	movs	r2, #0
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fc0d 	bl	80036a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	; (8002f38 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d117      	bne.n	8002ec4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a1a      	ldr	r2, [r3, #32]
 8002eaa:	f240 4344 	movw	r3, #1092	; 0x444
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d107      	bne.n	8002ec4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	f240 4344 	movw	r3, #1092	; 0x444
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d107      	bne.n	8002ef4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f02:	e013      	b.n	8002f2c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d104      	bne.n	8002f14 <HAL_TIM_PWM_Stop_DMA+0x164>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f12:	e00b      	b.n	8002f2c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d104      	bne.n	8002f24 <HAL_TIM_PWM_Stop_DMA+0x174>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f22:	e003      	b.n	8002f2c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40010000 	.word	0x40010000

08002f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0ae      	b.n	80030b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f200 809f 	bhi.w	80030a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	080030a9 	.word	0x080030a9
 8002f78:	080030a9 	.word	0x080030a9
 8002f7c:	080030a9 	.word	0x080030a9
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	080030a9 	.word	0x080030a9
 8002f88:	080030a9 	.word	0x080030a9
 8002f8c:	080030a9 	.word	0x080030a9
 8002f90:	08003027 	.word	0x08003027
 8002f94:	080030a9 	.word	0x080030a9
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	080030a9 	.word	0x080030a9
 8002fa0:	08003067 	.word	0x08003067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f9ee 	bl	800338c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
      break;
 8002fe2:	e064      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fa34 	bl	8003458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
      break;
 8003024:	e043      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fa7f 	bl	8003530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0204 	bic.w	r2, r2, #4
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]
      break;
 8003064:	e023      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fac9 	bl	8003604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	61da      	str	r2, [r3, #28]
      break;
 80030a6:	e002      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
      break;
 80030ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d107      	bne.n	8003110 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310e:	e02a      	b.n	8003166 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	429a      	cmp	r2, r3
 8003118:	d107      	bne.n	800312a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2202      	movs	r2, #2
 800311e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003128:	e01d      	b.n	8003166 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d107      	bne.n	8003144 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2204      	movs	r2, #4
 8003138:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003142:	e010      	b.n	8003166 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d107      	bne.n	800315e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2208      	movs	r2, #8
 8003152:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800315c:	e003      	b.n	8003166 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff ffb4 	bl	80030d4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	771a      	strb	r2, [r3, #28]
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d10b      	bne.n	80031aa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d136      	bne.n	800320e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a8:	e031      	b.n	800320e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d10b      	bne.n	80031cc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2202      	movs	r2, #2
 80031b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d125      	bne.n	800320e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ca:	e020      	b.n	800320e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d10b      	bne.n	80031ee <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2204      	movs	r2, #4
 80031da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d114      	bne.n	800320e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ec:	e00f      	b.n	800320e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d10a      	bne.n	800320e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2208      	movs	r2, #8
 80031fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f7fd fac2 	bl	8000798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	771a      	strb	r2, [r3, #28]
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d103      	bne.n	8003242 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	771a      	strb	r2, [r3, #28]
 8003240:	e019      	b.n	8003276 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d103      	bne.n	8003254 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2202      	movs	r2, #2
 8003250:	771a      	strb	r2, [r3, #28]
 8003252:	e010      	b.n	8003276 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d103      	bne.n	8003266 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2204      	movs	r2, #4
 8003262:	771a      	strb	r2, [r3, #28]
 8003264:	e007      	b.n	8003276 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d102      	bne.n	8003276 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2208      	movs	r2, #8
 8003274:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f7ff ff22 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	771a      	strb	r2, [r3, #28]
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a34      	ldr	r2, [pc, #208]	; (8003370 <TIM_Base_SetConfig+0xe4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00f      	beq.n	80032c4 <TIM_Base_SetConfig+0x38>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x38>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a31      	ldr	r2, [pc, #196]	; (8003374 <TIM_Base_SetConfig+0xe8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x38>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a30      	ldr	r2, [pc, #192]	; (8003378 <TIM_Base_SetConfig+0xec>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x38>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a2f      	ldr	r2, [pc, #188]	; (800337c <TIM_Base_SetConfig+0xf0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a25      	ldr	r2, [pc, #148]	; (8003370 <TIM_Base_SetConfig+0xe4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01b      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d017      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a22      	ldr	r2, [pc, #136]	; (8003374 <TIM_Base_SetConfig+0xe8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a21      	ldr	r2, [pc, #132]	; (8003378 <TIM_Base_SetConfig+0xec>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00f      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a20      	ldr	r2, [pc, #128]	; (800337c <TIM_Base_SetConfig+0xf0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00b      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <TIM_Base_SetConfig+0xf4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <TIM_Base_SetConfig+0xf8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <TIM_Base_SetConfig+0xfc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <TIM_Base_SetConfig+0xe4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	615a      	str	r2, [r3, #20]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40000400 	.word	0x40000400
 8003378:	40000800 	.word	0x40000800
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800

0800338c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0201 	bic.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0303 	bic.w	r3, r3, #3
 80033c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 0302 	bic.w	r3, r3, #2
 80033d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <TIM_OC1_SetConfig+0xc8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10c      	bne.n	8003402 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0308 	bic.w	r3, r3, #8
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a13      	ldr	r2, [pc, #76]	; (8003454 <TIM_OC1_SetConfig+0xc8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d111      	bne.n	800342e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40010000 	.word	0x40010000

08003458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0210 	bic.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0320 	bic.w	r3, r3, #32
 80034a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <TIM_OC2_SetConfig+0xd4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d10d      	bne.n	80034d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <TIM_OC2_SetConfig+0xd4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d113      	bne.n	8003504 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000

08003530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <TIM_OC3_SetConfig+0xd0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d10d      	bne.n	80035aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <TIM_OC3_SetConfig+0xd0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d113      	bne.n	80035da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	621a      	str	r2, [r3, #32]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	40010000 	.word	0x40010000

08003604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800364e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	031b      	lsls	r3, r3, #12
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <TIM_OC4_SetConfig+0x9c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d109      	bne.n	8003678 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	019b      	lsls	r3, r3, #6
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	621a      	str	r2, [r3, #32]
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40010000 	.word	0x40010000

080036a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2201      	movs	r2, #1
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1a      	ldr	r2, [r3, #32]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	401a      	ands	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a1a      	ldr	r2, [r3, #32]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003704:	2302      	movs	r3, #2
 8003706:	e050      	b.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d013      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a18      	ldr	r2, [pc, #96]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a13      	ldr	r2, [pc, #76]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d10c      	bne.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	4313      	orrs	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40014000 	.word	0x40014000

080037cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e03d      	b.n	8003864 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e03f      	b.n	8003902 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd fb58 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	; 0x24
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fc7b 	bl	80041b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b0ba      	sub	sp, #232	; 0xe8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003938:	2300      	movs	r3, #0
 800393a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800393e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800394a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_UART_IRQHandler+0x66>
 800395e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fb65 	bl	800403a <UART_Receive_IT>
      return;
 8003970:	e256      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80de 	beq.w	8003b38 <HAL_UART_IRQHandler+0x22c>
 800397c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80d1 	beq.w	8003b38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_UART_IRQHandler+0xae>
 80039a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_UART_IRQHandler+0xd2>
 80039c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f043 0202 	orr.w	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_UART_IRQHandler+0xf6>
 80039ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d011      	beq.n	8003a32 <HAL_UART_IRQHandler+0x126>
 8003a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0208 	orr.w	r2, r3, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 81ed 	beq.w	8003e16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_UART_IRQHandler+0x14e>
 8003a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 faf0 	bl	800403a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <HAL_UART_IRQHandler+0x17a>
 8003a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04f      	beq.n	8003b26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9f8 	bl	8003e7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d141      	bne.n	8003b1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3314      	adds	r3, #20
 8003ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1d9      	bne.n	8003a9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d013      	beq.n	8003b16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	4a7d      	ldr	r2, [pc, #500]	; (8003ce8 <HAL_UART_IRQHandler+0x3dc>)
 8003af4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fe8c 	bl	8001818 <HAL_DMA_Abort_IT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b10:	4610      	mov	r0, r2
 8003b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e00e      	b.n	8003b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f99a 	bl	8003e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e00a      	b.n	8003b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f996 	bl	8003e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e006      	b.n	8003b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f992 	bl	8003e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b32:	e170      	b.n	8003e16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	bf00      	nop
    return;
 8003b36:	e16e      	b.n	8003e16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f040 814a 	bne.w	8003dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8143 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 813c 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	f040 80b4 	bne.w	8003cec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8140 	beq.w	8003e1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	f080 8139 	bcs.w	8003e1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bba:	f000 8088 	beq.w	8003cce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1d9      	bne.n	8003bbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e1      	bne.n	8003c0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3314      	adds	r3, #20
 8003c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e3      	bne.n	8003c46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	f023 0310 	bic.w	r3, r3, #16
 8003ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	330c      	adds	r3, #12
 8003cac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e3      	bne.n	8003c8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd fd35 	bl	8001738 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8c0 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ce4:	e099      	b.n	8003e1a <HAL_UART_IRQHandler+0x50e>
 8003ce6:	bf00      	nop
 8003ce8:	08003f43 	.word	0x08003f43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 808b 	beq.w	8003e1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8086 	beq.w	8003e1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d36:	647a      	str	r2, [r7, #68]	; 0x44
 8003d38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e3      	bne.n	8003d12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	623b      	str	r3, [r7, #32]
   return(result);
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3314      	adds	r3, #20
 8003d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e3      	bne.n	8003d4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0310 	bic.w	r3, r3, #16
 8003da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003db4:	61fa      	str	r2, [r7, #28]
 8003db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	69b9      	ldr	r1, [r7, #24]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e3      	bne.n	8003d90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f848 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dd4:	e023      	b.n	8003e1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_UART_IRQHandler+0x4ea>
 8003de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8bb 	bl	8003f6a <UART_Transmit_IT>
    return;
 8003df4:	e014      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <HAL_UART_IRQHandler+0x514>
 8003e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8fb 	bl	800400a <UART_EndTransmit_IT>
    return;
 8003e14:	e004      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
    return;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
      return;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
      return;
 8003e1e:	bf00      	nop
  }
}
 8003e20:	37e8      	adds	r7, #232	; 0xe8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop

08003e28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b095      	sub	sp, #84	; 0x54
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ea4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e5      	bne.n	8003e84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3314      	adds	r3, #20
 8003ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e5      	bne.n	8003eb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d119      	bne.n	8003f28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f023 0310 	bic.w	r3, r3, #16
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f14:	61ba      	str	r2, [r7, #24]
 8003f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6979      	ldr	r1, [r7, #20]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	613b      	str	r3, [r7, #16]
   return(result);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e5      	bne.n	8003ef4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f36:	bf00      	nop
 8003f38:	3754      	adds	r7, #84	; 0x54
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff ff77 	bl	8003e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b21      	cmp	r3, #33	; 0x21
 8003f7c:	d13e      	bne.n	8003ffc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	d114      	bne.n	8003fb2 <UART_Transmit_IT+0x48>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d110      	bne.n	8003fb2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	621a      	str	r2, [r3, #32]
 8003fb0:	e008      	b.n	8003fc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	1c59      	adds	r1, r3, #1
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6211      	str	r1, [r2, #32]
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10f      	bne.n	8003ff8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004020:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fefc 	bl	8003e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b08c      	sub	sp, #48	; 0x30
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b22      	cmp	r3, #34	; 0x22
 800404c:	f040 80ab 	bne.w	80041a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004058:	d117      	bne.n	800408a <UART_Receive_IT+0x50>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d113      	bne.n	800408a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004078:	b29a      	uxth	r2, r3
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
 8004088:	e026      	b.n	80040d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409c:	d007      	beq.n	80040ae <UART_Receive_IT+0x74>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <UART_Receive_IT+0x82>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e008      	b.n	80040ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4619      	mov	r1, r3
 80040e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d15a      	bne.n	80041a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0220 	bic.w	r2, r2, #32
 80040fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800410a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	2b01      	cmp	r3, #1
 800412a:	d135      	bne.n	8004198 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	613b      	str	r3, [r7, #16]
   return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f023 0310 	bic.w	r3, r3, #16
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	623a      	str	r2, [r7, #32]
 8004154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	69f9      	ldr	r1, [r7, #28]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d10a      	bne.n	800418a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800418e:	4619      	mov	r1, r3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fe67 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
 8004196:	e002      	b.n	800419e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff fe4f 	bl	8003e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e002      	b.n	80041a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3730      	adds	r7, #48	; 0x30
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b4:	b0c0      	sub	sp, #256	; 0x100
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	68d9      	ldr	r1, [r3, #12]
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	ea40 0301 	orr.w	r3, r0, r1
 80041d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004208:	f021 010c 	bic.w	r1, r1, #12
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004216:	430b      	orrs	r3, r1
 8004218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422a:	6999      	ldr	r1, [r3, #24]
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	ea40 0301 	orr.w	r3, r0, r1
 8004236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b8f      	ldr	r3, [pc, #572]	; (800447c <UART_SetConfig+0x2cc>)
 8004240:	429a      	cmp	r2, r3
 8004242:	d005      	beq.n	8004250 <UART_SetConfig+0xa0>
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <UART_SetConfig+0x2d0>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d104      	bne.n	800425a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004250:	f7fe fb80 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8004254:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004258:	e003      	b.n	8004262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800425a:	f7fe fb67 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 800425e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	f040 810c 	bne.w	8004488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004274:	2200      	movs	r2, #0
 8004276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800427a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800427e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	1891      	adds	r1, r2, r2
 8004288:	65b9      	str	r1, [r7, #88]	; 0x58
 800428a:	415b      	adcs	r3, r3
 800428c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800428e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004292:	4621      	mov	r1, r4
 8004294:	eb12 0801 	adds.w	r8, r2, r1
 8004298:	4629      	mov	r1, r5
 800429a:	eb43 0901 	adc.w	r9, r3, r1
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042b2:	4690      	mov	r8, r2
 80042b4:	4699      	mov	r9, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	eb18 0303 	adds.w	r3, r8, r3
 80042bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042c0:	462b      	mov	r3, r5
 80042c2:	eb49 0303 	adc.w	r3, r9, r3
 80042c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042de:	460b      	mov	r3, r1
 80042e0:	18db      	adds	r3, r3, r3
 80042e2:	653b      	str	r3, [r7, #80]	; 0x50
 80042e4:	4613      	mov	r3, r2
 80042e6:	eb42 0303 	adc.w	r3, r2, r3
 80042ea:	657b      	str	r3, [r7, #84]	; 0x54
 80042ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042f4:	f7fb ff6e 	bl	80001d4 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4b61      	ldr	r3, [pc, #388]	; (8004484 <UART_SetConfig+0x2d4>)
 80042fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	011c      	lsls	r4, r3, #4
 8004306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004310:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	1891      	adds	r1, r2, r2
 800431e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004320:	415b      	adcs	r3, r3
 8004322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004328:	4641      	mov	r1, r8
 800432a:	eb12 0a01 	adds.w	sl, r2, r1
 800432e:	4649      	mov	r1, r9
 8004330:	eb43 0b01 	adc.w	fp, r3, r1
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004348:	4692      	mov	sl, r2
 800434a:	469b      	mov	fp, r3
 800434c:	4643      	mov	r3, r8
 800434e:	eb1a 0303 	adds.w	r3, sl, r3
 8004352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004356:	464b      	mov	r3, r9
 8004358:	eb4b 0303 	adc.w	r3, fp, r3
 800435c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800436c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004374:	460b      	mov	r3, r1
 8004376:	18db      	adds	r3, r3, r3
 8004378:	643b      	str	r3, [r7, #64]	; 0x40
 800437a:	4613      	mov	r3, r2
 800437c:	eb42 0303 	adc.w	r3, r2, r3
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
 8004382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800438a:	f7fb ff23 	bl	80001d4 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4611      	mov	r1, r2
 8004394:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <UART_SetConfig+0x2d4>)
 8004396:	fba3 2301 	umull	r2, r3, r3, r1
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2264      	movs	r2, #100	; 0x64
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	1acb      	subs	r3, r1, r3
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <UART_SetConfig+0x2d4>)
 80043ac:	fba3 2302 	umull	r2, r3, r3, r2
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b8:	441c      	add	r4, r3
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80043d4:	415b      	adcs	r3, r3
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043dc:	4641      	mov	r1, r8
 80043de:	1851      	adds	r1, r2, r1
 80043e0:	6339      	str	r1, [r7, #48]	; 0x30
 80043e2:	4649      	mov	r1, r9
 80043e4:	414b      	adcs	r3, r1
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043f4:	4659      	mov	r1, fp
 80043f6:	00cb      	lsls	r3, r1, #3
 80043f8:	4651      	mov	r1, sl
 80043fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fe:	4651      	mov	r1, sl
 8004400:	00ca      	lsls	r2, r1, #3
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	4603      	mov	r3, r0
 8004408:	4642      	mov	r2, r8
 800440a:	189b      	adds	r3, r3, r2
 800440c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004410:	464b      	mov	r3, r9
 8004412:	460a      	mov	r2, r1
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004428:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800442c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004430:	460b      	mov	r3, r1
 8004432:	18db      	adds	r3, r3, r3
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
 8004436:	4613      	mov	r3, r2
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004446:	f7fb fec5 	bl	80001d4 <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <UART_SetConfig+0x2d4>)
 8004450:	fba3 1302 	umull	r1, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	2164      	movs	r1, #100	; 0x64
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	3332      	adds	r3, #50	; 0x32
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <UART_SetConfig+0x2d4>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	f003 0207 	and.w	r2, r3, #7
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4422      	add	r2, r4
 8004476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004478:	e105      	b.n	8004686 <UART_SetConfig+0x4d6>
 800447a:	bf00      	nop
 800447c:	40011000 	.word	0x40011000
 8004480:	40011400 	.word	0x40011400
 8004484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800448c:	2200      	movs	r2, #0
 800448e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004492:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800449a:	4642      	mov	r2, r8
 800449c:	464b      	mov	r3, r9
 800449e:	1891      	adds	r1, r2, r2
 80044a0:	6239      	str	r1, [r7, #32]
 80044a2:	415b      	adcs	r3, r3
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044aa:	4641      	mov	r1, r8
 80044ac:	1854      	adds	r4, r2, r1
 80044ae:	4649      	mov	r1, r9
 80044b0:	eb43 0501 	adc.w	r5, r3, r1
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	00eb      	lsls	r3, r5, #3
 80044be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c2:	00e2      	lsls	r2, r4, #3
 80044c4:	4614      	mov	r4, r2
 80044c6:	461d      	mov	r5, r3
 80044c8:	4643      	mov	r3, r8
 80044ca:	18e3      	adds	r3, r4, r3
 80044cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044d0:	464b      	mov	r3, r9
 80044d2:	eb45 0303 	adc.w	r3, r5, r3
 80044d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044f6:	4629      	mov	r1, r5
 80044f8:	008b      	lsls	r3, r1, #2
 80044fa:	4621      	mov	r1, r4
 80044fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004500:	4621      	mov	r1, r4
 8004502:	008a      	lsls	r2, r1, #2
 8004504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004508:	f7fb fe64 	bl	80001d4 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4b60      	ldr	r3, [pc, #384]	; (8004694 <UART_SetConfig+0x4e4>)
 8004512:	fba3 2302 	umull	r2, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	011c      	lsls	r4, r3, #4
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004524:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	61b9      	str	r1, [r7, #24]
 8004534:	415b      	adcs	r3, r3
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800453c:	4641      	mov	r1, r8
 800453e:	1851      	adds	r1, r2, r1
 8004540:	6139      	str	r1, [r7, #16]
 8004542:	4649      	mov	r1, r9
 8004544:	414b      	adcs	r3, r1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004554:	4659      	mov	r1, fp
 8004556:	00cb      	lsls	r3, r1, #3
 8004558:	4651      	mov	r1, sl
 800455a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455e:	4651      	mov	r1, sl
 8004560:	00ca      	lsls	r2, r1, #3
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	4603      	mov	r3, r0
 8004568:	4642      	mov	r2, r8
 800456a:	189b      	adds	r3, r3, r2
 800456c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004570:	464b      	mov	r3, r9
 8004572:	460a      	mov	r2, r1
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	67bb      	str	r3, [r7, #120]	; 0x78
 8004586:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004594:	4649      	mov	r1, r9
 8004596:	008b      	lsls	r3, r1, #2
 8004598:	4641      	mov	r1, r8
 800459a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459e:	4641      	mov	r1, r8
 80045a0:	008a      	lsls	r2, r1, #2
 80045a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045a6:	f7fb fe15 	bl	80001d4 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4b39      	ldr	r3, [pc, #228]	; (8004694 <UART_SetConfig+0x4e4>)
 80045b0:	fba3 1302 	umull	r1, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	2164      	movs	r1, #100	; 0x64
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	3332      	adds	r3, #50	; 0x32
 80045c2:	4a34      	ldr	r2, [pc, #208]	; (8004694 <UART_SetConfig+0x4e4>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ce:	441c      	add	r4, r3
 80045d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d4:	2200      	movs	r2, #0
 80045d6:	673b      	str	r3, [r7, #112]	; 0x70
 80045d8:	677a      	str	r2, [r7, #116]	; 0x74
 80045da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045de:	4642      	mov	r2, r8
 80045e0:	464b      	mov	r3, r9
 80045e2:	1891      	adds	r1, r2, r2
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	415b      	adcs	r3, r3
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ee:	4641      	mov	r1, r8
 80045f0:	1851      	adds	r1, r2, r1
 80045f2:	6039      	str	r1, [r7, #0]
 80045f4:	4649      	mov	r1, r9
 80045f6:	414b      	adcs	r3, r1
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004606:	4659      	mov	r1, fp
 8004608:	00cb      	lsls	r3, r1, #3
 800460a:	4651      	mov	r1, sl
 800460c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004610:	4651      	mov	r1, sl
 8004612:	00ca      	lsls	r2, r1, #3
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	4603      	mov	r3, r0
 800461a:	4642      	mov	r2, r8
 800461c:	189b      	adds	r3, r3, r2
 800461e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004620:	464b      	mov	r3, r9
 8004622:	460a      	mov	r2, r1
 8004624:	eb42 0303 	adc.w	r3, r2, r3
 8004628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	663b      	str	r3, [r7, #96]	; 0x60
 8004634:	667a      	str	r2, [r7, #100]	; 0x64
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004642:	4649      	mov	r1, r9
 8004644:	008b      	lsls	r3, r1, #2
 8004646:	4641      	mov	r1, r8
 8004648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464c:	4641      	mov	r1, r8
 800464e:	008a      	lsls	r2, r1, #2
 8004650:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004654:	f7fb fdbe 	bl	80001d4 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <UART_SetConfig+0x4e4>)
 800465e:	fba3 1302 	umull	r1, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	2164      	movs	r1, #100	; 0x64
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	3332      	adds	r3, #50	; 0x32
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <UART_SetConfig+0x4e4>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	f003 020f 	and.w	r2, r3, #15
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4422      	add	r2, r4
 8004684:	609a      	str	r2, [r3, #8]
}
 8004686:	bf00      	nop
 8004688:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800468c:	46bd      	mov	sp, r7
 800468e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004692:	bf00      	nop
 8004694:	51eb851f 	.word	0x51eb851f

08004698 <__libc_init_array>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	4d0d      	ldr	r5, [pc, #52]	; (80046d0 <__libc_init_array+0x38>)
 800469c:	4c0d      	ldr	r4, [pc, #52]	; (80046d4 <__libc_init_array+0x3c>)
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	2600      	movs	r6, #0
 80046a4:	42a6      	cmp	r6, r4
 80046a6:	d109      	bne.n	80046bc <__libc_init_array+0x24>
 80046a8:	4d0b      	ldr	r5, [pc, #44]	; (80046d8 <__libc_init_array+0x40>)
 80046aa:	4c0c      	ldr	r4, [pc, #48]	; (80046dc <__libc_init_array+0x44>)
 80046ac:	f000 f820 	bl	80046f0 <_init>
 80046b0:	1b64      	subs	r4, r4, r5
 80046b2:	10a4      	asrs	r4, r4, #2
 80046b4:	2600      	movs	r6, #0
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	d105      	bne.n	80046c6 <__libc_init_array+0x2e>
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c0:	4798      	blx	r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7ee      	b.n	80046a4 <__libc_init_array+0xc>
 80046c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ca:	4798      	blx	r3
 80046cc:	3601      	adds	r6, #1
 80046ce:	e7f2      	b.n	80046b6 <__libc_init_array+0x1e>
 80046d0:	08004730 	.word	0x08004730
 80046d4:	08004730 	.word	0x08004730
 80046d8:	08004730 	.word	0x08004730
 80046dc:	08004734 	.word	0x08004734

080046e0 <memset>:
 80046e0:	4402      	add	r2, r0
 80046e2:	4603      	mov	r3, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <_init>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	bf00      	nop
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr

080046fc <_fini>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr
